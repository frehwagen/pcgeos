/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) Geoworks 1994 -- All Rights Reserved

PROJECT:	Socket
MODULE:		TCP/IP Driver
FILE:		tcpip.goc

AUTHOR:		Jennifer Wu, Jul  6, 1994

ROUTINES:
	Name			Description
	----			-----------

	TcpipConfigureProtocols If protocol level configuration is allowed,
	    	    	    	this routine reads settings from INI file
				to alter the behaviour of the protocol.


REVISION HISTORY:
	Name		Date		Description
	----		----		-----------
	jwu		7/ 6/94   	Initial version.

DESCRIPTION:
	Definitions and methods for TcpipProcessClass.

	$Id: tcpip.goc,v 1.1 97/04/18 11:57:04 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
@include <stdapp.goh>

#include <geos.h>
#include <thread.h>
#include <sem.h>
#include <timer.h>
#include <initfile.h>
#include <ec.h>
#include <Internal/socketDr.h>
#include <ip.h>
#include <tcp.h>
#include <udp.h>
#include <rawIp.h>
#include <tcpip.h>
#include <tcpipLog.h>
@include <accpnt.goh>
#include <Ansi/string.h>

/*---------------------------------------------------------------------------*
 *		     Class & Message Definitions
 *
 *  The driver has its own thread for processing events.  Routines for the
 *  driver's interface will usually do some small bookkeeping and then queue
 *  the event for the driver to process.  The TcpipProcessClass is created
 *  to run the driver's thread.
 *---------------------------------------------------------------------------*/

@class	TcpipProcessClass, ProcessClass;

/*
 * Start the process required to open a connection.
 */
@message void MSG_TCPIP_OPEN_CONNECTION(word connection = cx);

/*
 * Start the process to close a connection.
 */
@message void MSG_TCPIP_CLOSE_CONNECTION(word connection = cx);

/*
 * Start the process to reset a connection.
 */
@message void MSG_TCPIP_RESET_CONNECTION(word connection = cx, word error = dx);

/*
 * Start the process to open a connection requested by the peer.
 */
@message void MSG_TCPIP_ACCEPT_CONNECTION(word connection = cx);

/*
 * Process outgoing data for a connection.
 */
@message word MSG_TCPIP_SEND_DATA(word connection = cx, word mode = dx) = ax;

/*
 * Send datagram.
 */
@message word MSG_TCPIP_SEND_DATAGRAM(word link = cx, optr buffer = dx:bp) = ax;

/*
 * Process incoming data from the network.
 */
@message void MSG_TCPIP_RECEIVE_DATA();

/*
 * Process a timeout.
 */
@message void MSG_TCPIP_TIMEOUT_OCCURRED ();

/*
 * Delete a link.
 */
@message void MSG_TCPIP_DELETE_LINK (word link = cx);

/*
 * Destroy all Tcp connections.
 */
@message void MSG_TCPIP_DESTROY_CONNECTIONS ();

/*
 * Send a raw ip packet.
 */
@message word MSG_TCPIP_SEND_RAW_IP(word link = cx, optr buffer = dx:bp) = ax;

/*
 * DHCP lease renewal messages
 */
@message void MSG_TCPIP_DHCP_RENEW_TIMER();
@message void MSG_TCPIP_DHCP_RENEW_NOW();

@endc

@classdecl	TcpipProcessClass, neverSaved;


#ifdef __HIGHC__
#pragma Code("TCPCODE");
#endif
#ifdef __BORLANDC__
#pragma codeseg TCPCODE
#endif
#ifdef __WATCOMC__
#pragma code_seg("TCPCODE")
#endif

/*--------------------------------------------------------------------------*
 *			       Methods
 *--------------------------------------------------------------------------*/


/*-------------------------------------------------------------------------
		      MSG_TCPIP_OPEN_CONNECTION
---------------------------------------------------------------------------
SYNOPSIS:	Start the process required to open a connection.

PASS:		connection	= handle of connection to open

RETURN:		nothing

SIDE EFFECTS:	Initiates TCP protocol for establishing a connection.

STRATEGY:
		initialize tcp template header
		set tcp state to SYN_SENT
		initialize keep alive timer
		initialize initial send sequence # and relatives
		call the TCP output function

REVISION HISTORY:
 	Name	Date		Description
 	----	----		-----------
 	jwu	7/ 6/94   	Initial Revision

---------------------------------------------------------------------------*/
@method TcpipProcessClass, MSG_TCPIP_OPEN_CONNECTION
{
	optr tp;
	struct tcpcb *tcb;

	if ((tp = TSocketToTCB(connection)) != 0) {
	    TcpipLock(OptrToHandle(tp));
	    tcb = (struct tcpcb *)LMemDeref(tp);

	    /*
	     *  Set TCP state to SYN_SENT, initialize keep alive timer,
	     *  initialize send sequence # and related numbers.
	     */
	    LOG_STATE(TCPS_SYN_SENT);
	    tcb->t_state = TCPS_SYN_SENT;
	    tcb->iss =  ((dword)tcb ^ (word)TimerGetCount()) & 0x7fffffff;
	    tcp_sendseqinit(tcb);
	    tcb->t_timer[TCPT_KEEP] = TCPTV_KEEP_INIT;

	    /*
	     * Let TcpOutput take over from here.
	     */
	    TcpipUnlock(OptrToHandle(tp));
	    (void)TcpOutput(tp, connection);

	    LOG_STAT(tcpstat.tcps_connattempt++;)
	}

}	/* End of MSG_TCPIP_OPEN_CONNECTION.	*/


/*-------------------------------------------------------------------------
			     MSG_TCPIP_CLOSE_CONNECTION
---------------------------------------------------------------------------
SYNOPSIS:	Start the process to close a connection.

PASS:		connection = handle of connection to close

RETURN:		nothing

SIDE EFFECTS:	Initiates TCP protocol for closing a connection.

STRATEGY:
		if we never got a SYN, just wake up waiter so
			close can continue
		if we got a SYN from the peer but haven't sent FIN,
			go to FIN_WAIT_1
		if already got a FIN, go to LAST_ACK state

		In all other cases, we have already sent FIN to peer
		and just have to wait for peer to send FIN or not
		respond to keep-alives.
REVISION HISTORY:
 	Name	Date		Description
 	----	----		-----------
 	jwu	7/ 6/94   	Initial Revision

-------------------------------------------------------------------------*/
@method TcpipProcessClass, MSG_TCPIP_CLOSE_CONNECTION
{
	optr tp;
	struct tcpcb *tcb;

	if ((tp = TSocketToTCB(connection)) != 0) {
	    TcpipLock(OptrToHandle(tp));
	    tcb = (struct tcpcb *)LMemDeref(tp);

	    switch(tcb->t_state) {

	    	case TCPS_CLOSED:
	    	case TCPS_LISTEN:
	    	case TCPS_SYN_SENT:
		    LOG_STATE(TCPS_CLOSED);
		    tcb->t_state = TCPS_CLOSED;
		    /*
		     * Notify socket level that disconnection is complete so
		     * waiter can be awoken and socket destroyed.
		     */
		    TcpipUnlock(OptrToHandle(tp));
		    TSocketIsDisconnected(connection, 0, SCT_FULL, TRUE);
		    return;

		case TCPS_SYN_RECEIVED:
		case TCPS_ESTABLISHED:
		    LOG_STATE(TCPS_FIN_WAIT_1);
		    tcb->t_state = TCPS_FIN_WAIT_1;
		    break;

		case TCPS_CLOSE_WAIT:
		    LOG_STATE(TCPS_LAST_ACK);
		    tcb->t_state = TCPS_LAST_ACK;
		    break;
		}

	    /*
	     * Let TCP output take over from here.
	     */
	    TcpipUnlock(OptrToHandle(tp));
	    (void) TcpOutput(tp, connection);
	}

}	/* End of MSG_TCPIP_CLOSE_CONNECTION.	*/



/*-------------------------------------------------------------------------
			     MSG_TCPIP_RESET_CONNECTION
---------------------------------------------------------------------------
SYNOPSIS:	Start the process to reset a connection.

PASS:		connection = handle of connection to reset.
                error      = SocketDrError
		    	      (SDE_CONNECTION_RESET, possibly or-ed with
			       SpecSocketDrError from link driver)

RETURN:		nothing

SIDE EFFECTS:	Initiates TCP protocol for resetting a connection.

STRATEGY:
		if have received SYN, set state to CLOSED and
			call tcp output routine
		wake up waiter now that reset has been sent
		connection will be destroyed when waiter awakes

		calling	TcpDrop should take care of the above...

REVISION HISTORY:
 	Name	Date		Description
 	----	----		-----------
 	jwu	7/ 6/94   	Initial Revision

-------------------------------------------------------------------------*/
@method TcpipProcessClass, MSG_TCPIP_RESET_CONNECTION
{
	optr	tp;
	struct tcpcb *tcb;

	if ((tp = TSocketToTCB(connection)) != 0) {
	    TcpipLock(OptrToHandle(tp));
	    tcb = (struct tcpcb *)LMemDeref(tp);

	    /*
	     * If rejecting a requested connection, update TCB state.
	     */
	    if (tcb->t_state == TCPS_LISTEN) {
		LOG_STATE(TCPS_SYN_RECEIVED);
		tcb->t_state = TCPS_SYN_RECEIVED;
	    }

	    TcpipUnlock(OptrToHandle(tp));
	    TcpDrop(connection, tp, error);
	}

}	/* End of MSG_TCPIP_RESET_CONNECTION.	*/


/*-------------------------------------------------------------------------
			     MSG_TCPIP_ACCEPT_CONNECTION
---------------------------------------------------------------------------
SYNOPSIS:	Start the process to open a connection requested by the
		peer.

PASS:		connection	= connection to open

RETURN:		nothing

SIDE EFFECTS:	Initiates TCP protocol for responding to a connection
		request.

STRATEGY:
		Initialize tcp template header
		set tcp state to SYN_RECEIVED
		initialize keep alive timer
		initialize initial send sequence # and relatives
		call the TCP output function


REVISION HISTORY:
 	Name	Date		Description
 	----	----		-----------
 	jwu	7/ 6/94   	Initial Revision

-------------------------------------------------------------------------*/
@method TcpipProcessClass, MSG_TCPIP_ACCEPT_CONNECTION
{

	optr tp;
	struct tcpcb *tcb;

	if ((tp = TSocketToTCB(connection)) != 0) {
	    TcpipLock(OptrToHandle(tp));
	    tcb = (struct tcpcb *)LMemDeref(tp);

	    /*
	     * If tcp state is still closed, then that means connection
	     * was discarded.
	     */
	    if (tcb->t_state == TCPS_CLOSED) {
		TcpipUnlock(OptrToHandle(tp));
		TSocketIsDisconnected(connection, SDE_CONNECTION_TIMEOUT,
				     SCT_FULL, TRUE);
		return;
	    }
	    else {
		LOG_STATE(TCPS_SYN_RECEIVED);
		tcb->t_state = TCPS_SYN_RECEIVED;
	    }

	    /*
	     *  Initialize keep alive timer.
	     */
	    tcb->t_timer[TCPT_KEEP] = TCPTV_KEEP_INIT;

	    /*
	     * Let TcpOutput take over from here.
	     */
	    TcpipUnlock(OptrToHandle(tp));
	    (void)TcpOutput(tp, connection);

	    LOG_STAT(tcpstat.tcps_accepts++;)
	}

}	/* End of MSG_TCPIP_ACCEPT_CONNECTION.	*/


/*-------------------------------------------------------------------------
			     MSG_TCPIP_SEND_DATA
---------------------------------------------------------------------------
SYNOPSIS:	Process outgoing data for a connection.

PASS:		connection	= connection to with data to be sent
		mode		= SocketSendMode

RETURN:		word            = SocketDrError

STRATEGY:
		call the tcp output routine

REVISION HISTORY:
 	Name	Date		Description
 	----	----		-----------
 	jwu	7/ 6/94   	Initial Revision

-------------------------------------------------------------------------*/
@method TcpipProcessClass, MSG_TCPIP_SEND_DATA
{
        optr tp;

        tp = TSocketToTCB(connection);
        if (!tp) return SDE_CONNECTION_RESET;

	switch (mode) {

	   case SSM_NORMAL:
		(void)TcpOutput(tp, connection);
	   	break;

	   case SSM_URGENT:
	   {
		struct tcpcb *tcb;

		TcpipLock(OptrToHandle(tp));
		tcb = (struct tcpcb *)LMemDeref(tp);

		/*
		 * Set urgent pointer and force flag before sending data.
		 */
		tcb->snd_up = tcb->snd_una + TSocketGetOutputSize(connection);
		tcb->t_force = 1;
		TcpipUnlock(OptrToHandle(tp));
		(void)TcpOutput(tp, connection);

		/*
		 * Clear force flag.
		 */
		TcpipLock(OptrToHandle(tp));
		tcb = (struct tcpcb *)LMemDeref(tp);
		tcb->t_force = 0;
		TcpipUnlock(OptrToHandle(tp));
	   }
	}

	return SDE_NO_ERROR;

}	/* End of MSG_TCPIP_SEND_DATA.	*/


/*-------------------------------------------------------------------------
			     MSG_TCPIP_SEND_DATAGRAM
---------------------------------------------------------------------------
SYNOPSIS:	Send a datagram.

PASS:		link	= link domain handle
		buffer	= optr of data buffer

RETURN:		word 	= SocketDrError

STRATEGY:
		get the local address for the link
  		call the UDP output routine
REVISION HISTORY:
 	Name	Date		Description
 	----	----		-----------
 	jwu	10/11/94   	Initial Revision

-------------------------------------------------------------------------*/
@method TcpipProcessClass, MSG_TCPIP_SEND_DATAGRAM
{
	return (UdpOutput(buffer, LinkGetLocalAddr(link), link));

}	/* End of MSG_TCPIP_SEND_DATAGRAM.	*/




/*-------------------------------------------------------------------------
			     MSG_TCPIP_RECEIVE_DATA
---------------------------------------------------------------------------
SYNOPSIS:	Process incoming data from the network.

PASS:		nothing

RETURN:		nothing

SIDE EFFECTS:	data buffer will be freed after data has been passed
		to the socket library

STRATEGY:   	Increment input counter to allow another packet to
                  be processed
		call IpInput and let that handle it

REVISION HISTORY:
 	Name	Date		Description
 	----	----		-----------
 	jwu	7/ 6/94   	Initial Revision

-------------------------------------------------------------------------*/
@method TcpipProcessClass, MSG_TCPIP_RECEIVE_DATA
{
    	optr buffer;

    	buffer = TcpipDequeuePacket();

	if (buffer)
	    IpInput(buffer);

}	/* End of MSG_TCPIP_RECEIVE_DATA.	*/

#ifdef __HIGHC__
#pragma Code("TSOCKETCODE");
#endif
#ifdef __BORLANDC__
#pragma codeseg TSOCKETCODE
#endif
#ifdef __WATCOMC__
#pragma code_seg("TSOCKETCODE")
#endif


/*-------------------------------------------------------------------------
			     MSG_TCPIP_TIMEOUT_OCCURRED
---------------------------------------------------------------------------
SYNOPSIS:	Process a timeout of the TCP/IP timer by decrementing
		counters.

PASS:		nothing

RETURN:		nothing

SIDE EFFECTS:	May cause other actions to occur if a counter reaches
		zero, indicating a timeout.  Connections may be destroyed,
		data may be sent...

STRATEGY:
		Call SocketTimeoutHanlder which enumerates the chunk
		array of sockets:
			if it is rejected, decrement the destoy counter
			and destroy the connection if it reaches zero
			else if it is OPEN, DISCONNECTING or CONNECTING,
			call Tcp timeout handler
		Call Ip timeout handler so it can do timeout processing
			on the reassembly queue

REVISION HISTORY:
 	Name	Date		Description
 	----	----		-----------
 	jwu	7/ 7/94   	Initial Revision

-------------------------------------------------------------------------*/
@method TcpipProcessClass, MSG_TCPIP_TIMEOUT_OCCURRED
{
	TSocketTimeoutHandler();
	IpTimeoutHandler();
}	/* End of MSG_TCPIP_TIMEOUT_OCCURRED.	*/


#ifdef __HIGHC__
#pragma Code("TCPCODE");
#endif
#ifdef __BORLANDC__
#pragma codeseg TCPCODE
#endif
#ifdef __WATCOMC__
#pragma code_seg("TCPCODE")
#endif


/*-------------------------------------------------------------------------
			     MSG_TCPIP_DELETE_LINK
---------------------------------------------------------------------------
SYNOPSIS:   Delete a closed link.

PASS:	    link    = domain handle of link to delete

RETURN:	    nothing

SIDE EFFECTS:
 	    TCP's thread will be sent a MSG_META_DETACH if this is the
	    last remaining link.

REVISION HISTORY:
 	Name	Date		Description
 	----	----		-----------
 	jwu	1/24/95   	Initial Revision

-------------------------------------------------------------------------*/
@method TcpipProcessClass, MSG_TCPIP_DELETE_LINK
{
    	LinkTableDeleteEntry(link);

}	/* End of MSG_TCPIP_DELETE_LINK.	*/




/*-------------------------------------------------------------------------
			     MSG_TCPIP_DESTROY_CONNECTIONS
---------------------------------------------------------------------------

SYNOPSIS:   Destroy all Tcp connections.

PASS:	    nothing

RETURN:	    nothing

REVISION HISTORY:
 	Name	Date		Description
 	----	----		-----------
 	jwu	10/23/95   	Initial Revision

-------------------------------------------------------------------------*/
@method TcpipProcessClass, MSG_TCPIP_DESTROY_CONNECTIONS
{
    TSocketDestroyAllConnections();

}	/* End of MSG_TCPIP_DESTROY_CONNECTIONS.	*/




/*-------------------------------------------------------------------------
			     MSG_TCPIP_SEND_RAW_IP
---------------------------------------------------------------------------
SYNOPSIS:	Send a raw Ip packet.

PASS:		link	= link domain handle
		buffer	= optr of data buffer

RETURN:		word = SocketDrError

STRATEGY:

REVISION HISTORY:
 	Name	Date		Description
 	----	----		-----------
 	jwu	10/14/94   	Initial Revision

-------------------------------------------------------------------------*/
@method TcpipProcessClass, MSG_TCPIP_SEND_RAW_IP
{
	return (RawIpOutput(buffer, link));

}	/* End of MSG_TCPIP_SEND_RAW_IP.	*/




/*-------------------------------------------------------------------------
			     MSG_META_DETACH
---------------------------------------------------------------------------
SYNOPSIS:   Intercepted to prevent TCP from exiting before clients do.

PASS:	    callerID
            caller

RETURN:	    nothing

STRATEGY:   If it is safe to exit TCP, call superclass.
            Else, do nothing.

REVISION HISTORY:
 	Name	Date		Description
 	----	----		-----------
 	jwu	1/23/95   	Initial Revision

-------------------------------------------------------------------------*/
@method TcpipProcessClass, MSG_META_DETACH
{
    	if (TcpipDetachAllowed())
	    @callsuper();

}	/* End of MSG_META_DETACH.	*/



/*-------------------------------------------------------------------------
			     MSG_META_NOTIFY_WITH_DATA_BLOCK
---------------------------------------------------------------------------
SYNOPSIS:  Process GCN list notification for access point change in
           netmask configuration.

PASS:	   manufID
           notificationType
           Memhandle data

RETURN:	   nothing

STRATEGY:   If type is GWNT_ACCESS_POINT_CHANGE from a geoworks manufacturer {
	        lock data block
		if property change is automatic netmask for internet
	    	    access point {
		   get the new netmask and store it
		 }
		 unlock block
	     }
             call superclass


If netmask is changing, remember new netmask configuration.

REVISION HISTORY:
 	Name	Date		Description
 	----	----		-----------
 	jwu	9/14/95   	Initial Revision

-------------------------------------------------------------------------*/
@method TcpipProcessClass, MSG_META_NOTIFY_WITH_DATA_BLOCK
{

    AccessPointChangeDescription *prop;
    MemHandle maskBlock;
    int maskLen;
    dword mask;

    if (notificationType == GWNT_ACCESS_POINT_CHANGE &&
	manufID == MANUFACTURER_ID_GEOWORKS) {

	MemLock(data);
	prop = (AccessPointChangeDescription *)MemDeref(data);

	if (prop -> APCD_changeType == APCT_PROPERTY &&
	    prop -> APCD_stdProperty == (APSP_AUTOMATIC | APSP_MASK) &&
	    prop -> APCD_accessType == APT_INTERNET) {

	     /*
	      * Get the new netmask or reset the host netmask if none.
	      */
	    if (! AccessPointGetStringPropertyBlock(prop -> APCD_id,
				   (char *)((dword)APSP_AUTOMATIC | APSP_MASK),
				   &maskBlock,
				   &maskLen)) {
		/*
		 * Convert netmask into 4 byte binary format and
		 * store the complement as the host mask for detecting
		 * broadcasts.
		 */
		MemLock(maskBlock);
		mask = IPParseDecimalAddr((char *)MemDeref(maskBlock),
					  maskLen);
		ip_net_host = NetworkToHostDWord(~mask);
		MemFree(maskBlock);
	    }
	    else
		ip_net_host = 0;
	}

	MemUnlock(data);
    }

    @callsuper();

}	/* End of MSG_META_NOTIFY_WITH_DATA_BLOCK.	*/




/*--------------------------------------------------------------------------
 *	    Code for configuring TCPIP options
 -------------------------------------------------------------------------*/

@ifdef PROTO_CONFIG_ALLOWED

/*
 * INI key strings.
 */
@start StringsGOC, data;
@chunk char tcpipString[] = {'t','c','p','i','p',0};
    @localize not;
@chunk char maxTTLString[] = {'m','a','x','T','T','L',0};
    @localize not;
@chunk char mssString[] = {'d','e','f','a','u','l','t','M','S','S',0};
    @localize not;
@chunk char maxWinString[] = {'m','a','x','W','i','n',0};
    @localize not;
@chunk char maxRexmtString[] = {'m','a','x','R','e','x','m','t',0};
    @localize not;
@chunk char minRexmtString[] = {'m','i','n','R','e','x','m','t',0};
    @localize not;
@chunk char maxIdleString[] = {'m','a','x','I','d','l','e',0};
    @localize not;
@chunk char maxProbesString[] = {'m','a','x','P','r','o','b','e','s',0};
    @localize not;
@chunk char compatString[] = {'c','o','m','p','a','t','B','S','D','4','2',0};
    @localize not;
@chunk char rttString[] = {'r','t','t',0};
    @localize not;
@chunk char rttShiftString[] = {'r','t','t','S','h','i','f','t',0};
    @localize not;
@chunk char rttvarShiftString[] = {'r','t','t','v','a','r','S','h','i','f','t',0};
    @localize not;
@end StringsGOC;



/***********************************************************************
 *				TcpipConfigureProtocols
 ***********************************************************************
 * SYNOPSIS:	Read protocol settings from INI to configure the protocols.
 * CALLED BY:	TcpipInit
 * RETURN:	nothing
 *
 * STRATEGY:
 *	    	Read a setting for an option.  If it is valid, allow
 *	    	the configuration.  (very simple)
 *	    	These options are:
 *	    	    	maximum time to live
 *	    	    	default maximum segment size
 *	    	    	maximum retransmissions before TCP gives up
 *	    	    	maximum idle time before keep-alive probes start
 *	    	    	maximum # of probes before TCP gives up
 *	    	    	probe length (BSD 4.2 hosts only respond to probes
 *	    	    	    with non-zero length)
 *	    	    	shift for round trip to set alpha in equation
 *	    	    	shift for round trip variance to set alpha
 *
 * HISTORICAL NOTE:
 *	    This routine created so Responder folks can tweak the
 *	    protocol.  Not for use by the typical user.
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	jwu	11/18/94		Initial Revision
 *
 ***********************************************************************/
void CALLCONV
TcpipConfigureProtocols ()
{
    char *tcpCategory;
    word value;
    Boolean bool;

    MemLock(OptrToHandle(@tcpipString));
    tcpCategory = (char *)LMemDeref(@tcpipString);

    /*
     * TTL values can range from 1 - 255.
     */
    if (!InitFileReadInteger(tcpCategory, LMemDeref(@maxTTLString), &value)) {
    	if (value && value <= 255)
	    ip_defttl = value;
    }

    /*
     * Minimum MSS is 512.
     */
    if (!InitFileReadInteger(tcpCategory, LMemDeref(@mssString), &value)) {
	if (value >= 512)
	    tcp_mssdflt = value;
    }

    /*
     * Maximum TCP window size can range from 4096 - 65535.
     */
    if (!InitFileReadInteger(tcpCategory, LMemDeref(@maxWinString), &value)) {
	if (value >= 4096 && value <= 65535)
	    tcp_maxwin = (dword)value;
    }

    /*
     * Minimum retransmit interval can range from 1 - TCPTV_REXMTMAX / 2.
     * tcp_minRxmt = value * TCPIP_TIMEOUT_PER_SEC  (in 500ms intervals)
     */

    if (!InitFileReadInteger(tcpCategory, LMemDeref(@minRexmtString), &value))
        if (value >= 1 && value <= TCPTV_REXMTMAX / 2)
            tcp_minRxmt = value * TCPIP_TIMEOUT_PER_SEC;

    /*
     * Maximum # of retransmits is 12.
     */
    if (!InitFileReadInteger(tcpCategory, LMemDeref(@maxRexmtString),
			     &value)) {
	if (value <= 12)
	    tcp_maxrxt = value;
    }

    /*
     * Maximum idle time is 540 mins (== 9 hrs).
     * tcp_keepidle = value * 60 * TCPIP_TIMEOUT_PER_SEC  (in 500ms intervals)
     */
    if (!InitFileReadInteger(tcpCategory, LMemDeref(@maxIdleString), &value)) {
	if (value <= 540)
	    tcp_keepidle = value * 60 * TCPIP_TIMEOUT_PER_SEC;
    }

    /*
     * Maximum # of probes is 10.
     * tcp_maxidle is the maximum idle time (# of probes * interval between
     * probes)
     */
    if (!InitFileReadInteger(tcpCategory, LMemDeref(@maxProbesString),
			     &value)) {
	if (value <= 10)
	    tcp_maxidle = value * tcp_keepintvl;
    }

    /*
     * Length of a keep alive probe has to be nonzero to get a 4.2 host
     * to respond.  Default is compatible.
     */
    if (!InitFileReadBoolean(tcpCategory, LMemDeref(@compatString), &bool)) {
	if (!bool)
	    tcp_keeplen = 0;
    }

    /*
     * Default round trip time estimate.  Convert value to timer intervals.
     * This sets the default TCP retransmit interval.  After a measured
     * round trip time is available, the retransmit interval will be
     * determined by the actual measurement, allowing the behaviour to
     * adjust to the actual conditions of the connection.
     */
    if (!InitFileReadInteger(tcpCategory, LMemDeref(@rttString), &value)) {
	if (value > 0)
	    tcp_rttdflt = value * TCPIP_TIMEOUT_PER_SEC;
    }

    /*
     * Round trip shifts can be 0 - 10.  Anything larger will not change
     * alpha significantly.  Same goes for the shift for variance.
     */
    if (!InitFileReadInteger(tcpCategory, LMemDeref(@rttShiftString),
			     &value)) {
	if (value <= 10)
	    rttShift = value;
    }

    if (!InitFileReadInteger(tcpCategory, LMemDeref(@rttvarShiftString),
			     &value)) {
	if (value <= 10)
	    rttvarShift = value;
    }

    MemUnlock(OptrToHandle(@tcpipString));

}

@endif


/***********************************************************************
 *		TcpipDhcpConvertTime
 ***********************************************************************
 *
 * SYNOPSIS:	Takes a TimerDateAndTime struct, and fills in another
 * 		TimerDateAndTime struct with a time a specified number
 *		of seconds later.
 *
 * CALLED BY:	TcpipDhcpParseAndSendNotification
 * RETURN:
 * SIDE EFFECTS:
 *
 * STRATEGY:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *      ed	7/07/00   	Initial Revision
 *
 ***********************************************************************/
void CALLCONV
TcpipDhcpConvertTime (TimerDateAndTime *start, TimerDateAndTime *end,
		      dword secs)
{
    word days;
    memcpy(end, start, sizeof(TimerDateAndTime));

    while (secs > ((dword)365*24*60*60)) {
	secs -= ((dword)365*24*60*60);
	days = LocalCalcDaysInMonth((end->TDAT_month > 2) ?
				    (++end->TDAT_year) :
				    (end->TDAT_year++), 2);
	if (days == 28) continue;

	if (end->TDAT_month == 2 && end->TDAT_day == 29) {
	    end->TDAT_day = 1;
	    end->TDAT_month = 3;
	}
	else {
	    if (secs > ((dword)24*60*60)) {
		secs -= ((dword)24*60*60);
	    }
	    else {
		if (--end->TDAT_day == 0) {
		    if (--end->TDAT_month == 0) {
			end->TDAT_year--;
			end->TDAT_month = 12;
			end->TDAT_day = 31;
		    }
		    else {
			end->TDAT_day = LocalCalcDaysInMonth(end->TDAT_year,
							     end->TDAT_month);
		    }
		}
	    }
	}
    } /* while > 1 year remaining */


    /* Move the date up to the 1st of the next month, if we can */

    if (end->TDAT_day != 1) {
	days = LocalCalcDaysInMonth(end->TDAT_year, end->TDAT_month) -
	    end->TDAT_day + 1;
	if (secs > (days * (dword)24*60*60)) {
	    secs -= (days * (dword)24*60*60);
	    end->TDAT_day = 1;
	    if (end->TDAT_month != 12) {
		end->TDAT_month++;
	    }
	    else {
		end->TDAT_month = 1;
		end->TDAT_year++;
	    }
	}
	else {
	    days = secs / ((dword)24*60*60);
	    end->TDAT_day += days;
	    secs -= (days * (dword)24*60*60);
	    goto checkHours;
	}
    }

    /* Check the months */
    while (secs > ((days = LocalCalcDaysInMonth(end->TDAT_year,
						end->TDAT_month))*24*60*60)) {
	secs -= (days * (dword)24*60*60);
	if (end->TDAT_month != 12) {
	    end->TDAT_month++;
	}
	else {
	    end->TDAT_month = 1;
	}
    }

    /* Check the days */
    days = secs / ((dword)24*60*60);
    end->TDAT_day += days;
    secs -= (days * (dword)24*60*60);

    /* Note: From here on, I'm still using the variable days, even tho it's
       not really storing days anymore as it's pointless to make more
       variables. */
checkHours:
    /* Check the hours */
    if (secs > ((dword)60*60)) {
	days = secs / ((dword)60*60);
	end->TDAT_hours += days;
	secs -= (days * (dword)60*60);
    }

    /* Check the minutes */
    if (secs > 60) {
	days = secs / ((dword)60);
	end->TDAT_minutes += days;
	secs -= (days * (dword)60);
    }

    /* Account for any remaining seconds */
    end->TDAT_seconds += secs;

    /* Now check for overflows */
    if (end->TDAT_seconds > 59) {
	end->TDAT_minutes++;
	end->TDAT_seconds -= 60;
    }

    if (end->TDAT_minutes > 59) {
	end->TDAT_minutes -= 60;
	end->TDAT_hours++;
    }

    if (end->TDAT_hours > 23) {
	end->TDAT_hours -= 24;
	if (end->TDAT_day == LocalCalcDaysInMonth(end->TDAT_year,
						  end->TDAT_month)) {
	    if (end->TDAT_month < 12) {
		end->TDAT_month++;
	    }
	    else {
		end->TDAT_month = 1;
		end->TDAT_year++;
	    }
	    end->TDAT_day = 1;
	}
	else {
	    end->TDAT_day++;
	}
    }

    end->TDAT_dayOfWeek = LocalCalcDayOfWeek(end->TDAT_year, end->TDAT_month,
					     end->TDAT_day);
}	/* End of TcpipDhcpConvertTime.	*/

@method TcpipProcessClass, MSG_TCPIP_DHCP_RENEW_TIMER,
    MSG_TCPIP_DHCP_RENEW_NOW
{
    if (message == MSG_TCPIP_DHCP_RENEW_TIMER) {
	TcpipDhcpTimerHandler();
    }
    else {
	TcpipDhcpStartRenew();
    }
}
