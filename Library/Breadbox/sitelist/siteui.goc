/*
 *                          ==CONFIDENTIAL INFORMATION==
 *
 * COPYRIGHT 1994-99 BREADBOX COMPUTER COMPANY -- ALL RIGHTS RESERVED  --
 * THE FOLLOWING CONFIDENTIAL INFORMATION IS BEING DISCLOSED TO YOU UNDER
 * A NON-DISCLOSURE AGREEMENT AND MAY NOT BE DISCLOSED OR FORWARDED BY THE
 * RECIPIENT TO ANY OTHER PERSON OR ENTITY NOT COVERED BY THE SAME
 * NON-DISCLOSURE AGREEMENT COVERING THE RECIPIENT. USE OF THE FOLLOWING
 * CONFIDENTIAL INFORMATION IS RESTRICTED TO THE TERMS OF THE NON-DISCLOSURE
 * AGREEMENT.
 *
 */

/***************************************************************************
 *  FILE:  siteUI.GOC
 ***************************************************************************/

/*-------------------------------------------------------------------------
 | Module:  Site List UI
 *-------------------------------------------------------------------------
 |
 | Objective:
 |    Provide a common user interface for handling the selection and
 |    modification of internet sites.
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  11/10/99  Created
 |
 *-----------------------------------------------------------------------*/

/***************************************************************************
 *      Include files
 ***************************************************************************/

@include <stdapp.goh>
@include <Objects/treport.goh>
@include <Ansi/string.h>
@include <sitelist.goh>
@include "internal.goh"

@define CHILD(child)  ConstructOptr(pself->SSI_uiBlock, OptrToChunk(child))

/*=========================================================================*
 *  STANDARD UI FOR SITE LIST
 *=========================================================================*/

@start SiteListMainUI, notDetachable ;
    /*---------------------------------------------------------------------*/
    /* Main working area: */
    /*---------------------------------------------------------------------*/
    @object GenInteractionClass SiteListMain = {
        GI_states = @default & (~GS_USABLE) ;
        GI_comp = 
            @SiteListTop,
            @SiteListBottom,
            @SiteListMainAddOn,
            @SiteEditDialog ;
        HINT_EXPAND_WIDTH_TO_FIT_PARENT ;
        HINT_EXPAND_HEIGHT_TO_FIT_PARENT ;
    }
    /*---------------------------------------------------------------------*/
    @object GenInteractionClass SiteListTop = {
        GI_comp =
            @SiteListList,
            @SiteListTriggers ;
        HINT_EXPAND_WIDTH_TO_FIT_PARENT ;
        HINT_EXPAND_HEIGHT_TO_FIT_PARENT ;
        HINT_CENTER_CHILDREN_VERTICALLY ;
        HINT_ORIENT_CHILDREN_HORIZONTALLY ;
    }
    /*---------------------------------------------------------------------*/
    @object GenDynamicListClass SiteListList = {
        GI_visMoniker = 'S', "Sites:" ;
        GDLI_queryMsg = MSG_SITE_SEL_UI_QUERY_LIST_ITEM ;
        HINT_EXPAND_WIDTH_TO_FIT_PARENT ;
        HINT_PLACE_MONIKER_ABOVE ;
        HINT_ITEM_GROUP_SCROLLABLE ;
        ATTR_GEN_ITEM_GROUP_STATUS_MSG = MSG_SITE_SELECTION_SET_CURRENT_SITE_INDEX ;
        GIGI_applyMsg = MSG_SITE_SELECTION_SET_CURRENT_SITE_INDEX ;
        HINT_EXPAND_HEIGHT_TO_FIT_PARENT ;
    }
    /*---------------------------------------------------------------------*/
    @object GenInteractionClass SiteListTriggers = {
        GI_comp = 
            @SiteListAddTrigger,
            @SiteListModifyTrigger,
            @SiteListDeleteTrigger ;
    }
    /*---------------------------------------------------------------------*/
    @object GenTriggerClass SiteListAddTrigger = {
        GI_visMoniker = 'A', "Add" ;
        GTI_actionMsg = MSG_SITE_SELECTION_START_ADD_SITE ;
        HINT_EXPAND_WIDTH_TO_FIT_PARENT ;
    }
    /*---------------------------------------------------------------------*/
    @object GenTriggerClass SiteListModifyTrigger = {
        GI_visMoniker = 'M', "Modify" ;
        GTI_actionMsg = MSG_SITE_SELECTION_START_MODIFY_SITE ;
        HINT_EXPAND_WIDTH_TO_FIT_PARENT ;
    }
    /*---------------------------------------------------------------------*/
    @object GenTriggerClass SiteListDeleteTrigger = {
        GI_visMoniker = 'D', "Delete" ;
        GTI_actionMsg = MSG_SITE_SELECTION_DELETE_SITE ;
        HINT_EXPAND_WIDTH_TO_FIT_PARENT ;
    }
    /*---------------------------------------------------------------------*/
    @object GenInteractionClass SiteListBottom = {
        GI_visMoniker = "Password access:" ;
        GI_comp = 
            @SiteListPasswordOnOff,
            @SiteListPasswordNameAndPassword ;
        HINT_DRAW_IN_BOX ;
        HINT_EXPAND_WIDTH_TO_FIT_PARENT ;
    }
    /*---------------------------------------------------------------------*/
    @object GenBooleanGroupClass SiteListPasswordOnOff = {
        GI_comp =
            @SiteListPasswordToggle ;
        GBGI_applyMsg = MSG_SITE_SEL_UI_UPDATE_UI ;
        HINT_EXPAND_WIDTH_TO_FIT_PARENT ;
    }
    /*---------------------------------------------------------------------*/
    @object GenBooleanClass SiteListPasswordToggle = {
        GI_visMoniker = 'r', "Password required" ;
        GBI_identifier = SITE_LIST_PASSWORD_ON_BIT ;
        HINT_EXPAND_WIDTH_TO_FIT_PARENT ;
    }
    /*---------------------------------------------------------------------*/
    @object GenInteractionClass SiteListPasswordNameAndPassword = {
        GI_comp = 
            @SiteListPasswordName,
            @SiteListPasswordPassword ;
        HINT_EXPAND_WIDTH_TO_FIT_PARENT ;
        HINT_CENTER_CHILDREN_ON_MONIKERS ;
    }
    /*---------------------------------------------------------------------*/
    @object GenTextClass SiteListPasswordName = {
        GI_visMoniker = 'N', "Name" ;
        GTXI_text = "anonymous" ;
        GTXI_maxLength = SITE_ENTRY_NAME_LIMIT ;
        GTXI_attrs = @default | GTA_SINGLE_LINE_TEXT ;
        HINT_EXPAND_WIDTH_TO_FIT_PARENT ;
    }
    /*---------------------------------------------------------------------*/
    @object GenTextClass SiteListPasswordPassword = {
        GI_visMoniker = 'P', "Password" ;
        GTXI_text = "" ;
        GTXI_maxLength = SITE_ENTRY_PASSWORD_LIMIT ;
        GTXI_attrs = @default | GTA_SINGLE_LINE_TEXT ;
        HINT_EXPAND_WIDTH_TO_FIT_PARENT ;
        ATTR_GEN_TEXT_CHAR_ATTR = ChunkOf(@UserPasswordFont) ;
        HINT_FIXED_SIZE = { 0,
                            SST_LINES_OF_TEXT | 1,
                            0 } ;
    }
    /*---------------------------------------------------------------------*/
    @chunk VisTextCharAttr UserPasswordFont =
                               CHAR_ATTR_FONT_SIZE(FID_BISON, 13) ;
    /*---------------------------------------------------------------------*/
    @object GenInteractionClass SiteListMainAddOn = {
        GI_states = @default & (~GS_ENABLED) & (~GS_USABLE) ;
        HINT_EXPAND_WIDTH_TO_FIT_PARENT ;
    }
    /*---------------------------------------------------------------------*/

    /*---------------------------------------------------------------------*/
    /* Site Edit Dialog: */
    /*---------------------------------------------------------------------*/
    @object GenInteractionClass SiteEditDialog = {
        GI_visMoniker = "Site Properties:" ;
        GI_comp = 
            @SiteEditTitle,
            @SiteEditSite,
            @SiteEditPortAndDescription,
            @SiteEditPasswordAccess,
            @SiteEditAddon,
            @SiteEditAddTrigger,
            @SiteEditModifyTrigger ;
        GII_visibility = GIV_DIALOG ;
        GII_type = GIT_COMMAND ;
        GII_attrs = @default | GIA_MODAL | GIA_NOT_USER_INITIATABLE ;
        HINT_CENTER_CHILDREN_ON_MONIKERS ;
    }
    /*---------------------------------------------------------------------*/
    @object GenTextClass SiteEditTitle = {
        GI_visMoniker = 'T', "Title:" ;
        GTXI_text = "" ;
        GTXI_maxLength = SITE_ENTRY_TITLE_LIMIT ;
        GTXI_attrs = @default | GTA_SINGLE_LINE_TEXT ;
        HINT_EXPAND_WIDTH_TO_FIT_PARENT ;
    }
    /*---------------------------------------------------------------------*/
    @object GenTextClass SiteEditSite = {
        GI_visMoniker = 'S', "Site:" ;
        GTXI_text = "" ;
        GTXI_maxLength = SITE_ENTRY_SITE_LIMIT ;
        GTXI_attrs = @default | GTA_SINGLE_LINE_TEXT ;
        HINT_EXPAND_WIDTH_TO_FIT_PARENT ;
    }
    /*---------------------------------------------------------------------*/
    @object GenInteractionClass SiteEditPortAndDescription = {
        GI_comp = 
            @SiteEditPort,
            @SiteEditPortDescription ;
        HINT_EXPAND_WIDTH_TO_FIT_PARENT ;
        HINT_ORIENT_CHILDREN_HORIZONTALLY ;
    }
    /*---------------------------------------------------------------------*/
    @object GenValueClass SiteEditPort = {
        GI_visMoniker = 'P', "Port:" ;
    }
    /*---------------------------------------------------------------------*/
    @object GenGlyphClass SiteEditPortDescription = {
        GI_visMoniker = "(0 for default)" ;
        HINT_EXPAND_WIDTH_TO_FIT_PARENT ;
    }
    /*---------------------------------------------------------------------*/
    @object GenInteractionClass SiteEditPasswordAccess = {
        GI_visMoniker = "Password access:" ;
        GI_comp = 
            @SiteEditPasswordOnOff,
            @SiteEditPasswordNameAndPassword ;
        HINT_DRAW_IN_BOX ;
        HINT_EXPAND_WIDTH_TO_FIT_PARENT ;
    }
    /*---------------------------------------------------------------------*/
    @object GenBooleanGroupClass SiteEditPasswordOnOff = {
        GI_comp =
            @SiteEditPasswordToggle ;
        GBGI_applyMsg = MSG_SITE_SEL_UI_UPDATE_UI ;
        HINT_EXPAND_WIDTH_TO_FIT_PARENT ;
    }
    /*---------------------------------------------------------------------*/
    @object GenBooleanClass SiteEditPasswordToggle = {
        GI_visMoniker = 'r', "Password required" ;
        GBI_identifier = SITE_LIST_PASSWORD_ON_BIT ;
        HINT_EXPAND_WIDTH_TO_FIT_PARENT ;
    }
    /*---------------------------------------------------------------------*/
    @object GenInteractionClass SiteEditPasswordNameAndPassword = {
        GI_comp = 
            @SiteEditPasswordName,
            @SiteEditPasswordPassword ;
        HINT_EXPAND_WIDTH_TO_FIT_PARENT ;
        HINT_CENTER_CHILDREN_ON_MONIKERS ;
    }
    /*---------------------------------------------------------------------*/
    @object GenTextClass SiteEditPasswordName = {
        GI_visMoniker = 'N', "Name" ;
        GTXI_text = "anonymous" ;
        GTXI_maxLength = SITE_ENTRY_NAME_LIMIT ;
        GTXI_attrs = @default | GTA_SINGLE_LINE_TEXT ;
        HINT_EXPAND_WIDTH_TO_FIT_PARENT ;
    }
    /*---------------------------------------------------------------------*/
    @object GenTextClass SiteEditPasswordPassword = {
        GI_visMoniker = 'P', "Password" ;
        GTXI_text = "" ;
        GTXI_maxLength = SITE_ENTRY_PASSWORD_LIMIT ;
        GTXI_attrs = @default | GTA_SINGLE_LINE_TEXT ;
        HINT_EXPAND_WIDTH_TO_FIT_PARENT ;
        ATTR_GEN_TEXT_CHAR_ATTR = ChunkOf(@UserPasswordFont) ;
        HINT_FIXED_SIZE = { 0,
                            SST_LINES_OF_TEXT | 1,
                            0 } ;
    }
    /*---------------------------------------------------------------------*/
    @object GenInteractionClass SiteEditAddon = {
        GI_states = @default & (~GS_ENABLED) & (~GS_USABLE) ;
        HINT_EXPAND_WIDTH_TO_FIT_PARENT ;
    }
    /*---------------------------------------------------------------------*/
    @object GenTriggerClass SiteEditAddTrigger = {
        GI_visMoniker = 'A', "Add" ;
        GTI_actionMsg = MSG_SITE_SELECTION_FINISH_ADD_SITE ;
        HINT_SEEK_REPLY_BAR ;
    }
    /*---------------------------------------------------------------------*/
    @object GenTriggerClass SiteEditModifyTrigger = {
        GI_states = @default & (~GS_ENABLED) & (~GS_USABLE) ;
        GI_visMoniker = 'M', "Modify" ;
        GTI_actionMsg = MSG_SITE_SELECTION_FINISH_MODIFY_SITE ;
        HINT_SEEK_REPLY_BAR ;
    }
    /*---------------------------------------------------------------------*/
@end SiteListMainUI ;

@start SiteListStrings, data ;
    /*---------------------------------------------------------------------*/
    /* A few strings: */
    /*---------------------------------------------------------------------*/
    @chunk char SiteEditSureDeleteQuestion[] = 
        "Are you sure you want to delete this site?" ;
    /*---------------------------------------------------------------------*/
@end SiteListStrings ;

/*=========================================================================*
 *  METHODS FOR CLASS:  SiteSelectionClass
 *=========================================================================*/

@classdecl SiteSelectionClass ;

/*-------------------------------------------------------------------------
 | Method:  SiteSelectionClass::MSG_SITE_SEL_UI_QUERY_LIST_ITEM
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Handles a request for a title to be shown on the scroll list.
 |
 | Inputs:
 |    optr list                   -- List making request
 |    word item                   -- Index of item being requested.
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  11/12/99  Created
 |
 *-----------------------------------------------------------------------*/
@method SiteSelectionClass, MSG_SITE_SEL_UI_QUERY_LIST_ITEM
{
    T_siteEntryID id ;
    T_siteEntry site ;
    char title[SITE_ENTRY_TITLE_LIMIT+1] ;

    if (pself->SSI_list)  {
        id = SiteListFindNth(pself->SSI_list, item) ;
        if (id != SITE_ENTRY_ID_BAD)  {
            site = SiteEntryLock(pself->SSI_list, id) ;
            if (site != SITE_ENTRY_BAD)  {
                SiteFieldGet(site, SITE_FIELD_NAME, title, sizeof(title)) ;
                @call list::MSG_GEN_DYNAMIC_LIST_REPLACE_ITEM_TEXT(item, title) ;
                SiteEntryUnlock(site) ;
            }
        }
    }
}

/*-------------------------------------------------------------------------
 | Method:  SiteSelectionClass::MSG_META_RESOLVE_VARIANT_SUPERCLASS
 *-------------------------------------------------------------------------
 |
 | Description:
 |     Need to create a UI tree out of this thing.  Instantiate the whole
 |     UI object group from a resource template.  Also create any other
 |     tree parts if the user has provided them.
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  11/12/99  Created
 |
 *-----------------------------------------------------------------------*/
@method SiteSelectionClass, MSG_META_RESOLVE_VARIANT_SUPERCLASS
{
    MemHandle mem ;
    optr child, mainChild ;

    if (!pself->SSI_uiBlock)  {
        /* Create the main dialog we'll use */
        mem = ObjDuplicateResource(
                    OptrToHandle(@SiteListMain), 
                    0, 
                    0) ;
        pself->SSI_uiBlock = mem ;
        mainChild = child = ConstructOptr(mem, OptrToChunk(@SiteListMain)) ;
        @call oself::MSG_GEN_ADD_CHILD(child, CCO_LAST) ;
        ObjMarkDirty(oself) ;
        pself = ObjDerefGen(oself) ;
        ObjLockObjBlock(mem) ;
        ObjSaveBlock(mem) ;
        MemUnlock(mem) ;

        /* Add any user defined main dialog options. */
        if (pself->SSI_mainAddonTemplateUI)  {
            mem = ObjDuplicateResource(
                        OptrToHandle(pself->SSI_mainAddonTemplateUI), 
                        0, 
                        0) ;
            pself = ObjDerefGen(oself) ;
            pself->SSI_mainAddonUIBlock = mem ;
            child = ConstructOptr(
                        mem, 
                        OptrToChunk(pself->SSI_mainAddonTemplateUI)) ;
            @call @CHILD(@SiteListMainAddOn)::MSG_GEN_ADD_CHILD(
                        child, 
                        CCO_LAST) ;
            @call child::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_UI_QUEUE) ;
            @call child::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_UI_QUEUE) ;
            ObjLockObjBlock(mem) ;
            ObjSaveBlock(mem) ;
            MemUnlock(mem) ;
        }

        /* Add any user defined edit features */
        if (pself->SSI_modifyAddonTemplateUI)  {
            mem = ObjDuplicateResource(
                        OptrToHandle(pself->SSI_modifyAddonTemplateUI), 
                        0, 
                        0) ;
            pself = ObjDerefGen(oself) ;
            pself->SSI_modifyAddonUIBlock = mem ;
            child = ConstructOptr(
                        mem, 
                        OptrToChunk(pself->SSI_modifyAddonTemplateUI)) ;
            @call @CHILD(@SiteEditAddon)::MSG_GEN_ADD_CHILD(
                        child, 
                        CCO_LAST) ;
            @call child::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_UI_QUEUE) ;
            @call child::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_UI_QUEUE) ;
            ObjLockObjBlock(mem) ;
            ObjSaveBlock(mem) ;
            MemUnlock(mem) ;
        }

        /* Update the UI (enabling/disabling what is needed) */
        @send ,forceQueue oself::MSG_SITE_SEL_UI_UPDATE_UI() ;
    }
    
    /* Setup and turn the UI on (but after we've resolved everything) */
    @send ,forceQueue oself::MSG_SITE_SELECTION_SETUP() ;
    @send ,forceQueue @CHILD(@SiteListMain)::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_UI_QUEUE) ;

    return @callsuper() ;
}

@method SiteSelectionClass, MSG_META_DETACH
{
    @callsuper() ;
    if (pself->SSI_uiBlock)  {
        MemFree(pself->SSI_uiBlock) ;
        pself->SSI_uiBlock = NullHandle ;
    }
    if (pself->SSI_mainAddonUIBlock)  {
        MemFree(pself->SSI_mainAddonUIBlock) ;
        pself->SSI_mainAddonUIBlock = NullHandle ;
    }
    if (pself->SSI_modifyAddonUIBlock)  {
        MemFree(pself->SSI_modifyAddonUIBlock) ;
        pself->SSI_modifyAddonUIBlock = NullHandle ;
    }
}

/*-------------------------------------------------------------------------
 | Method:  SiteSelectionClass::MSG_SITE_SELECTION_SETUP
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Setup any initial settings that you want.  Usually you link any UI
 |    objects to the SiteSelection instance object (oself) in this method.
 |    (The resource duplication is not smart enough to know where all the
 |    messages go to the destination and I didn't want to send messages
 |    up the tree looking for a class.  We can link everything safely as
 |    part of the initialization of the object.)
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  11/12/99  Created
 |
 *-----------------------------------------------------------------------*/
@method SiteSelectionClass, MSG_SITE_SELECTION_SETUP
{
    @call @CHILD(@SiteListAddTrigger)::MSG_GEN_TRIGGER_SET_DESTINATION(oself) ;
    @call @CHILD(@SiteListModifyTrigger)::MSG_GEN_TRIGGER_SET_DESTINATION(oself) ;
    @call @CHILD(@SiteListDeleteTrigger)::MSG_GEN_TRIGGER_SET_DESTINATION(oself) ;
    @call @CHILD(@SiteEditAddTrigger)::MSG_GEN_TRIGGER_SET_DESTINATION(oself) ;
    @call @CHILD(@SiteEditModifyTrigger)::MSG_GEN_TRIGGER_SET_DESTINATION(oself) ;
    @call @CHILD(@SiteListList)::MSG_GEN_ITEM_GROUP_SET_DESTINATION(oself) ;
    @call @CHILD(@SiteListPasswordOnOff)::MSG_GEN_BOOLEAN_GROUP_SET_DESTINATION(oself) ;
    @call @CHILD(@SiteEditPasswordOnOff)::MSG_GEN_BOOLEAN_GROUP_SET_DESTINATION(oself) ;
    if (@call oself::MSG_SITE_SELECTION_IS_DATABASE_OPEN())
        @call @CHILD(@SiteListList)::
            MSG_GEN_DYNAMIC_LIST_INITIALIZE(SiteListGetCount(pself->SSI_list)) ;
    @call @CHILD(@SiteListList)::MSG_GEN_ITEM_GROUP_SET_DESTINATION(oself) ;
}

/*-------------------------------------------------------------------------
 | Method:  SiteSelectionClass::MSG_SITE_SELECTION_OPEN_DATABASE
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Open access to the database using the given name.
 |
 | Outputs:
 |    Boolean                     -- TRUE if opened, else FALSE
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  11/12/99  Created
 |
 *-----------------------------------------------------------------------*/
@method SiteSelectionClass, MSG_SITE_SELECTION_OPEN_DATABASE
{
    EC_ERROR_IF(
        pself->SSI_list != SITE_LIST_BAD, 
        SITE_LIST_ERROR_DATABASE_ALREADY_OPENED) ;

    /* Open up the site list */
    if (pself->SSI_list == SITE_LIST_BAD)  {
        pself->SSI_list = SiteListOpen(
                              LMemDerefHandles(
                                  OptrToHandle(oself), 
                                  pself->SSI_filename)) ;
    }

    /* Initialize the UI list if we have a list */
    if ((pself->SSI_list) && (pself->SSI_uiBlock))  {
        @call @CHILD(@SiteListList)::
            MSG_GEN_DYNAMIC_LIST_INITIALIZE(SiteListGetCount(pself->SSI_list)) ;
        @send ,forceQueue oself::MSG_SITE_SEL_UI_UPDATE_UI() ;
    }

    /* Did we get it? */
    return (pself->SSI_list == SITE_LIST_BAD)?FALSE:TRUE ;
}

/*-------------------------------------------------------------------------
 | Method:  SiteSelectionClass::MSG_SITE_SELECTION_OPEN_DATABASE
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Close access to the database using the given name.
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  11/12/99  Created
 |
 *-----------------------------------------------------------------------*/
@method SiteSelectionClass, MSG_SITE_SELECTION_CLOSE_DATABASE
{
    EC_ERROR_IF(
        pself->SSI_list == SITE_LIST_BAD,
        SITE_LIST_ERROR_DATABASE_ALREADY_CLOSED) ;

    if (pself->SSI_list != SITE_LIST_BAD)  {
        SiteListClose(pself->SSI_list) ;
        pself->SSI_list = SITE_LIST_BAD ;
    }
}

/*-------------------------------------------------------------------------
 | Method:  SiteSelectionClass::MSG_SITE_SELECTION_IS_DATABASE_OPEN
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Determine if the database is currently opened
 |
 | Outputs:
 |    Boolean                     -- TRUE if opened, else FALSE
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  11/12/99  Created
 |
 *-----------------------------------------------------------------------*/
@method SiteSelectionClass, MSG_SITE_SELECTION_IS_DATABASE_OPEN
{
    return (pself->SSI_list == SITE_LIST_BAD)?FALSE:TRUE ;
}

/*-------------------------------------------------------------------------
 | Method:  SiteSelectionClass::MSG_SITE_SELECTION_GET_SITE_LIST
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Return the handle to the site list.
 |
 | Outputs:
 |    T_siteList                  -- Site list to find
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  11/12/99  Created
 |
 *-----------------------------------------------------------------------*/
@method SiteSelectionClass, MSG_SITE_SELECTION_GET_SITE_LIST
{
    return pself->SSI_list ;
}

/*-------------------------------------------------------------------------
 | Method:  SiteSelectionClass::MSG_SITE_SELECTION_GET_CURRENT_SITE
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Return the handle to currently highlighted site on the list (if any)
 |
 | Outputs:
 |    T_siteEntryID               -- Currently highlighted site.
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  11/12/99  Created
 |
 *-----------------------------------------------------------------------*/
@method SiteSelectionClass, MSG_SITE_SELECTION_GET_CURRENT_SITE
{
    return pself->SSI_currentSite ;
}

/*-------------------------------------------------------------------------
 | Method:  SiteSelectionClass::MSG_SITE_SELECTION_GET_CURRENT_SITE_INDEX
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Return the index to currently highlighted site on the list (if any)
 |
 | Outputs:
 |    word                        -- Current index highlighted, 
 |                                   SITE_ENTRY_INDEX_BAD if none.
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  11/12/99  Created
 |
 *-----------------------------------------------------------------------*/
@method SiteSelectionClass, MSG_SITE_SELECTION_GET_CURRENT_SITE_INDEX
{
    return pself->SSI_currentSiteIndex ;
}

/*-------------------------------------------------------------------------
 | Method:  SiteSelectionClass::MSG_SITE_SELECTION_SET_CURRENT_SITE_INDEX
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Change the currently active site.
 |
 | Inputs: 
 |    word newIndex               -- Index to the new spot, or 
 |                                   SITE_ENTRY_INDEX_BAD for none.
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  11/12/99  Created
 |
 *-----------------------------------------------------------------------*/
@method SiteSelectionClass, MSG_SITE_SELECTION_SET_CURRENT_SITE_INDEX
{
    word num ;
    T_siteEntryID id ;

    /* Go to that position if it exists */
    num = SiteListGetCount(pself->SSI_list) ;

    if (newIndex >= num)  {
        /* Select none if bad index (0xFFFF) or past the limit */
        pself->SSI_currentSiteIndex = SITE_ENTRY_INDEX_BAD ;
        pself->SSI_currentSite = SITE_ENTRY_BAD ;
        @call @CHILD(@SiteListList)::MSG_GEN_ITEM_GROUP_SET_NONE_SELECTED(FALSE);

        /* Update the UI now that there is nothing selected */
        @send ,forceQueue oself::MSG_SITE_SEL_UI_UPDATE_UI() ;
    } else {
        /* Ok, we are selecting a record.  Find it and pull it in */
        id = SiteListFindNth(pself->SSI_list, newIndex) ;
        @call @CHILD(@SiteListList)::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(
                  newIndex, 
                  FALSE) ;
        pself->SSI_currentSiteIndex = newIndex ;
        pself->SSI_currentSite = id ;
        @call oself::MSG_SITE_SELECTION_GET_SITE_AND_PUT_INTO_UI() ;
    }
}

/*-------------------------------------------------------------------------
 | Method:  SiteSelectionClass::MSG_SITE_SELECTION_SET_ENABLED_PARTS
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Turn on and off enabled UI parts.
 |
 | Inputs: 
 |    T_siteSelParts partsOn      -- Parts to turn on
 |    T_siteSelParts partsOff     -- Parts to turn off
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  11/12/99  Created
 |
 *-----------------------------------------------------------------------*/
@method SiteSelectionClass, MSG_SITE_SELECTION_SET_ENABLED_PARTS
{
    pself->SSI_enabledParts |= partsOn ;
    pself->SSI_enabledParts &= (~partsOff) ;
    @send ,forceQueue oself::MSG_SITE_SEL_UI_UPDATE_UI() ;
}

/*-------------------------------------------------------------------------
 | Method:  SiteSelectionClass::MSG_SITE_SELECTION_SET_USABLE_PARTS
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Turn on and off usable UI parts.
 |
 | Inputs: 
 |    T_siteSelParts partsOn      -- Parts to turn on
 |    T_siteSelParts partsOff     -- Parts to turn off
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  11/12/99  Created
 |
 *-----------------------------------------------------------------------*/
@method SiteSelectionClass, MSG_SITE_SELECTION_SET_USABLE_PARTS
{
    pself->SSI_usableParts |= partsOn ;
    pself->SSI_usableParts &= (~partsOff) ;
    @send ,forceQueue oself::MSG_SITE_SEL_UI_UPDATE_UI() ;
}

/*-------------------------------------------------------------------------
 | Method:  SiteSelectionClass::MSG_SITE_SEL_UI_UPDATE_UI
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Turn on and off any parts that need to be worked.
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  11/12/99  Created
 |
 *-----------------------------------------------------------------------*/
@method SiteSelectionClass, MSG_SITE_SEL_UI_UPDATE_UI
{
    typedef struct {
        T_siteSelParts part ;
        Boolean needsEntry ;
        ChunkHandle child ;
        ChunkHandle dependsOnToggle ;
    } enableDisableEntry ;

    static enableDisableEntry children[] = {
        { SITE_SEL_PART_LIST,               FALSE, ChunkOf(@SiteListList),                    NullHandle },
        { SITE_SEL_PART_ADD_DEL,            FALSE, ChunkOf(@SiteListAddTrigger),              NullHandle },
        { SITE_SEL_PART_ADD_DEL,            TRUE,  ChunkOf(@SiteListDeleteTrigger),           NullHandle },
        { SITE_SEL_PART_MODIFY,             TRUE,  ChunkOf(@SiteListModifyTrigger),           NullHandle },
        { SITE_SEL_PART_NAME_PASS,          FALSE, ChunkOf(@SiteListBottom),                  NullHandle },
        { SITE_SEL_PART_NAME_PASS,          FALSE, ChunkOf(@SiteEditPasswordNameAndPassword), NullHandle },
        { SITE_SEL_PART_MAIN_ADD_ON,        FALSE, ChunkOf(@SiteListMainAddOn),               NullHandle },
        { SITE_SEL_PART_MODIFY_ADD_ON,      FALSE, ChunkOf(@SiteEditAddon),                   NullHandle },
        { SITE_SEL_PART_EDIT_PORT,          FALSE, ChunkOf(@SiteEditPortAndDescription),      NullHandle },
        { SITE_SEL_PART_NAME_PASS,          FALSE, ChunkOf(@SiteListPasswordName),            ChunkOf(@SiteListPasswordOnOff) },
        { SITE_SEL_PART_NAME_PASS,          FALSE, ChunkOf(@SiteListPasswordPassword),        ChunkOf(@SiteListPasswordOnOff) },
        { SITE_SEL_PART_NAME_PASS,          FALSE, ChunkOf(@SiteEditPasswordName),            ChunkOf(@SiteEditPasswordOnOff) },
        { SITE_SEL_PART_NAME_PASS,          FALSE, ChunkOf(@SiteEditPasswordPassword),        ChunkOf(@SiteEditPasswordOnOff) },
        { 0, FALSE, NullHandle, NullHandle }
    } ;
    word i ;
    word part ;
    optr child ;
    word entrySelected ;
    Boolean isSelected ;
    Boolean isToggled ;
    word toggleState ;

    entrySelected = @call @CHILD(@SiteListList)::MSG_GEN_ITEM_GROUP_GET_SELECTION() ;
    if (entrySelected == GIGS_NONE)
        isSelected = FALSE ;
    else
        isSelected = TRUE ;
    i = 0 ;
    while (children[i].part)  {
        part = children[i].part ;
        child = @CHILD(children[i].child) ;

        isToggled = TRUE ;
        if (children[i].dependsOnToggle)  {
            toggleState = @call @CHILD(children[i].dependsOnToggle)::
                MSG_GEN_BOOLEAN_GROUP_GET_SELECTED_BOOLEANS() ;
            if (!(toggleState & SITE_LIST_PASSWORD_ON_BIT))
                isToggled = FALSE ;
        }
        /* Determine if we are enabled or not (declared enable AND usable) */
        if ((part & pself->SSI_enabledParts) && (part & pself->SSI_usableParts) &&
                ((!children[i].needsEntry) || (isSelected)) && (isToggled))  {
            /* Enabled */
            @call child::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_UI_QUEUE) ;
        } else {
            /* Disabled */
            @call child::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_UI_QUEUE) ;
        }

        /* Are we usable or not usable? */
        if (part & pself->SSI_usableParts)  {
            /* Usable */
            @call child::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_UI_QUEUE) ;
        } else {
            /* Unusable */
            @call child::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_UI_QUEUE) ;
        }
        pself = ObjDerefGen(oself) ;

        i++ ;
    }
}

/*-------------------------------------------------------------------------
 | Method:  SiteSelectionClass::MSG_SITE_SELECTION_GET_SITE_AND_PUT_INTO_UI
 *-------------------------------------------------------------------------
 |
 | Description:
 |    The user has selected an entry.  Lock it in and copy over any useful
 |    data.
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  11/12/99  Created
 |
 *-----------------------------------------------------------------------*/
@method SiteSelectionClass, MSG_SITE_SELECTION_GET_SITE_AND_PUT_INTO_UI
{
    T_siteEntryID id ;
    T_siteEntry site ;
    char buffer[SITE_ENTRY_SITE_LIMIT+1] ;
    word value ;
    T_siteEntryType entryType ;

    EC_ERROR_IF(
        pself->SSI_currentSite == SITE_ENTRY_ID_BAD,
        SITE_LIST_ERROR_CANT_UPDATE_UI_WITHOUT_SELECTED_SITE) ;
    id = pself->SSI_currentSite ;

    /* Grab the record and pull out the useful data */
    site = SiteEntryLock(pself->SSI_list, id) ;

    /* Get the title of the site */
    SiteFieldGet(site, SITE_FIELD_NAME, buffer, sizeof(buffer)) ;
    @call @CHILD(@SiteEditTitle)::MSG_VIS_TEXT_REPLACE_ALL_PTR(buffer, 0) ;

    SiteFieldGet(site, SITE_FIELD_SITE, buffer, sizeof(buffer)) ;
    @call @CHILD(@SiteEditSite)::MSG_VIS_TEXT_REPLACE_ALL_PTR(buffer, 0) ;

    SiteFieldGet(site, SITE_FIELD_PORT, (byte*) &value, sizeof(value)) ;
    @call @CHILD(@SiteEditPort)::MSG_GEN_VALUE_SET_INTEGER_VALUE(value, FALSE) ;

    SiteFieldGet(site, SITE_FIELD_ENTRY_TYPE, (byte*) &entryType, sizeof(entryType)) ;
    if (entryType)  {
        /* Use passwords */
        @call @CHILD(@SiteEditPasswordOnOff)::MSG_GEN_BOOLEAN_GROUP_SET_GROUP_STATE(
                 SITE_LIST_PASSWORD_ON_BIT, 
                 FALSE) ;
        @call @CHILD(@SiteListPasswordOnOff)::MSG_GEN_BOOLEAN_GROUP_SET_GROUP_STATE(
                 SITE_LIST_PASSWORD_ON_BIT, 
                 FALSE) ;
    } else {
        /* Don't use passwords */
        @call @CHILD(@SiteEditPasswordOnOff)::MSG_GEN_BOOLEAN_GROUP_SET_GROUP_STATE(
                 0, 
                 FALSE) ;
        @call @CHILD(@SiteListPasswordOnOff)::MSG_GEN_BOOLEAN_GROUP_SET_GROUP_STATE(
                 0, 
                 FALSE) ;
    }

    SiteFieldGet(site, SITE_FIELD_USERNAME, buffer, sizeof(buffer)) ;
    @call @CHILD(@SiteListPasswordName)::MSG_VIS_TEXT_REPLACE_ALL_PTR(buffer, 0) ;
    @call @CHILD(@SiteEditPasswordName)::MSG_VIS_TEXT_REPLACE_ALL_PTR(buffer, 0) ;

    SiteFieldGet(site, SITE_FIELD_PASSWORD, buffer, sizeof(buffer)) ;
    @call @CHILD(@SiteListPasswordPassword)::MSG_VIS_TEXT_REPLACE_ALL_PTR(buffer, 0) ;
    @call @CHILD(@SiteEditPasswordPassword)::MSG_VIS_TEXT_REPLACE_ALL_PTR(buffer, 0) ;

    @send ,forceQueue oself::MSG_SITE_SEL_UI_UPDATE_UI() ;

    SiteEntryUnlock(site) ;
}

/*-------------------------------------------------------------------------
 | Method:  SiteSelectionClass::MSG_SITE_SELECTION_START_ADD_SITE
 *-------------------------------------------------------------------------
 |
 | Description:
 |    User wants to start adding a new site.  Setup for this transaction.
 |    NOTE:  This method is intercepted by the subclass when special UI
 |           parts need to be initialized.
 |
 | Inputs:
 |    optr trigger                -- Calling trigger
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  11/12/99  Created
 |
 *-----------------------------------------------------------------------*/
@method SiteSelectionClass, MSG_SITE_SELECTION_START_ADD_SITE
{
    /* No modify trigger, yes add trigger. */
    @call @CHILD(@SiteEditModifyTrigger)::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_UI_QUEUE) ;
    @call @CHILD(@SiteEditModifyTrigger)::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_UI_QUEUE) ;
    @call @CHILD(@SiteEditAddTrigger)::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_UI_QUEUE) ;
    @call @CHILD(@SiteEditAddTrigger)::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_UI_QUEUE) ;

    /* Clear the form by default */
    @call @CHILD(@SiteEditTitle)::MSG_VIS_TEXT_DELETE_ALL() ;
    @call @CHILD(@SiteEditSite)::MSG_VIS_TEXT_DELETE_ALL() ;
    @call @CHILD(@SiteEditPasswordName)::MSG_VIS_TEXT_DELETE_ALL() ;
    @call @CHILD(@SiteEditPasswordPassword)::MSG_VIS_TEXT_DELETE_ALL() ;
    @call @CHILD(@SiteEditPasswordToggle)::
              MSG_GEN_BOOLEAN_GROUP_SET_GROUP_STATE(0, FALSE) ;

    /* Now that we are setup, bring up the dialog */
    @send ,forceQueue @CHILD(@SiteEditDialog)::MSG_GEN_INTERACTION_INITIATE() ;
}

/*-------------------------------------------------------------------------
 | Method:  SiteSelectionClass::MSG_SITE_SELECTION_START_MODIFY_SITE
 *-------------------------------------------------------------------------
 |
 | Description:
 |    User wants to modify the current site.  Setup for this transaction.
 |    The data in the form is usually set up as part of handling method
 |    MSG_SITE_SELECTION_GET_SITE_AND_PUT_INTO_UI.
 |
 |    NOTE:  This method is intercepted by the subclass when special UI
 |           parts need to be initialized.
 |
 | Inputs:
 |    optr trigger                -- Calling trigger
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  11/12/99  Created
 |
 *-----------------------------------------------------------------------*/
@method SiteSelectionClass, MSG_SITE_SELECTION_START_MODIFY_SITE
{
    /* No modify trigger, yes add trigger. */
    @call @CHILD(@SiteEditModifyTrigger)::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_UI_QUEUE) ;
    @call @CHILD(@SiteEditModifyTrigger)::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_UI_QUEUE) ;
    @call @CHILD(@SiteEditAddTrigger)::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_UI_QUEUE) ;
    @call @CHILD(@SiteEditAddTrigger)::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_UI_QUEUE) ;

    /* Now that we are setup, bring up the dialog */
    @send ,forceQueue @CHILD(@SiteEditDialog)::MSG_GEN_INTERACTION_INITIATE() ;
}

/*-------------------------------------------------------------------------
 | Method:  SiteSelectionClass::MSG_SITE_SELECTION_DELETE_SITE
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Ask the user if he really wants to delete the site and if so,
 |    do the real delete.
 |
 | Inputs:
 |    optr trigger                -- Calling trigger
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  11/12/99  Created
 |
 *-----------------------------------------------------------------------*/
@method SiteSelectionClass, MSG_SITE_SELECTION_DELETE_SITE
{
    word answer ;

    /* Better double check with a dialog. */
    answer = UserStandardDialogOptr(
                NULL,
                NULL,
                NullHandle,
                NullHandle,
                @SiteEditSureDeleteQuestion,
                ((CDT_QUESTION << CDBF_DIALOG_TYPE_OFFSET) |
                    (GIT_AFFIRMATION << CDBF_INTERACTION_TYPE_OFFSET))) ;

    /* Only delete if we get a firm yes */
    if (answer == IC_YES)  {
        SiteEntryDestroy(pself->SSI_list, pself->SSI_currentSite) ;

        /* Now make sure we select the next in the list. */
        @send ,forceQueue oself::MSG_SITE_SELECTION_REFRESH_LIST() ;
        @send ,forceQueue oself::MSG_SITE_SELECTION_SET_CURRENT_SITE_INDEX(
            pself->SSI_currentSiteIndex) ;
    }
}

/*-------------------------------------------------------------------------
 | Method:  SiteSelectionClass::MSG_SITE_SELECTION_FINISH_ADD_SITE
 *-------------------------------------------------------------------------
 |
 | Description:
 |    The user has entered data into the edit/modify dialog and hit add.
 |    Check to see if this is valid, and if so, add it.
 |
 | Inputs:
 |    optr trigger                -- Calling trigger
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  11/12/99  Created
 |
 *-----------------------------------------------------------------------*/
@method SiteSelectionClass, MSG_SITE_SELECTION_FINISH_ADD_SITE
{
    Boolean valid ;
    T_siteEntryID id ;

    valid = @call oself::MSG_SITE_SELECTION_VALIDATE_ENTERED_DATA() ;
    if (valid)  {
        id = SiteEntryCreate(pself->SSI_list) ;
        @call oself::MSG_SITE_SELECTION_GET_UI_AND_PUT_INTO_SITE(id) ;
        @call @CHILD(@SiteEditDialog)::MSG_GEN_INTERACTION_ACTIVATE_COMMAND(IC_DISMISS) ;
        @call oself::MSG_SITE_SEL_UI_UPDATE_UI() ;
    }
}

/*-------------------------------------------------------------------------
 | Method:  SiteSelectionClass::MSG_SITE_SELECTION_GET_UI_AND_PUT_INTO_SITE
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Do the real work of actually taking the data out of the site and
 |    putting it into the given record.
 |
 | Outputs:
 |     T_siteEntryID id               -- Where to store the data.
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  11/12/99  Created
 |
 *-----------------------------------------------------------------------*/
@method SiteSelectionClass, MSG_SITE_SELECTION_FINISH_MODIFY_SITE
{
    Boolean valid ;

    valid = @call oself::MSG_SITE_SELECTION_VALIDATE_ENTERED_DATA() ;
    if (valid)  {
        @call oself::MSG_SITE_SELECTION_GET_UI_AND_PUT_INTO_SITE(
            pself->SSI_currentSite) ;
        @call @CHILD(@SiteEditDialog)::MSG_GEN_INTERACTION_ACTIVATE_COMMAND(IC_DISMISS) ;
        @call oself::MSG_SITE_SEL_UI_UPDATE_UI() ;
    }
}

/*-------------------------------------------------------------------------
 | Method:  SiteSelectionClass::MSG_SITE_SELECTION_GET_UI_AND_PUT_INTO_SITE
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Do the real work of actually taking the data out of the site and
 |    putting it into the given record.
 |
 | Inputs:
 |     T_siteEntryID id               -- Where to store the data.
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  11/12/99  Created
 |
 *-----------------------------------------------------------------------*/
@method SiteSelectionClass, MSG_SITE_SELECTION_GET_UI_AND_PUT_INTO_SITE
{
    word newIndex ;
    T_siteEntry site ;
    char buffer[SITE_ENTRY_SITE_LIMIT+1] ;
    word value ;
    T_siteEntryType entryType ;

    /* Grab the record and pull out the useful data */
    site = SiteEntryLock(pself->SSI_list, id) ;

    /* Store each field */
    @call @CHILD(@SiteEditTitle)::MSG_VIS_TEXT_GET_ALL_PTR(buffer) ;
    SiteFieldSet(site, SITE_FIELD_NAME, buffer, 0) ;

    @call @CHILD(@SiteEditSite)::MSG_VIS_TEXT_GET_ALL_PTR(buffer) ;
    SiteFieldSet(site, SITE_FIELD_SITE, buffer, 0) ;

    value = @call @CHILD(@SiteEditPort)::MSG_GEN_VALUE_GET_INTEGER_VALUE() ;
    SiteFieldSet(site, SITE_FIELD_PORT, (byte*) &value, sizeof(value)) ;

    value = @call @CHILD(@SiteEditPasswordOnOff)::MSG_GEN_BOOLEAN_GROUP_GET_SELECTED_BOOLEANS() ;
    entryType = 
        (value & SITE_LIST_PASSWORD_ON_BIT) ? 
            SITE_ENTRY_TYPE_PASSWORD : 
            SITE_ENTRY_TYPE_ANONYMOUS ;
    SiteFieldSet(site, SITE_FIELD_ENTRY_TYPE, (byte*) &entryType, sizeof(entryType)) ;

    @call @CHILD(@SiteEditPasswordName)::MSG_VIS_TEXT_GET_ALL_PTR(buffer) ;
    SiteFieldSet(site, SITE_FIELD_USERNAME, buffer, 0) ;

    @call @CHILD(@SiteEditPasswordPassword)::MSG_VIS_TEXT_GET_ALL_PTR(buffer) ;
    SiteFieldSet(site, SITE_FIELD_PASSWORD, buffer, 0) ;

    newIndex = SiteEntryUnlock(site) ;

    /* Update the list. */
    @call oself::MSG_SITE_SELECTION_REFRESH_LIST() ;
    @send ,forceQueue oself::MSG_SITE_SELECTION_SET_CURRENT_SITE_INDEX(newIndex) ;
}

/*-------------------------------------------------------------------------
 | Method:  SiteSelectionClass::MSG_SITE_SELECTION_REFRESH_LIST
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Resize the list to the appropriate number of elements in the sorted
 |    array.  Also can be called if the elements have shifted.
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  11/12/99  Created
 |
 *-----------------------------------------------------------------------*/
@method SiteSelectionClass, MSG_SITE_SELECTION_REFRESH_LIST
{
    @call @CHILD(@SiteListList)::MSG_GEN_DYNAMIC_LIST_INITIALIZE(
             SiteListGetCount(pself->SSI_list)) ;
}

/*-------------------------------------------------------------------------
 | Method:  SiteSelectionClass::MSG_SITE_SELECTION_VALIDATE_ENTERED_DATA
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Check the entries to see if all fields are entered correctly.
 |    If an error is found, a dialog is IMMEDIATELY displayed.
 |    NOTE:  Subclasses should intercept this message.
 |
 | Outputs:
 |    Boolean                     -- TRUE if ok, else FALSE
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  11/12/99  Created
 |
 *-----------------------------------------------------------------------*/
@method SiteSelectionClass, MSG_SITE_SELECTION_VALIDATE_ENTERED_DATA
{
    /* TBD */
    return TRUE ;
}

/*-------------------------------------------------------------------------
 | Method:  SiteSelectionClass::MSG_SITE_GET_MAIN_ADDON_BLOCK
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Returns the duplicated memory block handle made from the main 
 |    add-on template.
 |
 | Outputs:
 |    MemHandle                   -- Addon block (or NullHandle if none)
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  11/12/99  Created
 |
 *-----------------------------------------------------------------------*/
@method SiteSelectionClass, MSG_SITE_GET_MAIN_ADDON_BLOCK
{
    return pself->SSI_mainAddonUIBlock ;
}

/*-------------------------------------------------------------------------
 | Method:  SiteSelectionClass::MSG_SITE_GET_MODIFY_ADDON_BLOCK
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Returns the duplicated memory block handle made from the modify 
 |    add-on template.
 |
 | Outputs:
 |    MemHandle                   -- Addon block (or NullHandle if none)
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  11/12/99  Created
 |
 *-----------------------------------------------------------------------*/
@method SiteSelectionClass, MSG_SITE_GET_MODIFY_ADDON_BLOCK
{
    return pself->SSI_modifyAddonUIBlock ;
}

void IGetTextLimited(optr textObj, char *buffer, word limit)
{
    MemHandle mem ;

    buffer[0] = '\0' ;
    mem = @call textObj::MSG_VIS_TEXT_GET_ALL_BLOCK(0) ;
    if ((mem) && (limit))  {
        MemLock(mem) ;
        strncpy(buffer, MemDeref(mem), limit-1) ;
        MemUnlock(mem) ;
        MemFree(mem) ;
    }
}

/*-------------------------------------------------------------------------
 | Method:  SiteSelectionClass::MSG_SITE_SELECTION_GET_TITLE
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Get the title of the currently selected title.
 |
 | Inputs:  
 |    char *buffer                -- Pointer to place name ("" if none).
 |    word limit                  -- size of buffer (including null).
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  11/15/99  Created
 |
 *-----------------------------------------------------------------------*/
@method SiteSelectionClass, MSG_SITE_SELECTION_GET_TITLE
{
    T_siteEntry entry ;

    buffer[0] = '\0' ;
    if (pself->SSI_currentSite)  {
        entry = SiteEntryLock(pself->SSI_list, pself->SSI_currentSite) ;
        SiteFieldGet(entry, SITE_FIELD_NAME, buffer, limit) ;
        SiteEntryUnlock(entry) ;
    }
}

/*-------------------------------------------------------------------------
 | Method:  SiteSelectionClass::MSG_SITE_SELECTION_GET_USERNAME
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Get the username of the currently selected title.  If the user has
 |    edited it, we'll be getting that one instead of the one in the
 |    database.
 |
 | Inputs:  
 |    char *buffer                -- Pointer to place name ("" if none).
 |    word limit                  -- size of buffer (including null).
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  11/15/99  Created
 |
 *-----------------------------------------------------------------------*/
@method SiteSelectionClass, MSG_SITE_SELECTION_GET_USERNAME
{
    IGetTextLimited(@CHILD(@SiteListPasswordName), buffer, limit) ;
}

/*-------------------------------------------------------------------------
 | Method:  SiteSelectionClass::MSG_SITE_SELECTION_GET_PASSWORD
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Get the password of the currently selected title.  If the user has
 |    edited it, we'll be getting that one instead of the one in the
 |    database.
 |
 | Inputs:  
 |    char *buffer                -- Pointer to place name ("" if none).
 |    word limit                  -- size of buffer (including null).
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  11/15/99  Created
 |
 *-----------------------------------------------------------------------*/
@method SiteSelectionClass, MSG_SITE_SELECTION_GET_PASSWORD
{
    IGetTextLimited(@CHILD(@SiteListPasswordPassword), buffer, limit) ;
}

/*-------------------------------------------------------------------------
 | Method:  SiteSelectionClass::MSG_SITE_SELECTION_GET_TITLE
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Get the site of the currently selected title.
 |
 | Inputs:  
 |    char *buffer                -- Pointer to place name ("" if none).
 |    word limit                  -- size of buffer (including null).
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  11/15/99  Created
 |
 *-----------------------------------------------------------------------*/
@method SiteSelectionClass, MSG_SITE_SELECTION_GET_SITE
{
    T_siteEntry entry ;

    buffer[0] = '\0' ;
    if (pself->SSI_currentSite != SITE_ENTRY_ID_BAD)  {
        entry = SiteEntryLock(pself->SSI_list, pself->SSI_currentSite) ;
        SiteFieldGet(entry, SITE_FIELD_SITE, buffer, limit) ;
        SiteEntryUnlock(entry) ;
    }
}

/*-------------------------------------------------------------------------
 | Method:  SiteSelectionClass::MSG_SITE_SELECTION_PASSWORD_TYPE
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Determine if the password is of the type anonymous or password.
 |
 | Outputs:
 |    T_siteEntryType             -- Type of entry
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  11/15/99  Created
 |
 *-----------------------------------------------------------------------*/
@method SiteSelectionClass, MSG_SITE_SELECTION_GET_PASSWORD_TYPE
{
    T_siteEntryType type = SITE_ENTRY_TYPE_ANONYMOUS ;
    word toggleState ;

    toggleState = @call @CHILD(@SiteListPasswordOnOff)::
        MSG_GEN_BOOLEAN_GROUP_GET_SELECTED_BOOLEANS() ;
    if (toggleState & SITE_LIST_PASSWORD_ON_BIT)
        type = SITE_ENTRY_TYPE_PASSWORD ;

    return type ;
}


/***************************************************************************
 *  END OF FILE:  siteUI.GOC
 ***************************************************************************/

