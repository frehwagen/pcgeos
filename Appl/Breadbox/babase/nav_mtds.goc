/*
 **************************************************************************
 *  FILE:		nav_mtds.goc
 *  PROJECT:		Breadbox HomeBase
 *  DESCRIPTION:	This file has methods for record navigation
 *			
 **************************************************************************
 */
/*
 ***************************************************************************
 *		Include files
 ***************************************************************************
 */
@include "hbase.goh"

/*
 ***************************************************************************
 *		External Objects
 ***************************************************************************
 */

 @extern object Field1;
 @extern object Field2;
 @extern object Field3;
 @extern object Field4;
 @extern object Field6;
 @extern object Field7;
 @extern object NewButton;
 @extern object EnterButton;
 @extern object DeleteButton;
 @extern object ModButton;
 @extern object CopyCodeButton;
 @extern object IndexDList;

/*
 ***************************************************************************
 *		Code for HBaseProcessClass   record navigation
 ***************************************************************************
 */

/***********************************************************************
 *
 * FUNCTION:	ShowData for HBaseProcessClass
 *
 * CALLED BY:
 *      	MSG_NAV_RECORDS
 *
 * STRATEGY:    
 *		
 *
 ***********************************************************************/

void ShowData (void)
{
    RecordStruct	*record;
    GroupStruct		*group;
    DBItem		*index;
    DBMapStruct* 	mapPtr;
    DBItem		recordItem, indexItem;
    DBGroup		groupGroup;
    word		i, currentGroup, currentGroupRec;
    word		bufCount, fieldCount, currentNumGroupRecs;
    char		fieldString[DATA_LEN];
    char		strBuffer[(10 * DATA_LEN)];


    /* first get the cG and cGR based on currentRecord */
    GetGroupAndGrpRec (currentRecord,
		       &currentGroup,
		       &currentGroupRec,
		       &currentNumGroupRecs);


    /* Get the record info */
    mapPtr = DBLockMap(HBFile);
    group = (GroupStruct *) (mapPtr + 1);
    groupGroup = group[currentGroup].GS_group;
    /* Extract the item handle for the record. */
    indexItem = group[currentGroup].GS_indexStart;
    DBUnlock(mapPtr);

    /* get the index array address */
    index = DBLock(HBFile, groupGroup, indexItem);
    recordItem = index[currentGroupRec];
    DBUnlock(index);

    /* get the record struct address */
    record = DBLock(HBFile, groupGroup, recordItem);
    /* copy the record to the buffer */
    strcpy(strBuffer, record->RS_data);
    DBUnlock(record);

    /* now cycle the data into the fields */
    bufCount = 0;
    for (i = 1; i < 5; i++)  {
       for (fieldCount = 0; fieldCount < DATA_LEN; fieldCount++)  {
	  if (strBuffer[bufCount] != '~')  {
	     fieldString[fieldCount] = strBuffer[bufCount];
	     bufCount++;
             }
	  else  {
	     fieldString[fieldCount] = NULL;
	     bufCount++;
	     switch (i)  {
		case 1:
                   @call Field1::MSG_VIS_TEXT_REPLACE_ALL_PTR(
						fieldString, 0);
                   break;
		case 2:
                   @call Field2::MSG_VIS_TEXT_REPLACE_ALL_PTR(
						fieldString, 0);
                   break;
		case 3:
			    @call Field3::MSG_VIS_TEXT_REPLACE_ALL_PTR(
						fieldString, 0);
			    break;
		case 4:
			    @call Field4::MSG_VIS_TEXT_REPLACE_ALL_PTR(
						fieldString, 0);
			    break;
			 }  /* end switch */
		fieldCount = DATA_LEN; /* force exit loop */
		}  /* end show it else */

	  } /* end this field for */

       } /* end cycle thru fields for */

    /* and the descr & code blocks */
    record = DBLock(HBFile, groupGroup, recordItem);
    @send Field6::MSG_VIS_TEXT_REPLACE_ALL_DB_ITEM(
					  HBFile,
					  groupGroup,
					  record->RS_description);
    @send Field7::MSG_VIS_TEXT_REPLACE_ALL_DB_ITEM(
					  HBFile,
					  groupGroup,
					  record->RS_code);
    DBUnlock(record);
    /* put the cursor at the beginning */
    @send Field6::MSG_VIS_TEXT_SELECT_RANGE(0, 0);
    @send Field7::MSG_VIS_TEXT_SELECT_RANGE(0, 0);

    /* set the nav buttons */
    @send NewButton::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
    @send DeleteButton::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
    @send ModButton::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
    @send CopyCodeButton::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
    @send EnterButton::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);

    @send IndexDList::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(currentRecord, FALSE);


}

/***********************************************************************
 *
 * FUNCTION:	ClearData for HBaseProcessClass
 *
 * CALLED BY:	MSG_NEW_RECORD,
 *
 * STRATEGY:    Clears the screen of data
 *		
 *
 ***********************************************************************/

void ClearData (void)
{
    @send Field1::MSG_VIS_TEXT_DELETE_ALL();
    @send Field2::MSG_VIS_TEXT_DELETE_ALL();
    @send Field3::MSG_VIS_TEXT_DELETE_ALL();
    @send Field4::MSG_VIS_TEXT_DELETE_ALL();
    @send Field6::MSG_VIS_TEXT_DELETE_ALL();
    @send Field7::MSG_VIS_TEXT_DELETE_ALL();

}

/***********************************************************************
 *
 * MESSAGE:	MSG_INDEX_DLIST_MONIKER_QUERY for HBaseProcessClass
 *
 * PARAMETERS:  void (optr list, word item)
 *
 * DESCRIPTION:	shows entries in the list.
 *
 *
 *
 ***********************************************************************/

@extern method HBaseProcessClass, MSG_INDEX_DLIST_MONIKER_QUERY
{
    RecordStruct	*record;
    GroupStruct		*group;
    DBItem		*index;
    DBMapStruct* 	mapPtr;
    DBItem		recordItem, indexItem;
    DBGroup		groupGroup;
    word		i, currentGroup, currentGroupRec;
    word		savedItem, currentNumGroupRecs;
    char		fieldString[DATA_LEN];


    savedItem = item;

    /* first convert the item (supplied by the dlist) into
     * the currentGroup and currentGroupRec
     */
    GetGroupAndGrpRec (item,
		       &currentGroup,
		       &currentGroupRec,
		       &currentNumGroupRecs);

    /* Get the record info */
    mapPtr = DBLockMap(HBFile);
    group = (GroupStruct *) (mapPtr + 1);
    groupGroup = group[currentGroup].GS_group;
    /* Extract the item handle for the record. */
    indexItem = group[currentGroup].GS_indexStart;
    DBUnlock(mapPtr);

    /* get the index array address */
    index = DBLock(HBFile, groupGroup, indexItem);
    recordItem = index[currentGroupRec];
    DBUnlock(index);

    /* get the record struct address */
    record = DBLock(HBFile, groupGroup, recordItem);
    /* and read the first field info */
    i = 0;
    while (record->RS_data[i] != '~') {
       fieldString[i] = record->RS_data[i];
       i++;
       } 
    fieldString[i] = NULL;
    DBUnlock(record);


    /* Show the field1 data in the list item. */
    @call list::MSG_GEN_DYNAMIC_LIST_REPLACE_ITEM_TEXT(
		 savedItem, fieldString);

}


/***********************************************************************
 *
 * MESSAGE:	MSG_INDEX_DLIST_APPLY for HBaseProcessClass
 *
 * PARAMETERS:  void (word selection, word numSelections,
 *                    byte stateFlags)
 *
 * DESCRIPTION:	takes action when user selects entry
 *               - Shows data in fields -
 *
 *
 ***********************************************************************/
@extern method HBaseProcessClass, MSG_INDEX_DLIST_APPLY
{

    currentRecord = selection;

    ShowData();

} 


