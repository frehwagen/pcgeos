/***********************************************************************
 *
 *
 * PROJECT:	BASICBase
 * FILE:		hbase.goh
 * AUTHOR:	John F. Howard,   4/98
 *
 * DESCRIPTION:
 *	This file has the global variables
 *      and structures for the HomeBase application.
 *
 *
 ***********************************************************************/

/*
 ***************************************************************************
 *		Include files
 ***************************************************************************
 */

@include <stdapp.goh>
@include <gstring.h>
#include <ansi/string.h>
#include <string.h>
#include <token.h>	/* for assigning doc token */

/*
 ***************************************************************************
 *		Class & Message Definitions
 ***************************************************************************
 */
@class	HBaseProcessClass, GenProcessClass;

    @message void MSG_ENTER_DATA();
    @message void MSG_MODIFY_DATA(); 
    @message void MSG_DELETE_DATA();
    @message void MSG_NEW_RECORD();
    @message void MSG_COPY_CODE_TO_CLIP();
    @message (GEN_DYNAMIC_LIST_QUERY_MSG) MSG_INDEX_DLIST_MONIKER_QUERY;
    @message (GEN_ITEM_GROUP_APPLY_MSG) MSG_INDEX_DLIST_APPLY; 

    @message void MSG_SEARCH_FIELDS(word whichSearch);
@endc

@class TextEnableClass, GenTextClass;
    @instance optr TE_button;
@endc


/* Prototypes */
   void ShowData (void);

   void ClearData (void);

   void EnterField (word counter,
		    char fieldString[50],
		    word whichGroup,
		    word whichGroupRec);

   void GetGroupAndGrpRec (word record,
		           word *curGroup,
		           word *curGrpRec,
			   word *curNumGrpRec);

   void DeleteRecord (void);

   word AckDBox (char* string1, optr ackMsg);

   void NotifyDBox (optr notifyMsg);
 /*
 ***************************************************************************
 *		Global variables and definitions
 ***************************************************************************
 */

#define DATA_LEN   100
#define FIELD_NAME_LEN   25

/* constants for ack dboxes */
typedef ByteEnum AckDB;
#define ACK_YES 1
#define ACK_NO 2

/* constants for searching */
typedef ByteEnum FirstNext;
#define FIRST 3
#define NEXT 4

#define S_CASE 1
#define S_FIELD 2


extern FileHandle  HBFile;  /* handle to the file that's open. */

extern word  numRecords;
extern word  firstGroup;
extern word  lastGroup;
extern word  currentRecord;
extern Boolean isMod;

/* globals for the Search Next functionality */
extern word SNChar;
extern word SNField;
extern word SNRecord;

/*
 ***************************************************************************
 *		Structure Definitions
 ***************************************************************************
 */

/* This is the structure of the DB mapblock  */
typedef struct {

    word	MS_numRecords;          /* the number of records */
    word	MS_firstGroup;
    word	MS_lastGroup;

} DBMapStruct;


/*
 * GroupStruct
 *
 * These structures contain pertinent information about a DB Group,
 * 27 groups - 1 for each letter and one for misc
 */

typedef struct {

    DBGroup     GS_group;               /* DB Group ID for this record */
    DBItem      GS_indexStart;		/* start of item handles */
    word	GS_numGroupRecs;	/* # of records in the group */
    word	GS_reserved;  
} GroupStruct;

/*
 * RecordStruct
 *
 * These structures are stored as individual DB items. The char 
 * string contains first 5 records separated by a tilde
 *
 */

typedef struct {

    DBItem  RS_description;	/* description block */
    DBItem  RS_code;		/* code block */
    char	  RS_data[(5 * DATA_LEN)];
    word	  RS_reserved;

} RecordStruct;


