/*
 **************************************************************************
 *  FILE:		dta_mtds.goc
 *  PROJECT:		Breadbox HomeBase
 *  DESCRIPTION:	This file has methods for data management
 *			
 **************************************************************************
 */
/*
 ***************************************************************************
 *		Include files
 ***************************************************************************
 */
@include "hbase.goh"

/*
 ***************************************************************************
 *		External Objects
 ***************************************************************************
 */

 @extern object Field1;
 @extern object Field2;
 @extern object Field3;
 @extern object Field4;
 @extern object Field6;
 @extern object Field7;
 @extern object RecordsText;
 @extern object NewButton;
 @extern object EnterButton;
 @extern object DeleteButton;
 @extern object ModButton;
 @extern object CopyCodeButton;
 @extern object IndexDList;

 @extern chunk	ModRecMsg;
 @extern chunk	DelRecMsg;
 @extern chunk	Fld1EntryMsg;
/*
 ***************************************************************************
 *		Code for HBaseProcessClass   data management
 ***************************************************************************
 */

/***********************************************************************
 *
 * FUNCTION:	EnterField for HBaseProcessClass
 *              (word counter, char fieldString[DATA_LEN],
 *                   word whichGroup, word whichGroupRec)
 * CALLED BY:	MSG_ENTER_DATA,
 *      	
 *
 * STRATEGY:    
 *		
 *
 ***********************************************************************/

void EnterField (word counter,
		 char fieldString[DATA_LEN],
		 word whichGroup,
		 word whichGroupRec)
{
    RecordStruct	*record;
    GroupStruct		*group;
    DBItem		*index;
    DBMapStruct*	mapPtr;
    DBItem		recordItem, indexItem;
    DBGroup		groupGroup;


    /* Get the record info */
    mapPtr = DBLockMap(HBFile);
    group = (GroupStruct *) (mapPtr + 1);
    groupGroup = group[whichGroup].GS_group;
    /* Extract the index item handle. */
    indexItem = group[whichGroup].GS_indexStart;
    DBUnlock(mapPtr);

    /* get the index struct address */
    index = DBLock(HBFile, groupGroup, indexItem);
    recordItem = index[whichGroupRec];
    DBUnlock(index);

    /* get the record struct address */
    record = DBLock(HBFile, groupGroup, recordItem);

    /* get the field entry data */
    switch (counter) {
       case 1:
          /* if the first field, just copy in in */
	  strcpy(record->RS_data, fieldString);
	  break;
       default:
          /* otherwise add it to the end */
	  strcat(record->RS_data, fieldString);
       } /* end of get field entry switch */

    /* add the end of field marker */
    strcat(record->RS_data, "~"); 

    /* Mark the record item as dirty and unlock it. */
    DBDirty(record);
    DBUnlock(record);

}

/***********************************************************************
 *
 * FUNCTION:	GetGroupAndGrpRec for HBaseProcessClass
 *              (word record, word *curGroup,
 *                   word *curGrpRec, word *curNumGrpRec)
 * CALLED BY:	DeleteRecord, ShowData, MSG_INDEX_DLIST_MONIKER_QUERY,
 *
 *
 * STRATEGY:    
 *		
 *
 ***********************************************************************/

void GetGroupAndGrpRec (word record,
		        word *curGroup,
		        word *curGrpRec,
		        word *curNumGrpRec)
{
    GroupStruct		*group;
    DBMapStruct*	mapPtr;
    word		i, j;


    if (record == 0)  {
       *curGroup = firstGroup;
       *curGrpRec = 0;
       /* Get the # of records in this group */
       mapPtr = DBLockMap(HBFile);
       group = (GroupStruct *) (mapPtr + 1);
       *curNumGrpRec = group[*curGroup].GS_numGroupRecs;
       DBUnlock(mapPtr);
       }
      else {
       record++; /* init for decrementing */
       for (i = 0; i < 27; i++)  {  /* group loop */
          /* Get the # of records in this group */
          mapPtr = DBLockMap(HBFile);
          group = (GroupStruct *) (mapPtr + 1);
	  *curNumGrpRec = group[i].GS_numGroupRecs;
          DBUnlock(mapPtr);
	  for (j = 0; j < *curNumGrpRec; j++)  {  /* record loop */
	     record--;
	     if (record == 0)  {
		*curGroup = i;
		*curGrpRec = j;
	        /* force out */
		j = *curNumGrpRec;
	        i = 27;
	        }
	     } /* end record loop */
          }  /* end group loop */
       }  /* end else */

 }

/***********************************************************************
 *
 * FUNCTION:	DeleteRecord for HBaseProcessClass
 *              (void)
 * CALLED BY:	MSG_DELETE_DATA, MSG_MODIFY_DATA
 *      	
 *
 * STRATEGY:    
 *		
 *
 ***********************************************************************/
void DeleteRecord ()
{
    GroupStruct		*group;
    DBItem		*index;
    DBMapStruct*	mapPtr;
    DBItem		recordItem, indexItem;
    DBGroup		groupGroup;
    word		currentGroup, currentNumGroupRecs;
    word		currentGroupRec, i;


    /* first get the cG and cGR based on currentRecord */
    GetGroupAndGrpRec (currentRecord,
		       &currentGroup,
		       &currentGroupRec,
		       &currentNumGroupRecs);


    /* Get the record info */
    mapPtr = DBLockMap(HBFile);
    group = (GroupStruct *) (mapPtr + 1);
    groupGroup = group[currentGroup].GS_group;
    /* decrement the total number of records */
    (mapPtr->MS_numRecords)--;
    numRecords--;
    /* decrement the number of records in the group */
    group[currentGroup].GS_numGroupRecs--;
    currentNumGroupRecs--;
    /* Extract the index item handle. */
    indexItem = group[currentGroup].GS_indexStart;
    DBDirty(mapPtr);
    DBUnlock(mapPtr);

    /* get the index struct address */
    index = DBLock(HBFile, groupGroup, indexItem);
    /* and the record item handle */
    recordItem = index[currentGroupRec];
    /* resize the index array */
    DBDeleteAt(HBFile, groupGroup, indexItem,
	       currentGroupRec * sizeof(DBItem),
	       sizeof(DBItem));
    DBDirty(index);
    DBUnlock(index);

    /* delete the record DBItem */
    DBFree(HBFile, groupGroup, recordItem);

    /* more to do if we just deleted the only record in the group */
    if (currentNumGroupRecs == 0)  {
       /* Update the group info */
       mapPtr = DBLockMap(HBFile);
       group = (GroupStruct *) (mapPtr + 1);
       group[currentGroup].GS_indexStart = 0;
       group[currentGroup].GS_group = 0;
       DBDirty(mapPtr);
       DBUnlock(mapPtr);
       /* free the group and its index item */
       DBGroupFree(HBFile, groupGroup);

       /* now adjust first/lastGroup if necessary */
       if (numRecords == 0)  {
	  firstGroup = 99;
          lastGroup = 99;
          }
        else if (currentGroup == firstGroup)  {
	  for (i = currentGroup + 1; i <= lastGroup; i++)  {
	     mapPtr = DBLockMap(HBFile);
             group = (GroupStruct *) (mapPtr + 1);
	     currentNumGroupRecs = group[i].GS_numGroupRecs;
             DBUnlock(mapPtr);
	     if (currentNumGroupRecs != 0)  {
		firstGroup = i;
		i = 27;
		}
	     }
          }  /* end of firstGroup if */
	if (currentGroup == lastGroup)  {
           i = currentGroup - 1;
           while (i != 0xffff) {
	      mapPtr = DBLockMap(HBFile);
              group = (GroupStruct *) (mapPtr + 1);
	      currentNumGroupRecs = group[i].GS_numGroupRecs;
              DBUnlock(mapPtr);
	      if (currentNumGroupRecs != 0)  {
		 lastGroup = i;
		 i = 0xffff;
		 }
                else i--;
	      }
           }  /* end of firstGroup if */
       } /* end of more to do if */

    /* re-init the index list */
    @send IndexDList::MSG_GEN_DYNAMIC_LIST_INITIALIZE(numRecords);

    /* reset record if necessary (last record deleted) */
    if (currentRecord == numRecords) currentRecord = numRecords - 1;

}

/***********************************************************************
 *
 * MESSAGE:	MSG_ENTER_DATA for HBaseProcessClass
 *              
 *
 * DESCRIPTION:	Enters record into data base.
 *              
 *
 ***********************************************************************/
@extern method HBaseProcessClass, MSG_ENTER_DATA
{
    GroupStruct		*group;
    DBMapStruct*	mapPtr;
    DBItem		recordItem, testRecordItem, indexItem, codeItem, descrItem;
    RecordStruct	*record, *testRecord;
    DBItem		*index;
    DBGroup		groupGroup;
    word		length, totalLength, groupRecNum, lexVal;
    word		lengthComp, j;
    word		i, whichGroup, whichGroupRec;
    char		fieldString[DATA_LEN];
    char		testString[DATA_LEN];
    Boolean		inserted = FALSE;


    /* first check that there is an entry in Field1 */
    length = @call Field1::MSG_VIS_TEXT_GET_ALL_PTR(fieldString);
    if (length == 0)  {
       NotifyDBox(@Fld1EntryMsg);
       return;
       }

    /* figger out which group this puppy goes in... */
    lexVal = LocalLexicalValueNoCase((byte)fieldString[0]);
      /* lexVal of a is 41 and lexVal of z is 66 */
    if ((lexVal > 40) && (lexVal < 67)) {
       /*  A - Z */
       whichGroup = (lexVal) - 40;
       }
      else if ((lexVal >= 65340) && (lexVal <= 65354)) {
       /* accented a's */
       whichGroup = 1;
       }
      else if ((lexVal >= 65358) && (lexVal <= 65360)) {
       /* accented c's */
       whichGroup = 3;
       }
      else if ((lexVal >= 65364) && (lexVal <= 65371)) {
       /* accented e's */
       whichGroup = 5;
       }
      else if ((lexVal >= 65380) && (lexVal <= 65389)) {
       /* accented i's */
       whichGroup = 9;
       }
      else if ((lexVal >= 65399) && (lexVal <= 65401)) {
       /* accented n's */
       whichGroup = 14;
       }
      else if ((lexVal >= 65403) && (lexVal <= 65417)) {
       /* accented o's */
       whichGroup = 15;
       }
      else if (lexVal == 65426) {
       /* german double s */
       whichGroup = 19;
       }
      else if ((lexVal >= 65430) && (lexVal <= 65438)) {
       /* accented u's */
       whichGroup = 21;
       }
      else if ((lexVal >= 65447) && (lexVal <= 65450)) {
       /* accented y's */
       whichGroup = 25;
       }
      else {
       /* other */
       whichGroup = 0;
       }

    /* update 1st/last group if necc */
    if (firstGroup == 99)  {
       firstGroup = whichGroup;
       lastGroup = whichGroup;
       }
      else if (whichGroup < firstGroup)  {
	  firstGroup = whichGroup;
       }
      else if (whichGroup > lastGroup) {
       lastGroup = whichGroup;
       }

    /* Lock the map */
    mapPtr = DBLockMap(HBFile);

    group = (GroupStruct *) (mapPtr + 1);
    groupGroup = group[whichGroup].GS_group;
    groupRecNum = group[whichGroup].GS_numGroupRecs;
    group[whichGroup].GS_numGroupRecs++;

    /* allocate the group if we need to */
    if (groupGroup == 0)  {
       groupGroup = DBGroupAlloc(HBFile);
       group[whichGroup].GS_group = groupGroup;
       /* and the index item */
       indexItem = DBAlloc(HBFile, groupGroup, sizeof(DBItem));
       group[whichGroup].GS_indexStart = indexItem;
       }
      else { /* just get the index item */
       indexItem = group[whichGroup].GS_indexStart;
       }

    /* Increase the number of records */
    (mapPtr->MS_numRecords)++;
    numRecords++;
    /* and save 1st/last group info */
    mapPtr->MS_firstGroup = firstGroup;
    mapPtr->MS_lastGroup = lastGroup;
    /* Mark the map item as dirty */
    DBDirty(mapPtr);
    DBUnlock(mapPtr);


    /* create the new record DBItem */
    recordItem = DBAlloc(HBFile, groupGroup, sizeof(RecordStruct));

    /* and the new code DBItem */
    codeItem = DBAlloc(HBFile, groupGroup, 3000);

    /* and the new descript DBItem */
    descrItem = DBAlloc(HBFile, groupGroup, 250);

    record = DBLock(HBFile, groupGroup, recordItem);
    record->RS_code = codeItem;
    record->RS_description = descrItem;
    DBDirty(record);
    DBUnlock(record);

    /* If it is the only record in the group just put it in...
     * the index item has just been allocated with the first
     * DBItem place waiting...
     */
    if (groupRecNum == 0) {
       index = DBLock(HBFile, groupGroup, indexItem);
	  index[groupRecNum] = recordItem;
       DBDirty(index);
       DBUnlock(index);
       whichGroupRec = groupRecNum;
       }

    /* otherwise put it in the right place... */
    else  {
       /* cycle thru the items in the group's index */
       for (j = 0; j < groupRecNum; j++)  {
          /* get the record to compare */
	  index = DBLock(HBFile, groupGroup, indexItem);
	  testRecordItem = index[j];
	  DBUnlock(index);
	  testRecord = DBLock(HBFile, groupGroup, testRecordItem);
          /* get the field1 data */
          i = 0;
	  while (testRecord->RS_data[i] != '~') {
	     testString[i] = testRecord->RS_data[i];
             i++;
	     }  /* end of data read while */
	  testString[i] = NULL;
	  DBUnlock(testRecord);      
	  lengthComp = strlen(testString);
	  /* get the longer string length */
	  if (lengthComp > length) length = lengthComp;
	  /* now compare the strings...
           * is the new one before the one in the jth element?
	   */
	  if (LocalCmpStrings(fieldString, testString, length) < 0) {
	     /* yes - insert it here! */
	     DBInsertAt(HBFile, groupGroup, indexItem,
			(j * (sizeof(DBItem))), sizeof(DBItem));
	     inserted = TRUE;
             /* put the new record's item handle in the index */
             index = DBLock(HBFile, groupGroup, indexItem);
	     index[j] = recordItem;
             DBDirty(index);
             DBUnlock(index);
	     whichGroupRec = j; 
	     j = groupRecNum; /* force out of loop */
	     }  /* end of insert it here if */
	  }  /* end of cycle thru for */

          /* if it hasn't been inserted just add to end */
	  if (!inserted) {
	     DBReAlloc(HBFile, groupGroup, indexItem,
		      ((groupRecNum + 1) * sizeof(DBItem)));
		index = DBLock(HBFile, groupGroup, indexItem);
	     index[groupRecNum] = recordItem;
	     DBDirty(index);
             DBUnlock(index);
	     whichGroupRec = groupRecNum;
	     }  /* end of add to end if */

       }  /* end insert else */


    /* dope out the current record number... */
    /* take care of this group...*/
    currentRecord = whichGroupRec;
    /* now get all previous groups */ 
    for (i = 0; i < whichGroup; i++) {
       /* Get the record info */
       mapPtr = DBLockMap(HBFile);
       group = (GroupStruct *) (mapPtr + 1);
       currentRecord += group[i].GS_numGroupRecs;
       DBUnlock(mapPtr);
       }

    /* Now that we have the record alloc'd we can
     * retrieve the field info to put in it.
     * Do this in a loop to get all the fields...
     */
    /* init the total length */
    totalLength = 0;
    for (i = 1; i < 5; i++)  {
       /* get the field entry data */
       switch (i) {
	  case 1:
	     length = @call Field1::MSG_VIS_TEXT_GET_ALL_PTR(fieldString);
	  break;
	  case 2:
	     length = @call Field2::MSG_VIS_TEXT_GET_ALL_PTR(fieldString);
	  break;
	  case 3:
		length = @call Field3::MSG_VIS_TEXT_GET_ALL_PTR(fieldString);
	  break;
	  case 4:
		length = @call Field4::MSG_VIS_TEXT_GET_ALL_PTR(fieldString);
	  break;
	  } /* end of get field entry switch */

	  /* update the total length */
	  totalLength += (length + 1); /* 1 for null term */

	  /* add the ith field to the record */
	  EnterField(i, fieldString, whichGroup, whichGroupRec);

    } /* end of field entry for */

    /* now add the usage field DBItem */
    @call Field6::MSG_VIS_TEXT_GET_ALL_DB_ITEM(HBFile, groupGroup, descrItem);

    /* now add the code field DBItem */
    @call Field7::MSG_VIS_TEXT_GET_ALL_DB_ITEM(HBFile, groupGroup, codeItem);


    /* resize the new record DBItem */
    DBReAlloc(HBFile, groupGroup, recordItem, (totalLength + 6));
	 /* the 6 is for the code & descr DBItems */

    /* update the list */
    @send IndexDList::MSG_GEN_DYNAMIC_LIST_ADD_ITEMS(currentRecord,1);
    /* and get ready for next entry */
    if (!isMod) {
	  @call process::MSG_NEW_RECORD();
	  }
    else  {
	  isMod = FALSE;
	  }
}

/***********************************************************************
 *
 * MESSAGE:	MSG_MODIFY_DATA for HBaseProcessClass
 *              
 *
 * DESCRIPTION:	Modifies a record in the data base.
 *              
 *
 ***********************************************************************/
@extern method HBaseProcessClass, MSG_MODIFY_DATA
{

    /* put up an Are you sure box */
    if (AckDBox(0, @ModRecMsg) == ACK_NO) return;

    /* delete it */
    DeleteRecord();

    isMod = TRUE;

    /* add back as new */
    @call process::MSG_ENTER_DATA();

    /* tell the list what to show */
    @send IndexDList::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(currentRecord, FALSE);


}

/***********************************************************************
 *
 * MESSAGE:	MSG_DELETE_DATA for HBaseProcessClass
 *              
 *
 * DESCRIPTION:	Deletes a record from the data base.
 *              
 *
 ***********************************************************************/
@extern method HBaseProcessClass, MSG_DELETE_DATA
{

    /* put up an Are you sure box */
    if (AckDBox(0, @DelRecMsg) == ACK_NO) return;

    /* delete it */
    DeleteRecord();

    if (numRecords == 0)  {
       /* put up new form */
       @call process::MSG_NEW_RECORD();
	  }
      else  { 
       /* show the new currentRecord */
	  ShowData();
       }

}

/***********************************************************************
 *
 * MESSAGE:	MSG_NEW_RECORD for HBaseProcessClass
 *              
 *
 * DESCRIPTION:	Puts a blank record on the screen.
 *              
 *
 ***********************************************************************/
@extern method HBaseProcessClass, MSG_NEW_RECORD
{

    /* clear the field display */
    ClearData();

    /* set the new current record */
    currentRecord = numRecords;

    /* set the buttons */
    @send NewButton::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
    @send DeleteButton::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
    @send ModButton::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
    @send CopyCodeButton::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
    @send EnterButton::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);

    /* set list selection to none */
    @send IndexDList::MSG_GEN_ITEM_GROUP_SET_NONE_SELECTED(FALSE);

    /* send focus to field 1 */
    @send Field1::MSG_META_GRAB_FOCUS_EXCL();


}

/***********************************************************************
 *
 * MESSAGE:	MSG_COPY_CODE_TO_CLIP for HBaseProcessClass
 *              
 *
 * DESCRIPTION:	Copies the code block to the clipboard.
 *              
 *
 ***********************************************************************/
@extern method HBaseProcessClass, MSG_COPY_CODE_TO_CLIP
{

    @send Field7::MSG_META_GRAB_FOCUS_EXCL();
    @send Field7::MSG_VIS_TEXT_SELECT_ALL();

    @send Field7::MSG_META_CLIPBOARD_COPY();

    @send Field7::MSG_VIS_TEXT_SELECT_START(); 

}

