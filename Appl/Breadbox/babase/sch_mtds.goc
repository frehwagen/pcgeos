/*
 **************************************************************************
 *  FILE:		sch_mtds.goc
 *  PROJECT:		HomeBase
 *  DESCRIPTION:	This file has methods for the search
 *			functions
 **************************************************************************
 */
/*
 ***************************************************************************
 *		Include files
 ***************************************************************************
 */

@include "hbase.goh"

/*
 ***************************************************************************
 *		Class & Message Definitions
 ***************************************************************************
 */

/* Declare UI object references to those in hbase.goc */
 @extern object Field1;
 @extern object Field2;
 @extern object Field3;
 @extern object Field4;
 @extern object Field6;
 @extern object Field7;
 @extern object Fields;
 @extern object FieldsGroup;
 @extern object MainGroup;

@extern object HBaseApp;
@extern object SearchDBox;
@extern object SDBSearchText;
@extern object SDBFieldOpts;
@extern object SDBCaseOpts;
@extern object SDBSearch;
@extern object SDBSearchNext;

@extern chunk SrchNotFoundMsg;

/* init globals for the Search Next functionality */
word SNChar = 0;
word SNField = 1;
word SNRecord = 0; 

/****************************************************************************
 *		Code for HBaseProcessClass Search
 ***************************************************************************
 */

/***********************************************************************
 *
 * MESSAGE:	MSG_SEARCH_FILEDS for HBaseProcessClass
 *              (int whichSearch)
 *
 * DESCRIPTION:
 *
 *
 *
 *
 ***********************************************************************/

@extern method HBaseProcessClass, MSG_SEARCH_FIELDS
{
    char		searchStr[DATA_LEN];
    word		length, i;
    word		caseSelect, firstSelect;
    RecordStruct	*record;
    GroupStruct		*group;
    DBItem		*index, descrItem, codeItem;
    char*			dcText;
    DBMapStruct* 	mapPtr;
    DBItem		recordItem, indexItem;
    DBGroup		groupGroup;
    word		j, k, passField, lastField;
    sword		match;
    word		currentGroup, currentGroupRec;
    word		bufCount, fieldCount, currentNumGroupRecs;
    char		strBuffer[(10 * DATA_LEN)];
    char		fieldString[DATA_LEN];


    /*get the search string */
    length = @call SDBSearchText::MSG_VIS_TEXT_GET_ALL_PTR(searchStr);
    if (length == 0) return;

    /* now see if we're to ignore case... */
    caseSelect = @call SDBCaseOpts::MSG_GEN_ITEM_GROUP_GET_SELECTION();
    /* see if we're to search 1st field only... */
    firstSelect = @call SDBFieldOpts::MSG_GEN_ITEM_GROUP_GET_SELECTION();

    /* set match to none found */
    match = 1;

    /* is this a FIRST search? */
    if (whichSearch == FIRST) SNRecord = 0; 

    /* mark app busy */
    @send HBaseApp::MSG_GEN_APPLICATION_MARK_BUSY();

    /* start the search */
    for (i = SNRecord; i < numRecords; i++)  {
       /* first get the cG and cGR based on currentRecord */
       GetGroupAndGrpRec (i,
		          &currentGroup,
		          &currentGroupRec,
		          &currentNumGroupRecs);

       /* Get the record info */
       mapPtr = DBLockMap(HBFile);
       group = (GroupStruct *) (mapPtr + 1);
       groupGroup = group[currentGroup].GS_group;
       /* Extract the item handle for the record. */
       indexItem = group[currentGroup].GS_indexStart;
       DBUnlock(mapPtr);

       /* get the index array address */
       index = DBLock(HBFile, groupGroup, indexItem);
       recordItem = index[currentGroupRec];
       DBUnlock(index);

       /* get the record struct address */
       record = DBLock(HBFile, groupGroup, recordItem);
       /* copy the record to the buffer */
	  strcpy(strBuffer, record->RS_data);
	  /* and grab the descr and code items handles if appl */
	  if (firstSelect != S_FIELD)  {
		descrItem = record->RS_description;
		codeItem = record->RS_code;
		}
       DBUnlock(record);

       /* is this a FIRST search? */
       if (whichSearch == FIRST) SNField = 1; 

       /* check for first field only search */
	  lastField = 4;
	  if (firstSelect == S_FIELD) lastField = 1;

       /* now cycle the data into the fieldString */
       bufCount = 0;
       passField = 1;
       /* first - count past already searched fields */
       while (passField < SNField)  {
		if (strBuffer[bufCount] == '~') passField++;
	     bufCount++;
          }
       /* and get the next field info */
	  for (j = SNField; j <= lastField; j++)  {
		for (fieldCount = 0; fieldCount < DATA_LEN; fieldCount++)  {
		   if (strBuffer[bufCount] != '~')  {  /* fill fieldStr */
			 fieldString[fieldCount] = strBuffer[bufCount];
			 bufCount++;
			 }
		   else  {   /* end of field */
			 fieldString[fieldCount] = NULL;
			 bufCount++;

			 /* check lengths - no match if searchStr > dataStr */
			 if (strlen(fieldString) >= length) {
			    /* is this a FIRST search? */
			    if (whichSearch == FIRST) SNChar = 0;

			    /* check for match */
			    for (k = SNChar; k <= (strlen(fieldString) - length); k++) {
				  /* compare strings (case or not) */
				  if (caseSelect != S_CASE)
					match = LocalCmpStrings(searchStr,
						 &fieldString[k],
						 length);
				  else
					match = LocalCmpStringsNoCase(searchStr,
						 &fieldString[k],
						 length);

				  if (match == 0)  { /* found one! */
					@send SDBSearchNext::MSG_GEN_SET_ENABLED(VUM_NOW);
					@send HBaseApp::MSG_GEN_APPLICATION_MARK_NOT_BUSY();
					/* save our search indices here */
					SNChar = k + 1;
					SNField = j;
					SNRecord = i;
					/* show the found record */
					currentRecord = i;
					ShowData();

					/* try hi-liting the found string here */
					switch (j) {
					   case 1:
						 @send Field1::MSG_META_GRAB_FOCUS_EXCL();
						 @send Field1::MSG_META_GRAB_TARGET_EXCL();
						 @send Field1::MSG_VIS_TEXT_SELECT_RANGE_SMALL(
									k,
									k + length);
						 break;
					   case 2:
						 @send Field2::MSG_META_GRAB_FOCUS_EXCL();
						 @send Field2::MSG_META_GRAB_TARGET_EXCL();
						 @send Field2::MSG_VIS_TEXT_SELECT_RANGE_SMALL(
									k,
									k + length);
						 break;
					   case 3:
						 @send Field3::MSG_META_GRAB_FOCUS_EXCL();
						 @send Field3::MSG_META_GRAB_TARGET_EXCL();
						 @send Field3::MSG_VIS_TEXT_SELECT_RANGE_SMALL(
									k,
									k + length);
						 break;
					   case 4:
						 @send Field4::MSG_META_GRAB_FOCUS_EXCL();
						 @send Field4::MSG_META_GRAB_TARGET_EXCL();
						 @send Field4::MSG_VIS_TEXT_SELECT_RANGE_SMALL(
									k,
									k + length);
						 break;
					   } /* end hi-lite switch */

					/* and exit method */
					return;

					}  /* end of found if */

				  }  /* end of check for */

			    /* reset SNChar */
			    SNChar = 0;

			    }  /* end of lengths check if */

			 fieldCount = DATA_LEN; /* force exit loop */
			 }  /* end field else */

		   } /* end this field for */

		} /* end cycle thru fields for */

		/* here's where we would put the search of the
		 * descr and code fields
		 */
	  if (SNField < 6) SNField = 6;
	  for (j = SNField; j <= 7; j++)  {
		/* check lengths - no match if searchStr > dataStr */
		if (j==6) dcText = (char *) DBLock(HBFile, groupGroup, descrItem);
		else dcText = (char *) DBLock(HBFile, groupGroup, codeItem);
		if (strlen(dcText) >= length) {
		   /* is this a FIRST search? */
		   if (whichSearch == FIRST) SNChar = 0;

		   /* check for match */
		   for (k = SNChar; k <= (strlen(dcText) - length); k++) {
			 /* compare strings (case or not) */
			 if (caseSelect != S_CASE)
					match = LocalCmpStrings(searchStr,
						 &dcText[k],
						 length);
			 else
					match = LocalCmpStringsNoCase(searchStr,
						 &dcText[k],
						 length);

			 if (match == 0)  { /* found one! */
			    @send SDBSearchNext::MSG_GEN_SET_ENABLED(VUM_NOW);
			    @send HBaseApp::MSG_GEN_APPLICATION_MARK_NOT_BUSY();
			    /* save our search indices here */
			    SNChar = k + 1;
			    SNField = j;
			    SNRecord = i;
			    /* show the found record */
			    currentRecord = i;
			    ShowData();

			    /* try hi-liting the found string here */
			    switch (j) {
				  case 6:
					@send Field6::MSG_META_GRAB_FOCUS_EXCL();
					@send Field6::MSG_META_GRAB_TARGET_EXCL();
					@send Field6::MSG_VIS_TEXT_SELECT_RANGE_SMALL(
									k,
									k + length);
					break;
				  case 7:
					@send Field7::MSG_META_GRAB_FOCUS_EXCL();
					@send Field7::MSG_META_GRAB_TARGET_EXCL();
					@send Field7::MSG_VIS_TEXT_SELECT_RANGE_SMALL(
									k,
									k + length);
					break;
				  } /* end hi-lite switch */

			    /* and exit method */
			    DBUnlock(dcText);
			    return;

			    }  /* end of found if */

			 }  /* end of check for */

			 /* reset SNChar */
			 SNChar = 0;

		   }  /* end of lengths check if */
		   DBUnlock(dcText);

		} /* end cycle thru last two fields for */



	  /* reset SNField */
	  SNField = 1;

	  } /* end of loop thru records for */

    /* reset SNRecord */
    SNRecord = 0;

    if (match != 0)  { /* no match found */
	  /* tell user */
	  NotifyDBox(@SrchNotFoundMsg);
	  /* and reset search indices */
	  SNChar = 0;
	  SNField = 1;
	  /* and disable the search next button */
	  @send SDBSearchNext::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
	  @send HBaseApp::MSG_GEN_APPLICATION_MARK_NOT_BUSY();
	  }

}

/***********************************************************************
 *
 * MESSAGE:	MSG_META_KBD_CHAR for TextEnableClass
 *
 *
 * DESCRIPTION:   replaces the broken (in the 2.x SDK)
 *                ATTR_GEN_TEXT_SET_OBJECT_ENABLED_WHEN_TEXT_EXISTS
 *
 *
 *
 ***********************************************************************/
@extern method TextEnableClass, MSG_META_KBD_CHAR
{
 char		txtString[DATA_LEN];


    @callsuper();

    /* is there text? */
    if (@call self::MSG_VIS_TEXT_GET_ALL_PTR(txtString))
			@send pself->TE_button::MSG_GEN_SET_ENABLED(VUM_NOW);
    else  {
	  @send pself->TE_button::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
	  @send SDBSearchNext::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
	  }
	  
}


