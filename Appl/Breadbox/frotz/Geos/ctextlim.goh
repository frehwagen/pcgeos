
    @classdecl GenTextLimitClass ;

@method GenTextLimitClass, MSG_GEN_TEXT_LIMIT_TRIM_LINES
{
    word lines ;
    word maxLines ;
    word cutLines ;
    optr lineInfo ;
    VisTextInstance *p_vis ;
    LineInfo *p_line ;
    word size ;
    word count ;
    VisTextRange selection ;
    dword numChars ;
    word lineNum ;

    maxLines = pself->GTXLI_maxLines ;
    cutLines = pself->GTXLI_cutLines ;

    /* Get the vis part and find our lines */
    p_vis = ObjDerefVis(oself) ;
    lineInfo = ConstructOptr(OptrToHandle(oself), p_vis->VTI_lines) ;

    /* How many lines are there right now? */
    lines = ChunkArrayGetCount(lineInfo) ;

    if (lines > maxLines)  {
        /* Don't show any changes until we are completely done */
//        @call oself::MSG_META_SUSPEND() ;

        numChars = 0 ;
        lineNum = 0 ;
        while (lines > cutLines)  {
            /* We have at least one line over sized */
            /* Delete the first line, but first find how long it is */
            p_line = ChunkArrayElementToPtr(lineInfo, lineNum, &size) ;
            count = p_line->LI_count.WAAH_low ;
            if (count == 0)
                break ;
            numChars += count ;
            lineNum++ ;
            lines-- ;
        }
        if (numChars)  {
            @call oself::MSG_VIS_TEXT_GET_SELECTION_RANGE(&selection);
            @call oself::MSG_VIS_TEXT_SELECT_RANGE_SMALL(0, numChars) ;
            @call oself::MSG_VIS_TEXT_DELETE_SELECTION();
            @call oself::MSG_VIS_TEXT_SELECT_RANGE(
                      selection.VTR_end - numChars,
                      selection.VTR_start - numChars);
        }

//        @call oself::MSG_META_UNSUSPEND() ;
    }
}

@method GenTextLimitClass, MSG_VIS_TEXT_APPEND_BLOCK
{
    @callsuper() ;
    @call oself::MSG_GEN_TEXT_LIMIT_TRIM_LINES() ;
}

@method GenTextLimitClass, MSG_VIS_TEXT_APPEND_PTR
{
    @callsuper() ;
    @call oself::MSG_GEN_TEXT_LIMIT_TRIM_LINES() ;
}

