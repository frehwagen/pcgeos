/*
 * Copyright 2020   Jirka Kunze
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

@include <stdapp.goh>
#include "type_test_function.h"

@class TypeTestProcessClass, GenProcessClass;
@endc;


@classdecl TypeTestProcessClass, neverSaved;


@start AppResource;

@object GenApplicationClass TypeTestApp = {

    GI_visMoniker = list { @TypeTestMoniker };
    GI_comp = @TypeTestPrimary;
    gcnList( MANUFACTURER_ID_GEOWORKS, GAGCNLT_WINDOWS ) = @TypeTestPrimary;
}

@visMoniker TypeTestMoniker = "Datatype Test";

@end AppResource;


@start Interface;

@object GenPrimaryClass TypeTestPrimary = {
    
    GI_comp = @TypeTestResultGlyph_Float,
                @TypeTestResultGlyph_Double,
                @TypeTestResultGlyph_LongDouble;
}

@object GenGlyphClass TypeTestResultGlyph_Float = {
    
    GI_visMoniker = "size of datatypes untested";
}

@object GenGlyphClass TypeTestResultGlyph_Double = {
    
    GI_visMoniker = "function FloatPushNumber and FloatPopNumber untested";
}

@object GenGlyphClass TypeTestResultGlyph_LongDouble = {
    
    GI_visMoniker = "function Float untested";
}

@end Interface;


@method TypeTestProcessClass, MSG_GEN_PROCESS_OPEN_APPLICATION {
    
    @callsuper();
    
    if( test_datatype_float() )
        @call TypeTestResultGlyph_Float::MSG_GEN_REPLACE_VIS_MONIKER_TEXT( "datatype float ok.", VUM_DELAYED_VIA_UI_QUEUE);
    else
        @call TypeTestResultGlyph_Float::MSG_GEN_REPLACE_VIS_MONIKER_TEXT( "datatype float nok!", VUM_DELAYED_VIA_UI_QUEUE);

    if( test_datatype_double() )
        @call TypeTestResultGlyph_Double::MSG_GEN_REPLACE_VIS_MONIKER_TEXT( "datatype double ok.", VUM_DELAYED_VIA_UI_QUEUE);
    else
        @call TypeTestResultGlyph_Double::MSG_GEN_REPLACE_VIS_MONIKER_TEXT( "datatype double nok!", VUM_DELAYED_VIA_UI_QUEUE);
        
    if( test_datatype_longdouble() )
        @call TypeTestResultGlyph_LongDouble::MSG_GEN_REPLACE_VIS_MONIKER_TEXT( "datatype long double ok.", VUM_DELAYED_VIA_UI_QUEUE);
    else
        @call TypeTestResultGlyph_LongDouble::MSG_GEN_REPLACE_VIS_MONIKER_TEXT( "datatype long double nok!", VUM_DELAYED_VIA_UI_QUEUE);
}
