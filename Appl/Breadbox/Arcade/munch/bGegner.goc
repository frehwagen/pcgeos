@include <stdapp.goh>
@include "max.goh"
@include "sprites.goh"
extern byte laby[20*11];
byte reflected1,reflected2,reflected3,reflected4;

Boolean istHindernis(int x, int y)
{ Boolean erg=FALSE;
  byte was=laby[labyPos(x,y)];
  if ((was==istHolz) || (was==istStahl)) erg=TRUE;
  return(erg);
}

void detect1Munch(void)
{
  if (reflected1>0) return;
  if ((geg1X%31<=bewDistG) && (geg1Y%29<=bewDistG))
  { if ((geg1X-bewDistG<=munchX) && (geg1X+bewDistG>=munchX))
    { geg1X=munchX;
      reflected1+=4;
      if (munchY<geg1Y)
      {
        if (!istHindernis(geg1X,geg1Y-bewDistG)) geg1Dir=1;
      }
      else
      {
        if (!istHindernis(geg1X,geg1Y+28+bewDistG)) geg1Dir=3;
      }
    }
    if ((geg1Y-bewDistG<=munchY) && (geg1Y+bewDistG>=munchY))
    { geg1Y=munchY;
      reflected1+=4;
      if (munchX<geg1X)
      {
        if (!istHindernis(geg1X-bewDistG,geg1Y)) geg1Dir=0;
      }
      else
      {
        if (!istHindernis(geg1X+30+bewDistG,geg1Y)) geg1Dir=2;
      }
    }
  }
}

void detect2Munch(void)
{
  if (reflected2>0) return;
  if ((geg2X%31<=bewDistG) && (geg2Y%29<=bewDistG))
  { if ((geg2X-bewDistG<=munchX) && (geg2X+bewDistG>=munchX))
    { geg2X=munchX;
      reflected2+=4;
      if (munchY<geg2Y)
      {
        if (!istHindernis(geg2X,geg2Y-bewDistG)) geg2Dir=2;
      }
      else
      {
        if (!istHindernis(geg2X,geg2Y+28+bewDistG)) geg2Dir=0;
      }
    }
    if ((geg2Y-bewDistG<=munchY) && (geg2Y+bewDistG>=munchY))
    { geg2Y=munchY;
      reflected2+=4;
      if (munchX<geg2X)
      {
        if (!istHindernis(geg2X-bewDistG,geg2Y)) geg2Dir=3;
      }
      else
      {
        if (!istHindernis(geg2X+30+bewDistG,geg2Y)) geg2Dir=1;
      }
    }
  }
}

void detect3Munch(void)
{
  if (reflected3>0) return;
  if ((geg3X%31<=bewDistG) && (geg3Y%29<=bewDistG))
  { if ((geg3X-bewDistG<=munchX) && (geg3X+bewDistG>=munchX))
    { geg3X=munchX;
      reflected3+=4;
      if (munchY<geg3Y)
      {
        if (!istHindernis(geg3X,geg3Y-bewDistG)) geg3Dir=1;
      }
      else
      {
        if (!istHindernis(geg3X,geg3Y+28+bewDistG)) geg3Dir=3;
      }
    }
    if ((geg3Y-bewDistG<=munchY) && (geg3Y+bewDistG>=munchY))
    { geg3Y=munchY;
      reflected3+=4;
      if (munchX<geg3X)
      {
        if (!istHindernis(geg3X-bewDistG,geg3Y)) geg3Dir=0;
      }
      else
      {
        if (!istHindernis(geg3X+30+bewDistG,geg3Y)) geg3Dir=2;
      }
    }
  }
}

void detect4Munch(void)
{
  if (reflected4>0) return;
  if ((geg4X%31<=bewDistG) && (geg4Y%29<=bewDistG))
  { if ((geg4X-bewDistG<=munchX) && (geg4X+bewDistG>=munchX))
    { geg4X=munchX;
      reflected4+=4;
      if (munchY<geg4Y)
      {
        if (!istHindernis(geg4X,geg4Y-bewDistG)) geg4Dir=2;
      }
      else
      {
        if (!istHindernis(geg4X,geg4Y+28+bewDistG)) geg4Dir=0;
      }
    }
    if ((geg4Y-bewDistG<=munchY) && (geg4Y+bewDistG>=munchY))
    { geg4Y=munchY;
      reflected4+=4;
      if (munchX<geg4X)
      {
        if (!istHindernis(geg4X-bewDistG,geg4Y)) geg4Dir=3;
      }
      else
      {
        if (!istHindernis(geg4X+30+bewDistG,geg4Y)) geg4Dir=1;
      }
    }
  }
}

void bewegeGegner(void)
{ byte oldDir=geg1Dir;
  if (reflected1>0) reflected1--;
  if (reflected2>0) reflected2--;
  if (reflected3>0) reflected3--;
  if (reflected4>0) reflected4--;

  /*Gegner 1 bewegen*/
  detect1Munch();
  if (geg1Act) switch (geg1Dir)
  { case 0: if (geg1X>0)
            { geg1X-=bewDistG;
              if (geg1X<0) geg1X=0;
              if (istHindernis(geg1X-bewDistG,geg1Y))
	        { geg1Dir++;
		  geg1X=((geg1X/31))*31;
		}
            }
	    else geg1Dir++;
            if (geg1Dir!=0) if (istHindernis(geg1X,geg1Y-bewDistG)) geg1Dir++;
	    break;
    case 1: if (geg1Y>0)
            { geg1Y-=bewDistG;
              if (geg1Y<0) geg1Y=0;
              if (istHindernis(geg1X,geg1Y-bewDistG))
	        { geg1Dir++;
                  geg1Y=((geg1Y/29))*29;
		}
            }
	    else geg1Dir++;
            if (geg1Dir!=1) if (istHindernis(geg1X+30+bewDistG,geg1Y)) geg1Dir++;
	    break;
    case 2: if (geg1X+31<maxX)
    	    { geg1X+=bewDistG;
              if (geg1X+31>maxX) geg1X=maxX-31;
              if (istHindernis(geg1X+30+bewDistG,geg1Y))
	        { geg1Dir++;
                  if (geg1X%31==0) geg1X=((geg1X/31))*31;/*auch +1?*/
                  else geg1X=((geg1X/31)+1)*31;
                }
            }
	    else geg1Dir++;
            if (geg1Dir!=2) if (istHindernis(geg1X,geg1Y+28+bewDistG)) geg1Dir++;
	    break;
    case 3: if (geg1Y+29<maxY)
    	    { geg1Y+=bewDistG;
              if (geg1Y+29>maxY) geg1Y=maxY-29;
              if (istHindernis(geg1X,geg1Y+28+bewDistG))
	        { geg1Dir++;
                  if (geg1Y%29==0) geg1Y=((geg1Y/29))*29;/*auch +1?*/
                  else geg1Y=((geg1Y/29)+1)*29;
		}
            }
	    else geg1Dir++;
            if (geg1Dir!=3) if (istHindernis(geg1X-bewDistG,geg1Y)) geg1Dir++;
	    break;
  }
  if (geg1Dir!=oldDir) reflected1+=4;
  geg1Dir=geg1Dir%4;
  /*Gegner 2 bewegen*/
  oldDir=geg2Dir;
  detect2Munch();
  if (geg2Act) switch (geg2Dir)
  { case 3: if (geg2X>0)
            { geg2X-=bewDistG;
              if (geg2X<0) geg2X=0;
              if (istHindernis(geg2X-bewDistG,geg2Y))
	        { geg2Dir++;
                  geg2X=((geg2X/31))*31;
		}
            }
	    else geg2Dir++;
            if (geg2Dir!=3) if (istHindernis(geg2X,geg2Y+28+bewDistG)) geg2Dir++;
	    break;
    case 2: if (geg2Y>0)
            { geg2Y-=bewDistG;
              if (geg2Y<0) geg2Y=0;
              if (istHindernis(geg2X,geg2Y-bewDistG))
	        { geg2Dir++;
                  geg2Y=((geg2Y/29))*29;
		}
            }
	    else geg2Dir++;
            if (geg2Dir!=2) if (istHindernis(geg2X-bewDistG,geg2Y)) geg2Dir++;
	    break;
    case 1: if (geg2X+31<maxX)
    	    { geg2X+=bewDistG;
              if (geg2X+31>maxX) geg2X=maxX-31;
              if (istHindernis(geg2X+30+bewDistG,geg2Y))
	        { geg2Dir++;
                  if (geg2X%31==0) geg2X=((geg2X/31))*31;/*auch +1?*/
                  else geg2X=((geg2X/31)+1)*31;
                }
            }
	    else geg2Dir++;
            if (geg2Dir!=1) if (istHindernis(geg2X,geg2Y-bewDistG)) geg2Dir++;
	    break;
    case 0: if (geg2Y+29<maxY)
    	    { geg2Y+=bewDistG;
              if (geg2Y+29>maxY) geg2Y=maxY-29;
              if (istHindernis(geg2X,geg2Y+28+bewDistG))
	        { geg2Dir++;
                  if (geg2Y%29==0) geg2Y=((geg2Y/29))*29;/*auch +1?*/
                  else geg2Y=((geg2Y/29)+1)*29;
		}
            }
	    else geg2Dir++;
            if (geg2Dir!=0) if (istHindernis(geg2X+30+bewDistG,geg2Y)) geg2Dir++;
	    break;
  }
  if (geg2Dir!=oldDir) reflected2+=4;
  geg2Dir=geg2Dir%4;
  /*Gegner 3 bewegen*/
  oldDir=geg3Dir;
  detect3Munch();
  if (geg3Act) switch (geg3Dir)
  { case 0: if (geg3X>0)
            { geg3X-=bewDistG;
              if (geg3X<0) geg3X=0;
              if (istHindernis(geg3X-bewDistG,geg3Y))
	        { geg3Dir++;
		  geg3X=((geg3X/31))*31;
		}
            }
	    else geg3Dir++;
            if (geg3Dir!=0) if (istHindernis(geg3X,geg3Y-bewDistG)) geg3Dir++;
	    break;
    case 1: if (geg3Y>0)
            { geg3Y-=bewDistG;
              if (geg3Y<0) geg3Y=0;
              if (istHindernis(geg3X,geg3Y-bewDistG))
	        { geg3Dir++;
                  geg3Y=((geg3Y/29))*29;
		}
            }
	    else geg3Dir++;
            if (geg3Dir!=1) if (istHindernis(geg3X+30+bewDistG,geg3Y)) geg3Dir++;
	    break;
    case 2: if (geg3X+31<maxX)
    	    { geg3X+=bewDistG;
              if (geg3X+31>maxX) geg3X=maxX-31;
              if (istHindernis(geg3X+30+bewDistG,geg3Y))
	        { geg3Dir++;
                  if (geg3X%31==0) geg3X=((geg3X/31))*31;/*auch +1?*/
                  else geg3X=((geg3X/31)+1)*31;
                }
            }
	    else geg3Dir++;
            if (geg3Dir!=2) if (istHindernis(geg3X,geg3Y+28+bewDistG)) geg3Dir++;
	    break;
    case 3: if (geg3Y+29<maxY)
    	    { geg3Y+=bewDistG;
              if (geg3Y+29>maxY) geg3Y=maxY-29;
              if (istHindernis(geg3X,geg3Y+28+bewDistG))
	        { geg3Dir++;
                  if (geg3Y%29==0) geg3Y=((geg3Y/29))*29;/*auch +1?*/
                  else geg3Y=((geg3Y/29)+1)*29;
		}
            }
	    else geg3Dir++;
            if (geg3Dir!=3) if (istHindernis(geg3X-bewDistG,geg3Y)) geg3Dir++;
	    break;
  }
  if (geg3Dir!=oldDir) reflected3+=4;
  geg3Dir=geg3Dir%4;
  /*Gegner 4 bewegen*/
  oldDir=geg4Dir;
  detect4Munch();
  if (geg4Act) switch (geg4Dir)
  { case 3: if (geg4X>0)
            { geg4X-=bewDistG;
              if (geg4X<0) geg4X=0;
              if (istHindernis(geg4X-bewDistG,geg4Y))
	        { geg4Dir++;
                  geg4X=((geg4X/31))*31;
		}
            }
	    else geg4Dir++;
            if (geg4Dir!=3) if (istHindernis(geg4X,geg4Y+bewDistG+28)) geg4Dir++;
	    break;
    case 2: if (geg4Y>0)
            { geg4Y-=bewDistG;
              if (geg4Y<0) geg4Y=0;
              if (istHindernis(geg4X,geg4Y-bewDistG))
	        { geg4Dir++;
                  geg4Y=((geg4Y/29))*29;
		}
            }
	    else geg4Dir++;
            if (geg4Dir!=2) if (istHindernis(geg4X-bewDistG,geg4Y)) geg4Dir++;
	    break;
    case 1: if (geg4X+31<maxX)
    	    { geg4X+=bewDistG;
              if (geg4X+31>maxX) geg4X=maxX-31;
              if (istHindernis(geg4X+30+bewDistG,geg4Y))
	        { geg4Dir++;
                  if (geg4X%31==0) geg4X=((geg4X/31))*31;/*auch +1?*/
                  else geg4X=((geg4X/31)+1)*31;
                }
            }
	    else geg4Dir++;
            if (geg4Dir!=1) if (istHindernis(geg4X,geg4Y-bewDistG)) geg4Dir++;
	    break;
    case 0: if (geg4Y+29<maxY)
    	    { geg4Y+=bewDistG;
              if (geg4Y+29>maxY) geg4Y=maxY-29;
              if (istHindernis(geg4X,geg4Y+28+bewDistG))
	        { geg4Dir++;
                  if (geg4Y%29==0) geg4Y=((geg4Y/29))*29;/*auch +1?*/
                  else geg4Y=((geg4Y/29)+1)*29;
		}
            }
	    else geg4Dir++;
            if (geg4Dir!=0) if (istHindernis(geg4X+30+bewDistG,geg4Y)) geg4Dir++;
	    break;
  }
  if (geg4Dir!=oldDir) reflected4+=4;
  geg4Dir=geg4Dir%4;
};
