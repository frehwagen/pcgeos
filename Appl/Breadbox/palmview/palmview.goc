/****************************************************************************
* START OF FILE: FFIND.GOC
****************************************************************************/

/****************************************************************************
*
*        Palm eBook Viewer 
*
*      Author:  John Howard
*      Date:    08/2009
*
*      Revision History:
*      -----------------------------------------
*      
*
****************************************************************************/

/****************************************************************************
*
*  TO DO Notes:
*		1) Replace Foam Directory stuff with standard Geos File Selector stuff -
*			I'm just going to use a file selector filtered to palm docs instead
*			of going with the full up document stuff --- DONE 8/15
*		2) The key routine is Import(...) in vil.goc - called in VIEW_OPENING
*			which we'll put in our OPEN_EBOOK method
*
*
****************************************************************************/

@include <stdapp.goh>
@include <Ansi/string.h>
@include <gstring.h>
@include <thread.h>
@include <Objects/vLTextC.goh>    /* VisLargeText definitions */

/***************************************************************************
*        Defines
**************************************************************************/
/* "Endian" conversions between Geos and PalmOS */
#define PalmWORD(w) ( (((word)(w))>>8) | (((word)(w))<<8) )
#define PalmDWORD(d) ( PalmWORD((d)>>16) | (((dword)PalmWORD(d))<<16) )

/* Opaque handle used for refering to an open file in PalmOS DB format. */
typedef MemHandle PalmDBHandle;

typedef struct {
  dword dOffset;
  dword dIndex;
} PDBRecEntry;

typedef struct {
  FileHandle    fh;                     // Handle of associated Geos file

  dword         filesize;               // size of DOS file
  word          numRecs;                // number of records in file

  dword         type;                   // creator ID
  dword         creator;                // file type ID

  PDBRecEntry   rec[1];                 // record directory starts here *
} PDBHData;


// all numbers in these structs are big-endian, MAC format
struct tPDBHeader {
	char sName[32];		// 32 bytes
        word wFlags;            // 36
        word wVersion;          // 38
        dword dwCreationTime;   // 40
        dword dwModTime;        // 44
        dword dwBackupTime;     // 48
        dword dwLastSync;       // 52
        dword ofsAppInfo;       // 56
        dword ofsSortInfo;      // 60
        dword dwType;           // 64
        dword dwCreator;        // 68
        dword dwUniqueIDSeed;   // 72
        dword dwNextRecordID;   // 76
        word  wNumRecs;         // 78
};

/*
 *      Structure describing the first recorder of a Doc file.
 *      Taken from makedoc7.cpp.
 */
struct tDocRecord0 {
        word wVersion;          // 1=plain text, 2=compressed
          #define PALM_DOC_PLAIN        1
          #define PALM_DOC_COMPRESSED   2
        word wSpare;
        dword dwStoryLen;       // in bytes, when decompressed
        word wNumRecs;          // text records only; equals tDocHeader.wNumRecs-1
        word wRecSize;          // usually 0x1000
        dword dwSpare2;
};

typedef enum {
  NVS_NO_ERROR = 0,
  NVS_ABORTED,                  // User abort requested
  NVS_CANNOT_OPEN_FILE,         // Error reading file
  NVS_CANNOT_IMPORT,            // General import error
  NVS_UNHANDLED_FORMAT,
  NVS_OUT_OF_MEMORY,
  NVS_CANNOT_CREATE_FILE,       // Error saving file
  NVS_CANNOT_EXPORT,            // General export error
} NViewStatus;


/***************************************************************************
*        Macros
**************************************************************************/


/*
***************************************************************************
*        Global Variables
***************************************************************************
*/
Boolean      minimized = FALSE; /* are we iconized? */


/***************************************************************************
*        Prototypes
**************************************************************************/
/* Open a Palm DB file, given its DOS name. */
PalmDBHandle PalmDBOpenDOS(char *dosname);

/* Close a Palm DB file. */
void PalmDBClose(PalmDBHandle db);

/* Read a record from a Palm DB file to a newly allocated block on the heap. */
MemHandle PalmDBReadRec(PalmDBHandle db, word recnr, word *size);

/* Get info about Palm database */
dword PalmDBGetInfo(PalmDBHandle db, word infoType);
  #define PALM_INFO_RECCOUNT    1
  #define PALM_INFO_CREATOR     2
  #define PALM_INFO_TYPE        3

NViewStatus LoadPalmDoc(/*FDocumentDir dir, */char *file/*, optr text*/);

void ReportStatus(NViewStatus err);


@start StringResource, data;

  @chunk char StatusAborted[] = "Aborted by user.";
  @chunk char StatusCannotOpenFile[] = "Cannot open input file. Please check "
    "if it is in use by another application.";
  @chunk char StatusCannotImport[] = "The file could not be loaded.";
  @chunk char StatusUnhandledFormat[] = "The format of this file is not "
    "supported.";
  @chunk char StatusOutOfMemory[] = "Not enough memory for this operation.";
  @chunk char StatusCannotCreateFile[] = "Cannot create output file.";
  @chunk char StatusCannotExport[] = "The file could not be saved.";

@end StringResource;
/*
***************************************************************************
*        Class & Message Definitions
***************************************************************************
*/

    /*---------------------------------------------------------------------*/
    @class    PalmViewPrimaryClass, GenPrimaryClass ;
    @endc

    @classdecl    PalmViewPrimaryClass ;
    /*---------------------------------------------------------------------*/

    /*---------------------------------------------------------------------*/
	 @class    PalmViewProcessClass, GenProcessClass ;
	@message (GEN_FILE_SELECTOR_NOTIFICATION_MSG) MSG_OPEN_SELECTOR_ACTION;
	@message void MSG_OPEN_EBOOK();

    @endc

    @classdecl    PalmViewProcessClass, neverSaved ;
    /*---------------------------------------------------------------------*/



    /*---------------------------------------------------------------------*/
    @class PalmViewVLTContentClass, GenContentClass ;
    @endc

    @classdecl PalmViewVLTContentClass ;
    /*---------------------------------------------------------------------*/




    /*---------------------------------------------------------------------*/
    @class PalmViewVLTextClass, VisLargeTextClass ;
    @endc

    @classdecl PalmViewVLTextClass;
    /*---------------------------------------------------------------------*/



/*
***************************************************************************
*        UI Objects
***************************************************************************
*/

/*=========================================================================*/


@start    AppResource ;
    /*---------------------------------------------------------------------*/
    @object GenApplicationClass PalmViewApp = {
        GI_visMoniker = list { @PalmViewTextMoniker }
        GI_comp = @PalmViewPrimary;
        gcnList(MANUFACTURER_ID_GEOWORKS,GAGCNLT_WINDOWS) =
				@PalmViewPrimary;
/* the help file for this application */
//        ATTR_GEN_HELP_FILE = "File Finder";
    }
    /*---------------------------------------------------------------------*/
    @visMoniker PalmViewTextMoniker = "Palm eBook Reader" ;
    /*---------------------------------------------------------------------*/
@end    AppResource


/*=========================================================================*/


/*=========================================================================*/


@start    Interface ;
    /*---------------------------------------------------------------------*/
    @object PalmViewPrimaryClass PalmViewPrimary  = {
			GI_comp = @PVFileMenu, @PalmViewView ;
	 HINT_SIZE_WINDOW_AS_RATIO_OF_FIELD = {
		 SWSS_RATIO | PCT_80, SWSS_RATIO | PCT_80};
        ATTR_GEN_HELP_CONTEXT = "TOC";
    }

@object GenInteractionClass PVFileMenu = {
	 GI_comp = @PVFileSelectorGroup;
	 GII_visibility = GIV_POPUP;
    ATTR_GEN_INTERACTION_GROUP_TYPE = (GIGT_FILE_MENU);
}

@object GenInteractionClass PVFileSelectorGroup = {
	 GI_visMoniker = "Open Palm eBook";
	 GI_comp = @PVFileSelector, @OpenButton, @CancelButton;
	 GII_visibility = GIV_DIALOG;
}

@object GenFileSelectorClass PVFileSelector = {
    GFSI_fileCriteria = FSFC_MASK_CASE_INSENSITIVE |
				    FSFC_DIRS |
				    FSFC_NON_GEOS_FILES;
	 GFSI_destination = process;
	 GFSI_notificationMsg = MSG_OPEN_SELECTOR_ACTION;
	 ATTR_GEN_PATH_DATA = {SP_DOCUMENT, "."};
	 ATTR_GEN_FILE_SELECTOR_NAME_MASK = {"*.PDB"};
    HINT_FILE_SELECTOR_NUMBER_OF_FILES_TO_SHOW = 8;
    HINT_FILE_SELECTOR_FILE_LIST_WIDTH = 40;
}

@object GenTriggerClass OpenButton = {
	 GI_visMoniker = "Open";
	 GI_states = @default & ~GS_ENABLED;
	 GTI_destination = process;
	 GTI_actionMsg = MSG_OPEN_EBOOK;
    HINT_SEEK_REPLY_BAR;
    HINT_DEFAULT_DEFAULT_ACTION;
}

@object GenTriggerClass CancelButton = {
	 GI_visMoniker = @VMO_CANCEL, "Cancel";
	 GI_attrs = @default | GA_SIGNAL_INTERACTION_COMPLETE;
    HINT_SEEK_REPLY_BAR;
}



    /*---------------------------------------------------------------------*/
    @object GenViewClass PalmViewView = {
        GVI_vertAttrs  = @default | GVDA_SCROLLABLE;
        GVI_attrs = @default |
                    GVA_DRAG_SCROLLING |
                    GVA_WINDOW_COORDINATE_MOUSE_EVENTS |
                    GVA_DONT_SEND_KBD_RELEASES | GVA_FOCUSABLE;
        GVI_content = @PalmContent;
        HINT_EXPAND_WIDTH_TO_FIT_PARENT;
        HINT_EXPAND_HEIGHT_TO_FIT_PARENT;
        HINT_DEFAULT_FOCUS;
/* give the view a little bigger opening size than the default */
        HINT_INITIAL_SIZE = {0,
                             SST_PCT_OF_FIELD_HEIGHT | PCT_40,
                             0};
/* make it so you can't write or copy to the PalmViewVLTextClass */
        ATTR_GEN_VIEW_DOES_NOT_ACCEPT_TEXT_INPUT;
    }
    /*---------------------------------------------------------------------*/
    @object PalmViewVLTContentClass PalmContent = {
        GCI_genView = @PalmViewView;
        GCI_attrs = @default |
                    VCNA_LARGE_DOCUMENT_MODEL |
                    VCNA_WINDOW_COORDINATE_MOUSE_EVENTS |
                    VCNA_SAME_WIDTH_AS_VIEW;
    }
    /*---------------------------------------------------------------------*/
	 @object PalmViewVLTextClass PalmViewText = {
/* make it selectable so it works with quick copies */
        VTI_state = @default | VTS_SELECTABLE;
        VTI_output = process;
        VLTI_displayMode = VLTDM_DRAFT_WITH_STYLES;
        VLTI_attrs = VLTA_EXACT_HEIGHT;
        VLTI_regionArray = @FileTextRegionArray;
/* we'll use the Sans font size 12 */
        VTI_charAttrRuns = ((VTDS_12 << VTDCA_SIZE_OFFSET) | VTDF_URW_SANS);
/* this really never gets used since we're doing a plain report */
        VTI_paraAttrRuns = ( (0*2) << VTDPA_LEFT_MARGIN_OFFSET ) |
                           ( (0*2) << VTDPA_PARA_MARGIN_OFFSET ) |
                           ( (0*2) << VTDPA_RIGHT_MARGIN_OFFSET ) |
                           ( VTDDT_HALF_INCH << VTDPA_DEFAULT_TABS_OFFSET ) |
                           ( J_LEFT << VTDPA_JUSTIFICATION_OFFSET );
}

    @chunk ChunkArrayHeader FileTextRegionArray = {
        0,
        sizeof(VisLargeTextRegionArrayElement),
        0,
        sizeof(ChunkArrayHeader)
    };
@end Interface

/*=========================================================================*/


/***************************************************************************
*        ConstantData
***************************************************************************/

@start ConstantData, data;

FileExtAttrDesc filterList[] = {
{ FEA_NAME, 0, sizeof(FileLongName), NULL },
{ FEA_FILE_ATTR, (void *)sizeof(FileLongName), sizeof(FileAttrs), NULL },
{ FEA_END_OF_LIST, 0, 0, NULL}
};

@end ConstantData;

/***************************************************************************
*        OpenApplication
***************************************************************************/

/*-------------------------------------------------------------------------*/
@method PalmViewProcessClass, MSG_GEN_PROCESS_OPEN_APPLICATION
{
    @callsuper() ;

}

/*-------------------------------------------------------------------------*/
@method PalmViewPrimaryClass, MSG_GEN_DISPLAY_SET_MINIMIZED
/* Description: Intercept iconize so the VLText doesn't blank out */
{
  minimized = TRUE;
  @callsuper();
}
/*-------------------------------------------------------------------------*/
@method PalmViewPrimaryClass, MSG_GEN_DISPLAY_SET_MAXIMIZED
/* Description: Intercept uniconize so the VLText doesn't blank out */
{
  @callsuper();
  minimized = FALSE;
}
/*-------------------------------------------------------------------------*/

/***********************************************************************
 *
 * MESSAGE:	(GEN_FILE_SELECTOR_NOTIFICATION_MSG) MSG_OPEN_SELECTOR_ACTION
 *				for PalmViewProcessClass
 *                 (word entryNum, word entryFlags)
 * DESCRIPTION:
 *
 *              checks for dbl click on file to open
 *              
 *
 ***********************************************************************/

@method PalmViewProcessClass, MSG_OPEN_SELECTOR_ACTION
{


    /* was it a double click? */
    if (GFS_GET_ENTRY_FLAGS(entryFlags) == GFSEF_OPEN) {
	  if (GFS_GET_ENTRY_TYPE(entryFlags) == GFSET_FILE)  {
		@send, forceQueue process::MSG_OPEN_EBOOK();
		}
	  }
    else  {  /* if not dbl click see if we're on a file */
	  if (GFS_GET_ENTRY_TYPE(entryFlags) == GFSET_FILE)
		@send OpenButton::MSG_GEN_SET_ENABLED(VUM_NOW);
	  else
		@send OpenButton::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
       }

}

/***********************************************************************
 *
 * MESSAGE:	MSG_OPEN_EBOOK for PalmViewProcessClass
 *
 * DESCRIPTION:	 Opens the selected file and does the import
 *              
 *     
 *              
 *
 ***********************************************************************/
@method PalmViewProcessClass, MSG_OPEN_EBOOK
{
char		bookName[FILE_LONGNAME_BUFFER_SIZE];
char		bookPath[PATH_BUFFER_SIZE];
dword		selFlags;
DiskHandle		BookDiskhandle;
NViewStatus ret;


    /* first get the flags and file name of the selection */
	 selFlags = @call PVFileSelector::
			 MSG_GEN_FILE_SELECTOR_GET_SELECTION(bookName);

    /* check to see if it's a file - redundant if dbl clicked */
	 if (GFS_GET_ENTRY_TYPE(selFlags) != GFSET_FILE)  {
       /* if not just return */
		 return;
       }

    /* get the file's path and disk handle */
	 @call PVFileSelector::MSG_GEN_PATH_GET(bookPath, sizeof(bookPath));
	 BookDiskhandle = @call PVFileSelector::MSG_GEN_PATH_GET_DISK_HANDLE();

	 /* and set the book file dir  - FileSel doesn't do this */
	 FileSetCurrentPath(BookDiskhandle, bookPath);

    /* dismiss the file selector box now */
	 @send PVFileSelectorGroup::MSG_GEN_GUP_INTERACTION_COMMAND(IC_DISMISS);


	 ret = LoadPalmDoc(bookName);

	 if(ret != NVS_NO_ERROR)
	 {
      ReportStatus(ret);
	 }


}

/***************************************************************************
* MSG_META_CONTENT_VIEW_OPENING for PalmViewVLTContentClass
**************************************************************************/

@method PalmViewVLTContentClass, MSG_META_CONTENT_VIEW_OPENING
{
    VMFileHandle       fileHan;
    VisContentInstance *vself;

    @callsuper();
/* check if we where just iconized before blanking */
if (!minimized){
    /*
     * Set up the geometry for the content so that the geometry manager
     * is not used.
     */

    vself = ObjDerefVis(oself);
    vself->VI_attrs &= ~VA_MANAGED;
    vself->VI_optFlags &= ~(VOF_GEOMETRY_INVALID | VOF_GEO_UPDATE_PATH);
    vself->VI_geoAttrs |= VCGA_CUSTOM_MANAGE_CHILDREN;

    /*
     * Add the text object as a child of the content.  This must be done
     * dynamically because the text object is a visual child, not a generic
     * one.
     */

    @call PalmContent::MSG_VIS_ADD_CHILD(@PalmViewText, CCO_FIRST);

    /*
     * Set up the text object to be large
     */

    fileHan = ClipboardGetClipboardFile();
    @call PalmViewText::MSG_VIS_TEXT_SET_VM_FILE(fileHan);
    @call PalmViewText::MSG_VIS_LARGE_TEXT_CREATE_DATA_STRUCTURES();
    @call PalmViewText::MSG_VIS_NOTIFY_GEOMETRY_VALID();
  }
}

/***************************************************************************
* MSG_META_CONTENT_VIEW_CLOSING for PalmViewVLTContentClass
**************************************************************************/

@method PalmViewVLTContentClass, MSG_META_CONTENT_VIEW_CLOSING
{
    @callsuper();
/* check if we are just iconizing before blanking */
if (!minimized){
    /*
     * Free the large text data structures and make the text object small
     * again.
     */

    @call PalmViewText::MSG_VIS_TEXT_FREE_ALL_STORAGE(TRUE);
    @call PalmViewText::MSG_VIS_TEXT_SET_VM_FILE(NullHandle);
    @call PalmContent::MSG_VIS_REMOVE_CHILD(@PalmViewText, CCO_FIRST);
  }
}
/***************************************************************************
* MSG_VIS_TEXT_FREE_ALL_STORAGE for PalmViewVLTextClass
**************************************************************************/

@method PalmViewVLTextClass, MSG_VIS_TEXT_FREE_ALL_STORAGE
{
    ChunkArrayHeader *cahp;
    VisLargeTextInstance *vself;

    @callsuper();
    LMemReAlloc(@FileTextRegionArray, sizeof(ChunkArrayHeader));
    cahp = LMemDeref(@FileTextRegionArray);
    cahp->CAH_count = 0;
    cahp->CAH_elementSize = sizeof(VisLargeTextRegionArrayElement);
    cahp->CAH_curOffset = 0;
    cahp->CAH_offset = sizeof(ChunkArrayHeader);

    vself = ObjDerefVis(oself);
    vself->VTI_storageFlags &= ~VTSF_LARGE;
    vself->VI_optFlags |= VOF_GEOMETRY_INVALID;
}


/*
 *      Open a Palm DB file, given its DOS name.
 */
PalmDBHandle PalmDBOpenDOS(char *dosname)
{
    FileHandle fh;
    MemHandle mh;
    struct tPDBHeader head;
    PDBHData *pdbh;
    word numRecs,i;

    fh = FileOpen(dosname, FILE_ACCESS_R | FILE_DENY_W);
    if(fh)                              // Successfully opened file?
    {
		// Get header of PDB file
      FileRead(fh, &head, sizeof(head), TRUE);

      // Get number of records in file
      numRecs = PalmWORD(head.wNumRecs);

      // Allocate space for PDB descriptor with enough room for all records
      mh = MemAlloc(sizeof(*pdbh) + (numRecs-1)*sizeof(pdbh->rec[0]),
        HF_DYNAMIC, HAF_LOCK | HAF_NO_ERR);

      pdbh = MemLock(mh);

      // Store file parameters into descriptor
      pdbh->fh = fh;
      pdbh->filesize = FileSize(fh);
      pdbh->numRecs = numRecs;

      pdbh->type = head.dwType;
      pdbh->creator = head.dwCreator;

      // Get record directory from PDB file, and fix up endian-ness...
      FileRead(fh, pdbh->rec, numRecs * sizeof(pdbh->rec[0]), TRUE);
      for(i=0; i<numRecs; i++)
      {
        pdbh->rec[i].dOffset = PalmDWORD(pdbh->rec[i].dOffset);
        pdbh->rec[i].dIndex = PalmDWORD(pdbh->rec[i].dIndex);
      }

      MemUnlock(mh);
    }
    else
      mh = NullHandle;

    return mh;                          // Return handle to open file
}

/*
 *      Close a Palm DB file.
 */
void PalmDBClose(PalmDBHandle db)
{
    PDBHData *pdbh;

    pdbh = MemLock((MemHandle)db);
    FileClose(pdbh->fh, TRUE);          // Close associated Geos file
    MemFree((MemHandle)db);
}

/*
 *      Read a record from a Palm DB file to a newly allocated block on the
 *      heap.
 */
MemHandle PalmDBReadRec(PalmDBHandle db, word recnr, word *size)
{
    MemHandle mh;
    PDBHData *pdbh;

    pdbh = MemLock((MemHandle)db);

    if(recnr < pdbh->numRecs)           // Requested an existing record?
    {
      if(recnr+1>=pdbh->numRecs)        // Determine size of record
        *size = (word)(pdbh->filesize - pdbh->rec[recnr].dOffset);
      else
        *size = (word)(pdbh->rec[recnr+1].dOffset - pdbh->rec[recnr].dOffset);

      // Allocate buffer for holding record
      mh = MemAlloc(*size, HF_DYNAMIC, HAF_LOCK | HAF_NO_ERR);

      // Get record data into buffer
      FilePos(pdbh->fh, pdbh->rec[recnr].dOffset, FILE_POS_START);
      FileRead(pdbh->fh, MemDeref(mh), *size, TRUE);

      MemUnlock(mh);
    }
    else
      mh = NullHandle;                  // No data

    MemUnlock((MemHandle)db);

    return mh;
}

/*
 *      Get info about Palm database.
 */
dword PalmDBGetInfo(PalmDBHandle db, word infoType)
{
    PDBHData *pdbh;
    dword info;

    pdbh = MemLock((MemHandle)db);

    switch(infoType)                    /* get requested info type */
    {
      case PALM_INFO_RECCOUNT:  info = pdbh->numRecs;   break;
      case PALM_INFO_CREATOR:   info = pdbh->creator;   break;
      case PALM_INFO_TYPE:      info = pdbh->type;      break;

      default:
        FatalError(-1);                 /* invalid info type */
    }

    MemUnlock((MemHandle)db);
    return info;
}

/*
 *      Decompress a record in Doc format from/to a static buffer.
 *      Almost unchanged from makedoc7.cpp (added strict checking against
 *      buffer overruns).
 *
 *      *in_buf         Compressed data
 *      len             Size of data at *in_buf
 *      *out_buf        Buffer for decompressed data
 *      limit           Maximum space available at *out_buf
 *
 *      Return:         Amount of data written to *dst.
 *
 */
word DocDecompress(byte *in_buf, word len, byte *out_buf, word limit)
{
    #define DISP_BITS 11
    #define COUNT_BITS 3

    word i,j,m,n;
    word c;

    for (j=i=0; j<len && i<limit; )
    {
      // take a char from the input buffer
      c = in_buf[j++];

      // separate the char into zones: 0, 1..8, 9..0x7F, 0x80..0xBF, 0xC0..0xFF

      // codes 1...8 mean copy that many bytes; for accented chars & binary
      if (c>0 && c<9)
              while(c-- && i<limit) out_buf[i++] = in_buf[j++];

      // codes 0, 9...0x7F represent themselves
      else if (c<0x80)
              out_buf[i++] = c;

      // codes 0xC0...0xFF represent "space + ascii char"
      else if (c>=0xC0)
      {
              out_buf[i++] = ' ';
              if (i<limit) out_buf[i++] = c ^ 0x80;
      }

      // codes 0x80...0xBf represent sequences
      else
      {
              c <<= 8;
              c += in_buf[j++];
              m = (c & 0x3FFF) >> COUNT_BITS;
              n = c & ((1<<COUNT_BITS) - 1);
              n += 3;
              while (n-- && i<limit)
              {
                      out_buf[i] = out_buf[i-m];
                      i++;
              }
      }
    }

    return i;                           // return amount of decompressed data
}

void DocConvert(byte *buf, word len)
{
    word i;

    for(i=0; i<len; i++)                // Convert LF to CR (for text object)
      if(buf[i]=='\n')
        buf[i] = '\r';

    // Convert "Windows" character set to Geos
    LocalCodePageToGeos((char *)buf, len, CODE_PAGE_LATIN_1, '.');
}

NViewStatus LoadPalmDoc(/*FDocumentDir dir,*/ char *file)
{
    PalmDBHandle db;
    MemHandle headmem, datamem, bufmem;
    struct tDocRecord0 *head;
    byte *data, *buf;
    word size, rec;
    word recSize,compress,numRecs;
    dword creator, type;
    NViewStatus ret = NVS_NO_ERROR;

/*    FilePushDir();
	 FoamSetDocumentDir(dir); */
	 db = PalmDBOpenDOS(file);
/*    FilePopDir();  */


	 if(db)
    {
		// Check Palm file type info for correctness
      creator = PalmDBGetInfo(db, PALM_INFO_CREATOR);
      type = PalmDBGetInfo(db, PALM_INFO_TYPE);

		if(memcmp(&creator,"REAd",4)==0 && memcmp(&type,"TEXt",4)==0)
  //		if(memcmp(&creator,"PPrs",4)==0 && memcmp(&type,"PNRd",4)==0)
		{
		  // Access header record of document file
        headmem = PalmDBReadRec(db, 0, &size);

        // Get interesting fields and convert endian-ness...
        head = MemLock(headmem);
        compress = PalmWORD(head->wVersion);
        numRecs = PalmWORD(head->wNumRecs);
        recSize = PalmWORD(head->wRecSize);
        MemFree(headmem);

        if(compress == PALM_DOC_COMPRESSED)
        {
          bufmem = MemAlloc(recSize, HF_DYNAMIC, HAF_STANDARD_NO_ERR);
        }

        for(rec=0; rec<numRecs; rec++)
        {
          datamem = PalmDBReadRec(db, 1+rec, &size);
          if(compress == PALM_DOC_COMPRESSED)
          {                             // decompress compressed record
            data = MemLock(datamem);
				buf = MemLock(bufmem);
            size = DocDecompress(data, size, buf, recSize);
				MemFree(datamem);           // compressed data no longer needed
				data = buf;                 // work on decompressed copy
			 }

          DocConvert(data, size);       // Geos-ize data stream
			 @call PalmViewText::MSG_VIS_TEXT_APPEND_PTR((char *)data, size);

          if(compress == PALM_DOC_COMPRESSED)
            MemUnlock(bufmem);          // free buffer for decompressed data
          else
            MemFree(datamem);           // free raw data
        }

        if(compress == PALM_DOC_COMPRESSED)
        {
          MemFree(bufmem);              // release buffer
        }
      }
      else
        ret = NVS_UNHANDLED_FORMAT;     // unsupported file format

      PalmDBClose(db);                  // done
    }
    else
      ret = NVS_CANNOT_OPEN_FILE;       // cannot open file

    return ret;
}

void ReportStatus(NViewStatus err)
{
    optr msg[] = { NullOptr, @StatusAborted, @StatusCannotOpenFile,
      @StatusCannotImport, @StatusUnhandledFormat, @StatusOutOfMemory,
      @StatusCannotCreateFile, @StatusCannotExport };

    if(err != NVS_NO_ERROR)
      UserStandardDialogOptr(           /* notify user */
        NullOptr, NullOptr, NullOptr, NullOptr, msg[err],
        (CDT_ERROR << CDBF_DIALOG_TYPE_OFFSET) |
          (GIT_NOTIFICATION << CDBF_INTERACTION_TYPE_OFFSET));
}

