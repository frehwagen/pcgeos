@include <stdapp.goh>
@include <gstring.h>
@include <radiolib.h>
@include <initfile.h>
@include <timedate.h>

void ConvertToString(word value, char *str) ;
void Quick2String(word value, char *str, Boolean front_is_blank) ;

/*
 ***************************************************************************
 *		Class & Message Definitions
 ***************************************************************************
 */

    /*---------------------------------------------------------------------*/
    @class	FMRadioProcessClass, GenProcessClass ;
            @message (GEN_TRIGGER_ACTION) MSG_FM_RADIO_INC_TUNER ;
            @message (GEN_TRIGGER_ACTION) MSG_FM_RADIO_DEC_TUNER ;
            @message (GEN_TRIGGER_ACTION) MSG_FM_RADIO_INC_TUNER_FINE ;
            @message (GEN_TRIGGER_ACTION) MSG_FM_RADIO_DEC_TUNER_FINE ;
            @message (GEN_TRIGGER_ACTION) MSG_FM_RADIO_PRESET ;
            @message (GEN_TRIGGER_ACTION) MSG_FM_RADIO_PRESET_SET ;
            @message (GEN_TRIGGER_ACTION) MSG_FM_RADIO_INC_VOLUME ;
            @message (GEN_TRIGGER_ACTION) MSG_FM_RADIO_DEC_VOLUME ;
            @message (GEN_TRIGGER_ACTION) MSG_FM_RADIO_INC_SCAN ;
            @message (GEN_TRIGGER_ACTION) MSG_FM_RADIO_DEC_SCAN ;
            @message (GEN_TRIGGER_ACTION) MSG_FM_RADIO_MUTE ;
            @message (GEN_TRIGGER_ACTION) MSG_FM_RADIO_POWER ;
            @message (GEN_TRIGGER_ACTION) MSG_FM_RADIO_SET_TIME ;
            @message (GEN_TRIGGER_ACTION) MSG_FM_RADIO_SET_TIME_START ;
            @message (GEN_TRIGGER_ACTION) MSG_FM_RADIO_SET_ALARM ;
            @message (GEN_TRIGGER_ACTION) MSG_FM_RADIO_SET_ALARM_START ;
            @message (GEN_TRIGGER_ACTION) MSG_FM_RADIO_ALARM_ON_OFF ;
            @message (GEN_TRIGGER_ACTION) MSG_FM_RADIO_SLUMBER_ON_OFF ;
            @message (GEN_TRIGGER_ACTION) MSG_FM_RADIO_SET_SLUMBER ;
            @message (GEN_TRIGGER_ACTION) MSG_FM_RADIO_SET_SLUMBER_START ;
            @message void MSG_FM_RADIO_SHOW_STATION() ;
            @message void MSG_FM_RADIO_TIME_CLICK() ;
            @message void MSG_FM_RADIO_SLUMBER_TIME() ;
            @message void MSG_FM_RADIO_STOP_SCAN() ;
    @endc
    @classdecl	FMRadioProcessClass, neverSaved ;
    /*---------------------------------------------------------------------*/



    /*---------------------------------------------------------------------*/
    @class	FMTunerContentClass, VisContentClass ;
    @endc
    @classdecl	FMTunerContentClass ;
    /*---------------------------------------------------------------------*/



    /*---------------------------------------------------------------------*/
    @class	FMInterClass, GenInteractionClass ;
    @endc
    @classdecl	FMInterClass ;
    /*---------------------------------------------------------------------*/



    /*---------------------------------------------------------------------*/
    @class	FMClockContentClass, VisContentClass ;
    @endc
    @classdecl	FMClockContentClass ;
    /*---------------------------------------------------------------------*/



    /*---------------------------------------------------------------------*/
    @class FMTriggerClass, GenTriggerClass ;
        @instance TimerHandle FMTI_timer = NullHandle ;
        @instance word FMTI_timerId = 0 ;
        @instance word FMTI_wait = 8;
        @instance Boolean FMTI_held = FALSE ;
        @message void MSG_FM_TRIGGER_CLICK() ;
    @endc
    @classdecl FMTriggerClass ;
    /*---------------------------------------------------------------------*/



    /*---------------------------------------------------------------------*/
    @class OnOffTriggerClass, GenTriggerClass ;
        @instance Boolean OOTI_onOff = FALSE ;
        @message void MSG_ON_OFF_SET(Boolean onOff) ;
    @endc
    @classdecl OnOffTriggerClass ;
    /*---------------------------------------------------------------------*/



    /*---------------------------------------------------------------------*/
    @class FMPresetClass, OnOffTriggerClass ;
        @instance word FMPI_id ;
        @message word MSG_FM_PRESET_GET_ID() ;
    @endc
    @classdecl FMPresetClass ;
    /*---------------------------------------------------------------------*/



//@include "breadbox.goh"
@include "bbxreg.goh"
@include "bbreg24.goh"
@include "fmnote.goh"
@include "onoff.goh"
@include "icon.goh"

/*
 ***************************************************************************
 *		UI Objects
 ***************************************************************************
 */

/*=========================================================================*/



/*
 *		Application Object
 */
@start	AppResource ;
    /*---------------------------------------------------------------------*/
	 @object GenApplicationClass FMRadioApp = {
        GI_visMoniker = list { @FMRadioTextMoniker,
                               @FMRadioAppMoniker0,
                               @FMRadioAppMoniker1,
										 @FMRadioAppMoniker2,
										 @FMRadioAppTiny  }
        GI_comp = @FMRadioPrimary;
        gcnList(MANUFACTURER_ID_GEOWORKS,GAGCNLT_WINDOWS) = @FMRadioPrimary;
	 	  ATTR_GEN_HELP_FILE = "RadioHelp";
	 }
    /*---------------------------------------------------------------------*/
    @visMoniker FMRadioTextMoniker = "FM Radio" ;
    /*---------------------------------------------------------------------*/
@end	AppResource


/*=========================================================================*/
/*
 *		Primary window
 */

@start	Interface ;
    /*---------------------------------------------------------------------*/
    @object GenPrimaryClass FMRadioPrimary  = {
        GI_comp = @InterAll,
                  @FMRadioDialogs ;
        ATTR_GEN_HELP_CONTEXT = "TOC";
        HINT_PRIMARY_NO_FILE_MENU ;
        HINT_SIZE_WINDOW_AS_DESIRED ;
    }
    /*---------------------------------------------------------------------*/
    @object GenInteractionClass FMRadioDialogs = {
        GI_comp = @TimeSetDialog,
                  @AlarmSetDialog,
                  @SlumberSetDialog ;
        GII_type = GIT_ORGANIZATIONAL ;
        GII_visibility = GIV_DIALOG ;
        GII_attrs = @default | GIA_NOT_USER_INITIATABLE ;
    }
    /*---------------------------------------------------------------------*/
    @object GenInteractionClass InterAll = {
        GI_comp = @InterLeft,
                  @InterRight ;
        HINT_EXPAND_WIDTH_TO_FIT_PARENT ;
        HINT_EXPAND_HEIGHT_TO_FIT_PARENT ;
        HINT_ORIENT_CHILDREN_HORIZONTALLY ;
        HINT_DIVIDE_WIDTH_EQUALLY ;
    }
    /*---------------------------------------------------------------------*/
    @object GenInteractionClass InterLeft = {
        GI_comp = @StereoStation,
                  @TuningTriggers,
                  @PresetTriggers1,
                  @PresetTriggers2 ;
        HINT_EXPAND_HEIGHT_TO_FIT_PARENT ;
        HINT_EXPAND_WIDTH_TO_FIT_PARENT ;
        HINT_ORIENT_CHILDREN_VERTICALLY ;
    }
    /*---------------------------------------------------------------------*/
    @object GenInteractionClass TuningTriggers = {
        GI_comp = @TuningTriggers1,
                  @TuningTriggers2 ;
        HINT_ORIENT_CHILDREN_HORIZONTALLY ;
        HINT_EXPAND_WIDTH_TO_FIT_PARENT ;
        HINT_DIVIDE_WIDTH_EQUALLY ;
    }
    /*---------------------------------------------------------------------*/
    @object GenViewClass StereoStation = {
/*        GVI_attrs      = @default | GVA_CONTROLLED ;
        GVI_horizAttrs   = @default | GVDA_NO_LARGER_THAN_CONTENT ;
        GVI_vertAttrs    = @default | GVDA_NO_LARGER_THAN_CONTENT ; */
        GVI_attrs      = @default | GVA_CONTROLLED | GVA_NO_WIN_FRAME ;
        GVI_color = {C_BLACK, 0, 0, 0} ;
        GVI_content = @StereoStationContent ;
        GVI_docBounds    = {0, 0, 1000, 1000};
    }
    /*---------------------------------------------------------------------*/
    @object FMTunerContentClass StereoStationContent = {
        VCNI_view         = StereoStation ;
        VCNI_attrs        = @default |
                            VCNA_SAME_WIDTH_AS_VIEW |
                            VCNA_SAME_HEIGHT_AS_VIEW ;
    }
    /*---------------------------------------------------------------------*/
    @object GenInteractionClass TuningTriggers1 = {
        GI_comp = @TuningGroup,
                  @PresetStationGroup ;
        HINT_ORIENT_CHILDREN_VERTICALLY ;
        HINT_EXPAND_WIDTH_TO_FIT_PARENT ;
    }
    /*---------------------------------------------------------------------*/
    @object GenInteractionClass PresetStationGroup = {
        GI_comp = @PresetStationTrigger ;
        HINT_EXPAND_WIDTH_TO_FIT_PARENT ;
/*
        HINT_DRAW_IN_BOX ;
*/
        HINT_CENTER_CHILDREN_VERTICALLY ;
    }
    /*---------------------------------------------------------------------*/
    @object GenTriggerClass PresetStationTrigger = {
        GI_visMoniker = "Preset Station" ;
        GTI_destination = process ;
        GTI_actionMsg = MSG_FM_RADIO_PRESET_SET ;
        HINT_EXPAND_WIDTH_TO_FIT_PARENT ;
        HINT_CENTER_MONIKER ;
    }
    /*---------------------------------------------------------------------*/
    @object FMInterClass TuningGroup = {
        GI_comp = @TuningDecTrigger,
                  @TuningGlyph,
                  @TuningIncTrigger ;
        HINT_ORIENT_CHILDREN_HORIZONTALLY ;
        HINT_EXPAND_WIDTH_TO_FIT_PARENT ;
/*
        HINT_DRAW_IN_BOX ;
*/
        HINT_FULL_JUSTIFY_CHILDREN_HORIZONTALLY ;
        HINT_CENTER_CHILDREN_VERTICALLY ;
    }
    /*---------------------------------------------------------------------*/
    @object FMTriggerClass TuningDecTrigger = {
        GI_visMoniker = "<<<<" ;
        GTI_destination = process ;
        GTI_actionMsg = MSG_FM_RADIO_DEC_TUNER ;
    }
    /*---------------------------------------------------------------------*/
    @object GenGlyphClass TuningGlyph = {
        GI_visMoniker = "Tuning" ;
        HINT_EXPAND_WIDTH_TO_FIT_PARENT ;
        HINT_CENTER_MONIKER ;
    }
    /*---------------------------------------------------------------------*/
    @object FMTriggerClass TuningIncTrigger = {
        GI_visMoniker = ">>>>" ;
        GTI_destination = process ;
        GTI_actionMsg = MSG_FM_RADIO_INC_TUNER ;
    }
    /*---------------------------------------------------------------------*/
    @object GenInteractionClass TuningTriggers2 = {
        GI_comp = @FineTuneGroup,
                  @ScanGroup ;
        HINT_EXPAND_WIDTH_TO_FIT_PARENT ;
        HINT_ORIENT_CHILDREN_VERTICALLY ;
    }
    /*---------------------------------------------------------------------*/
    @object FMInterClass ScanGroup = {
        GI_comp = @ScanDecTrigger,
                  @ScanGlyph,
                  @ScanIncTrigger ;
        HINT_ORIENT_CHILDREN_HORIZONTALLY ;
        HINT_EXPAND_WIDTH_TO_FIT_PARENT ;
/*
        HINT_DRAW_IN_BOX ;
*/
        HINT_FULL_JUSTIFY_CHILDREN_HORIZONTALLY ;
        HINT_CENTER_CHILDREN_VERTICALLY ;
    }
    /*---------------------------------------------------------------------*/
    @object GenTriggerClass ScanDecTrigger = {
        GI_visMoniker = "<<<<" ;
        GTI_destination = process ;
        GTI_actionMsg = MSG_FM_RADIO_DEC_SCAN ;
    }
    /*---------------------------------------------------------------------*/
    @object GenGlyphClass ScanGlyph = {
        GI_visMoniker = "Scan" ;
        HINT_EXPAND_WIDTH_TO_FIT_PARENT ;
        HINT_CENTER_MONIKER ;
    }
    /*---------------------------------------------------------------------*/
    @object GenTriggerClass ScanIncTrigger = {
        GI_visMoniker = ">>>>" ;
        GTI_destination = process ;
        GTI_actionMsg = MSG_FM_RADIO_INC_SCAN ;
    }
    /*---------------------------------------------------------------------*/
    @object FMInterClass FineTuneGroup = {
        GI_comp = @FineTuneDecTrigger,
                  @FineTuneGlyph,
                  @FineTuneIncTrigger ;
        HINT_ORIENT_CHILDREN_HORIZONTALLY ;
        HINT_EXPAND_WIDTH_TO_FIT_PARENT ;
/*
        HINT_DRAW_IN_BOX ;
*/
        HINT_FULL_JUSTIFY_CHILDREN_HORIZONTALLY ;
        HINT_CENTER_CHILDREN_VERTICALLY ;
    }
    /*---------------------------------------------------------------------*/
    @object FMTriggerClass FineTuneDecTrigger = {
        GI_visMoniker = "<<<<" ;
        GTI_destination = process ;
        GTI_actionMsg = MSG_FM_RADIO_DEC_TUNER_FINE ;
    }
    /*---------------------------------------------------------------------*/
    @object GenGlyphClass FineTuneGlyph = {
        GI_visMoniker = "Fine Tune" ;
        HINT_EXPAND_WIDTH_TO_FIT_PARENT ;
        HINT_CENTER_MONIKER ;
    }
    /*---------------------------------------------------------------------*/
    @object FMTriggerClass FineTuneIncTrigger = {
        GI_visMoniker = ">>>>" ;
        GTI_destination = process ;
        GTI_actionMsg = MSG_FM_RADIO_INC_TUNER_FINE ;
    }
    /*---------------------------------------------------------------------*/
    @object GenInteractionClass PresetTriggers1 = {
        GI_comp = @Preset1,
                  @Preset2,
                  @Preset3,
                  @Preset4,
                  @Preset5 ;
        HINT_ORIENT_CHILDREN_HORIZONTALLY ;
        HINT_EXPAND_WIDTH_TO_FIT_PARENT ;
        HINT_FULL_JUSTIFY_CHILDREN_HORIZONTALLY ;
        HINT_DIVIDE_WIDTH_EQUALLY ;
    }
    /*---------------------------------------------------------------------*/
    @object FMPresetClass Preset1 = {
        GI_visMoniker = "1" ;
        GTI_destination = process ;
        GTI_actionMsg = MSG_FM_RADIO_PRESET ;
        FMPI_id = 0 ;
        OOTI_onOff = TRUE ;
        HINT_EXPAND_WIDTH_TO_FIT_PARENT ;
    }
    /*---------------------------------------------------------------------*/
    @object FMPresetClass Preset2 = {
        GI_visMoniker = "2" ;
        GTI_destination = process ;
        GTI_actionMsg = MSG_FM_RADIO_PRESET ;
        FMPI_id = 1 ;
        HINT_EXPAND_WIDTH_TO_FIT_PARENT ;
    }
    /*---------------------------------------------------------------------*/
    @object FMPresetClass Preset3 = {
        GI_visMoniker = "3" ;
        GTI_destination = process ;
        GTI_actionMsg = MSG_FM_RADIO_PRESET ;
        FMPI_id = 2 ;
        HINT_EXPAND_WIDTH_TO_FIT_PARENT ;
    }
    /*---------------------------------------------------------------------*/
    @object FMPresetClass Preset4 = {
        GI_visMoniker = "4" ;
        GTI_destination = process ;
        GTI_actionMsg = MSG_FM_RADIO_PRESET ;
        FMPI_id = 3 ;
        HINT_EXPAND_WIDTH_TO_FIT_PARENT ;
    }
    /*---------------------------------------------------------------------*/
    @object FMPresetClass Preset5 = {
        GI_visMoniker = "5" ;
        GTI_destination = process ;
        GTI_actionMsg = MSG_FM_RADIO_PRESET ;
        FMPI_id = 4 ;
        HINT_EXPAND_WIDTH_TO_FIT_PARENT ;
    }
    /*---------------------------------------------------------------------*/
    @object GenInteractionClass PresetTriggers2 = {
        GI_comp = @Preset6,
                  @Preset7,
                  @Preset8,
                  @Preset9,
                  @Preset10 ;
        HINT_ORIENT_CHILDREN_HORIZONTALLY ;
        HINT_EXPAND_WIDTH_TO_FIT_PARENT ;
        HINT_FULL_JUSTIFY_CHILDREN_HORIZONTALLY ;
        HINT_DIVIDE_WIDTH_EQUALLY ;
    }
    /*---------------------------------------------------------------------*/
    @object FMPresetClass Preset6 = {
        GI_visMoniker = "6" ;
        GTI_destination = process ;
        GTI_actionMsg = MSG_FM_RADIO_PRESET ;
        FMPI_id = 5 ;
        HINT_EXPAND_WIDTH_TO_FIT_PARENT ;
    }
    /*---------------------------------------------------------------------*/
    @object FMPresetClass Preset7 = {
        GI_visMoniker = "7" ;
        GTI_destination = process ;
        GTI_actionMsg = MSG_FM_RADIO_PRESET ;
        FMPI_id = 6 ;
        HINT_EXPAND_WIDTH_TO_FIT_PARENT ;
    }
    /*---------------------------------------------------------------------*/
    @object FMPresetClass Preset8 = {
        GI_visMoniker = "8" ;
        GTI_destination = process ;
        GTI_actionMsg = MSG_FM_RADIO_PRESET ;
        FMPI_id = 7 ;
        HINT_EXPAND_WIDTH_TO_FIT_PARENT ;
    }
    /*---------------------------------------------------------------------*/
    @object FMPresetClass Preset9 = {
        GI_visMoniker = "9" ;
        GTI_destination = process ;
        GTI_actionMsg = MSG_FM_RADIO_PRESET ;
        FMPI_id = 8 ;
        HINT_EXPAND_WIDTH_TO_FIT_PARENT ;
    }
    /*---------------------------------------------------------------------*/
    @object FMPresetClass Preset10 = {
        GI_visMoniker = "10" ;
        GTI_destination = process ;
        GTI_actionMsg = MSG_FM_RADIO_PRESET ;
        FMPI_id = 9 ;
        HINT_EXPAND_WIDTH_TO_FIT_PARENT ;
    }
    /*---------------------------------------------------------------------*/
@end Interface



@start Interface4 ;
    /*---------------------------------------------------------------------*/
    @object GenInteractionClass InterRight = {
        GI_comp = @SlumberGroup,
                  @TimeAndAlarmGroupWithGlyph,
                  @VolumeAndMuteGroup,
                  @BreadBoxGroup ;
        HINT_EXPAND_HEIGHT_TO_FIT_PARENT ;
        HINT_EXPAND_WIDTH_TO_FIT_PARENT ;
        HINT_ORIENT_CHILDREN_VERTICALLY ;
        HINT_CENTER_CHILDREN_HORIZONTALLY ;
    }
    /*---------------------------------------------------------------------*/
    @object GenInteractionClass SlumberGroup = {
        GI_comp = @FMRadioTime,
                  @SlumberSetAndToggle ;
        HINT_ORIENT_CHILDREN_HORIZONTALLY ;
        HINT_EXPAND_WIDTH_TO_FIT_PARENT ;
        HINT_DIVIDE_WIDTH_EQUALLY ;
    }
    /*---------------------------------------------------------------------*/
    @object GenViewClass FMRadioTime = {
        GVI_attrs      = @default | GVA_CONTROLLED | GVA_NO_WIN_FRAME ;
        GVI_horizAttrs   = @default | GVDA_NO_LARGER_THAN_CONTENT ;
        GVI_vertAttrs    = @default | GVDA_NO_LARGER_THAN_CONTENT ;
        GVI_color = {C_BLACK, 0, 0, 0} ;
        GVI_content = @FMRadioTimeContent ;
        GVI_docBounds    = {0, 0, 1000, 1000};
        HINT_EXPAND_WIDTH_TO_FIT_PARENT ;
        HINT_EXPAND_HEIGHT_TO_FIT_PARENT ;
    }
    /*---------------------------------------------------------------------*/
    @object FMClockContentClass FMRadioTimeContent = {
        VCNI_view         = FMRadioTime ;
        VCNI_attrs        = @default |
                            VCNA_SAME_WIDTH_AS_VIEW |
                            VCNA_SAME_HEIGHT_AS_VIEW ;
    }
    /*---------------------------------------------------------------------*/
    @object GenInteractionClass SlumberSetAndToggle = {
        GI_comp = @SlumberSet,
                  @SlumberToggle ;
        HINT_EXPAND_WIDTH_TO_FIT_PARENT ;
        HINT_EXPAND_HEIGHT_TO_FIT_PARENT ;
        HINT_ORIENT_CHILDREN_VERTICALLY ;
    }
    /*---------------------------------------------------------------------*/
    @object GenTriggerClass SlumberSet = {
        GI_visMoniker = "Slumber Set" ;
        GTI_destination = process ;
        GTI_actionMsg = MSG_FM_RADIO_SET_SLUMBER_START ;
        HINT_EXPAND_WIDTH_TO_FIT_PARENT ;
        HINT_CENTER_MONIKER ;
    }
    /*---------------------------------------------------------------------*/
    @object GenTriggerClass SlumberToggle = {
        GI_visMoniker = "Slumber Off" ;
        GTI_destination = process ;
        GTI_actionMsg = MSG_FM_RADIO_SLUMBER_ON_OFF ;
        HINT_EXPAND_WIDTH_TO_FIT_PARENT ;
        HINT_CENTER_MONIKER ;
    }
    /*---------------------------------------------------------------------*/
    @object GenInteractionClass TimeAndAlarmGroupWithGlyph = {
        GI_comp = @TimeAndAlarmGroup,
                  @FMRadioGlyph ;
        HINT_ORIENT_CHILDREN_HORIZONTALLY ;
        HINT_EXPAND_WIDTH_TO_FIT_PARENT ;
        HINT_DIVIDE_WIDTH_EQUALLY ;
        HINT_CENTER_CHILDREN_VERTICALLY ;
    }
    /*---------------------------------------------------------------------*/
    @object GenInteractionClass TimeAndAlarmGroup = {
        GI_comp = @TimeSet,
                  @AlarmSet,
                  @AlarmToggle ;
        HINT_ORIENT_CHILDREN_VERTICALLY ;
        HINT_EXPAND_WIDTH_TO_FIT_PARENT ;
    }
    /*---------------------------------------------------------------------*/
    @object GenTriggerClass TimeSet = {
        GI_visMoniker = "Time Set" ;
        GTI_destination = process ;
        GTI_actionMsg = MSG_FM_RADIO_SET_TIME_START ;
        HINT_EXPAND_WIDTH_TO_FIT_PARENT ;
        HINT_CENTER_MONIKER ;
    }
    /*---------------------------------------------------------------------*/
    @object GenTriggerClass AlarmSet = {
        GI_visMoniker = "Alarm Set" ;
        GTI_destination = process ;
        GTI_actionMsg = MSG_FM_RADIO_SET_ALARM_START ;
        HINT_EXPAND_WIDTH_TO_FIT_PARENT ;
        HINT_CENTER_MONIKER ;
    }
    /*---------------------------------------------------------------------*/
    @object GenTriggerClass AlarmToggle = {
        GI_visMoniker = "Alarm Off" ;
        GTI_destination = process ;
        GTI_actionMsg = MSG_FM_RADIO_ALARM_ON_OFF ;
        HINT_EXPAND_WIDTH_TO_FIT_PARENT ;
        HINT_CENTER_MONIKER ;
    }
    /*---------------------------------------------------------------------*/
    @object GenInteractionClass VolumeAndMuteGroup = {
        GI_comp = @VolumeGroup,
                  @MuteAndPowerGroup ;
        HINT_ORIENT_CHILDREN_HORIZONTALLY ;
        HINT_EXPAND_WIDTH_TO_FIT_PARENT ;
        HINT_CENTER_CHILDREN_VERTICALLY ;
        HINT_DIVIDE_WIDTH_EQUALLY ;
    }
    /*---------------------------------------------------------------------*/
    @object FMInterClass VolumeGroup = {
        GI_comp = @VolumeDecTrigger,
                  @VolumeGlyph,
                  @VolumeIncTrigger ;
        HINT_ORIENT_CHILDREN_HORIZONTALLY ;
        HINT_EXPAND_WIDTH_TO_FIT_PARENT ;
/*
        HINT_DRAW_IN_BOX ;
*/
        HINT_FULL_JUSTIFY_CHILDREN_HORIZONTALLY ;
        HINT_CENTER_CHILDREN_VERTICALLY ;
    }
    /*---------------------------------------------------------------------*/
    @object FMTriggerClass VolumeDecTrigger = {
        GI_visMoniker = "<<<<" ;
        GTI_destination = process ;
        GTI_actionMsg = MSG_FM_RADIO_DEC_VOLUME ;
    }
    /*---------------------------------------------------------------------*/
    @object GenGlyphClass VolumeGlyph = {
        GI_visMoniker = "Volume" ;
        HINT_EXPAND_WIDTH_TO_FIT_PARENT ;
        HINT_CENTER_MONIKER ;
    }
    /*---------------------------------------------------------------------*/
    @object FMTriggerClass VolumeIncTrigger = {
        GI_visMoniker = ">>>>" ;
        GTI_destination = process ;
        GTI_actionMsg = MSG_FM_RADIO_INC_VOLUME ;
    }
    /*---------------------------------------------------------------------*/
    @object GenInteractionClass MuteAndPowerGroup = {
        GI_comp = @MuteTrigger,
                  @PowerTrigger ;
        HINT_ORIENT_CHILDREN_HORIZONTALLY ;
        HINT_EXPAND_WIDTH_TO_FIT_PARENT ;
        HINT_CENTER_CHILDREN_VERTICALLY ;
        HINT_FULL_JUSTIFY_CHILDREN_HORIZONTALLY ;
        HINT_INCLUDE_ENDS_IN_CHILD_SPACING ;
    }
    /*---------------------------------------------------------------------*/
    @object OnOffTriggerClass MuteTrigger = {
        GI_visMoniker = "Mute    " ;
        GTI_destination = process ;
        GTI_actionMsg = MSG_FM_RADIO_MUTE ;
    }
    /*---------------------------------------------------------------------*/
    @object GenInteractionClass BreadBoxGroup = {
		  GI_comp = @BreadBoxLogoTrig,
                  @AboutDBox;
        HINT_ORIENT_CHILDREN_HORIZONTALLY ;
/*
        HINT_FULL_JUSTIFY_CHILDREN_HORIZONTALLY ;
*/
        HINT_CENTER_CHILDREN_VERTICALLY ;
        HINT_CENTER_CHILDREN_HORIZONTALLY ;
        HINT_EXPAND_WIDTH_TO_FIT_PARENT ;
        HINT_EXPAND_HEIGHT_TO_FIT_PARENT ;
    }
    /*---------------------------------------------------------------------*/
	 @object OnOffTriggerClass PowerTrigger = {
		  GI_visMoniker = " Power    " ;
		  GTI_destination = process ;
		  GTI_actionMsg = MSG_FM_RADIO_POWER ;
/*
        HINT_SEEK_TITLE_BAR_LEFT ;
*/
	 }
	 /*---------------------------------------------------------------------*/
    @object GenInteractionClass TimeSetDialog = {
        GI_visMoniker = "Time Set" ;
        GI_comp = @SetTimeHours,
                  @SetTimeMinutes,
                  @SetTimeSeconds,
                  @SetTimeAMorPM,
                  @SetTimeApplyTrigger ;
        GII_type = GIT_COMMAND ;
        GII_visibility = GIV_DIALOG ;
        HINT_CENTER_CHILDREN_ON_MONIKERS ;
        HINT_EXPAND_WIDTH_TO_FIT_PARENT ;
        HINT_CENTER_MONIKER ;
		  ATTR_GEN_HELP_CONTEXT = "TimeSetDB";
	 }
    /*---------------------------------------------------------------------*/
    @object GenTriggerClass SetTimeApplyTrigger = {
        GI_attrs = @default | GA_SIGNAL_INTERACTION_COMPLETE ;
        GTI_destination = process ;
        GTI_actionMsg   = MSG_FM_RADIO_SET_TIME ;
        ATTR_GEN_TRIGGER_INTERACTION_COMMAND = {IC_APPLY} ;
        HINT_SEEK_REPLY_BAR ;
        HINT_DEFAULT_DEFAULT_ACTION ;
    }
    /*---------------------------------------------------------------------*/
    @object GenValueClass SetTimeHours = {
        GI_visMoniker = "Hours" ;
        GVLI_value = MakeWWFixed(1.0) ;
        GVLI_minimum = MakeWWFixed(1.0) ;
        GVLI_maximum = MakeWWFixed(12.0) ;
    }
    /*---------------------------------------------------------------------*/
    @object GenValueClass SetTimeMinutes = {
        GI_visMoniker = "Minutes" ;
        GVLI_value = MakeWWFixed(0.0) ;
        GVLI_minimum = MakeWWFixed(0.0) ;
        GVLI_maximum = MakeWWFixed(59.0) ;
    }
    /*---------------------------------------------------------------------*/
    @object GenValueClass SetTimeSeconds = {
        GI_visMoniker = "Seconds" ;
        GVLI_value = MakeWWFixed(0.0) ;
        GVLI_minimum = MakeWWFixed(0.0) ;
        GVLI_maximum = MakeWWFixed(59.0) ;
    }
    /*---------------------------------------------------------------------*/
    @object GenItemGroupClass SetTimeAMorPM = {
        GI_comp = @SetTimeAM,
                  @SetTimePM ;
        GIGI_selection = 0 ;
        HINT_ORIENT_CHILDREN_HORIZONTALLY ;
    }
    /*---------------------------------------------------------------------*/
    @object GenItemClass SetTimeAM = {
        GI_visMoniker = "AM" ;
        GII_identifier = 0 ;
    }
    /*---------------------------------------------------------------------*/
    @object GenItemClass SetTimePM = {
        GI_visMoniker = "PM" ;
        GII_identifier = 1 ;
    }
    /*---------------------------------------------------------------------*/
    @object GenInteractionClass AlarmSetDialog = {
		  GI_visMoniker = "Alarm Set" ;
		  GI_comp = @SetAlarmTime,
                  @SetAlarmApplyTrigger ;
        GII_type = GIT_COMMAND ;
        GII_visibility = GIV_DIALOG ;
		  ATTR_GEN_HELP_CONTEXT = "AlarmSetDB";
	 }
    /*---------------------------------------------------------------------*/
    @object GenTriggerClass SetAlarmApplyTrigger = {
        GI_attrs = @default | GA_SIGNAL_INTERACTION_COMPLETE ;
        GTI_destination = process ;
        GTI_actionMsg   = MSG_FM_RADIO_SET_ALARM ;
        ATTR_GEN_TRIGGER_INTERACTION_COMMAND = {IC_APPLY} ;
        HINT_SEEK_REPLY_BAR ;
        HINT_DEFAULT_DEFAULT_ACTION ;
    }
	 /*---------------------------------------------------------------------*/
	 @object GenInteractionClass SetAlarmTime = {
		  GI_comp = @AlarmTime;
		  HINT_CENTER_CHILDREN_HORIZONTALLY ;
		  HINT_MINIMUM_SIZE = { SST_PIXELS | 200, 0, 0};
	 }
	 /*---------------------------------------------------------------------*/
	 @object GenInteractionClass AlarmTime = {
		  GI_comp = @SetAlarmHours,
						@SetAlarmMinutes,
						@SetAlarmAMorPM;
		  HINT_CENTER_CHILDREN_ON_MONIKERS ;
	 }
	 /*---------------------------------------------------------------------*/
    @object GenValueClass SetAlarmHours = {
        GI_visMoniker = "Hours" ;
        GVLI_value = MakeWWFixed(12.0) ;
        GVLI_minimum = MakeWWFixed(1.0) ;
        GVLI_maximum = MakeWWFixed(12.0) ;
    }
    /*---------------------------------------------------------------------*/
    @object GenValueClass SetAlarmMinutes = {
        GI_visMoniker = "Minutes" ;
        GVLI_value = MakeWWFixed(0.0) ;
        GVLI_minimum = MakeWWFixed(0.0) ;
        GVLI_maximum = MakeWWFixed(59.0) ;
    }
    /*---------------------------------------------------------------------*/
    @object GenItemGroupClass SetAlarmAMorPM = {
        GI_comp = @SetAlarmAM,
                  @SetAlarmPM ;
        GIGI_selection = 0 ;
        HINT_ORIENT_CHILDREN_HORIZONTALLY ;
    }
    /*---------------------------------------------------------------------*/
    @object GenItemClass SetAlarmAM = {
        GI_visMoniker = "AM" ;
        GII_identifier = 0 ;
    }
    /*---------------------------------------------------------------------*/
    @object GenItemClass SetAlarmPM = {
        GI_visMoniker = "PM" ;
        GII_identifier = 1 ;
    }
    /*---------------------------------------------------------------------*/
    @object GenInteractionClass SlumberSetDialog = {
        GI_visMoniker = "Slumber Set" ;
		  GI_comp = @SetSlumberTime,
               //   @SetSlumberMinutes,
                  @SetSlumberApplyTrigger ;
        GII_type = GIT_COMMAND ;
        GII_visibility = GIV_DIALOG ;
		  ATTR_GEN_HELP_CONTEXT = "SlumberSetDB";
	 }
    /*---------------------------------------------------------------------*/
    @object GenTriggerClass SetSlumberApplyTrigger = {
        GI_attrs = @default | GA_SIGNAL_INTERACTION_COMPLETE ;
        GTI_destination = process ;
        GTI_actionMsg   = MSG_FM_RADIO_SET_SLUMBER ;
        ATTR_GEN_TRIGGER_INTERACTION_COMMAND = {IC_APPLY} ;
        HINT_SEEK_REPLY_BAR ;
        HINT_DEFAULT_DEFAULT_ACTION ;
    }
	 /*---------------------------------------------------------------------*/
	 @object GenInteractionClass SetSlumberTime = {
		  GI_comp = @SlumberTime;
		  HINT_CENTER_CHILDREN_HORIZONTALLY ;
		  HINT_MINIMUM_SIZE = { SST_PIXELS | 200, 0, 0};
	 }
	 /*---------------------------------------------------------------------*/
	 @object GenInteractionClass SlumberTime = {
		  GI_comp = @SetSlumberHours,
						@SetSlumberMinutes;
		  HINT_CENTER_CHILDREN_ON_MONIKERS ;
	 }
	 /*---------------------------------------------------------------------*/
    @object GenValueClass SetSlumberHours = {
        GI_visMoniker = "Hours" ;
        GVLI_value = MakeWWFixed(0.0) ;
        GVLI_minimum = MakeWWFixed(0.0) ;
        GVLI_maximum = MakeWWFixed(12.0) ; 
    }
    /*---------------------------------------------------------------------*/
    @object GenValueClass SetSlumberMinutes = {
		  GI_visMoniker = "Minutes" ;
        GVLI_value = MakeWWFixed(10.0) ;
        GVLI_minimum = MakeWWFixed(1.0) ;
        GVLI_maximum = MakeWWFixed(59.0) ;
    }
    /*---------------------------------------------------------------------*/
@end Interface4



@start Interface2 ;
    /*---------------------------------------------------------------------*/
    @object GenGlyphClass FMRadioGlyph = {
        GI_visMoniker = list { @FMNoteMonikerBW, @FMNoteMonikerColor } ;
/*
        HINT_MINIMUM_SIZE = { SST_PIXELS | 96,
                              SST_PIXELS | 70,
                              0 } ;
*/
        HINT_EXPAND_WIDTH_TO_FIT_PARENT ;
        HINT_EXPAND_HEIGHT_TO_FIT_PARENT ;
        HINT_CENTER_MONIKER ;
    }
	 /*---------------------------------------------------------------------*/
@end Interface2



@start Interface3 ;
	 /*---------------------------------------------------------------------*/
@object GenInteractionClass AboutDBox = {
	 GI_visMoniker = "About";
	 GI_comp = @AppName, @By, @BreadBoxLogo,
				  @Visit, @Web, @AboutSpacer1,
				  @Copyright, @BBoxLLC, @Rights, @AboutSpacer2;
    GII_attrs = @default | GIA_NOT_USER_INITIATABLE;
	 GII_visibility = GIV_DIALOG;
	 GII_type = GIT_NOTIFICATION;
	 HINT_CENTER_CHILDREN_HORIZONTALLY;
}
@object GenTextClass AppName = {
    GI_attrs = @default | GA_READ_ONLY;
    GTXI_attrs = @default | GTA_SINGLE_LINE_TEXT;
	 GTXI_text = "FM Radio";
    ATTR_GEN_TEXT_CHAR_ATTR = (ChunkHandle) @AppNameCharAttrs;
}
@chunk VisTextCharAttr AppNameCharAttrs =
	CHAR_ATTR_FONT_SIZE_STYLE(
		FID_DTC_URW_SANS, 36, TS_BOLD);

@object GenGlyphClass By = {
  GI_visMoniker = "by";
}
@object GenGlyphClass BreadBoxLogo = {
  GI_visMoniker = list { @BreadboxLogoMoniker}
}
@object GenGlyphClass Visit = {
  GI_visMoniker = "Visit us at...";
}
@object GenGlyphClass Web = {
  GI_visMoniker = "www.breadbox.com";
}
@object GenGlyphClass AboutSpacer1 = {
  GI_visMoniker = "   ";
}
@object GenGlyphClass Copyright = {
  GI_visMoniker = "Copyright 1994-2002";
}
@object GenGlyphClass BBoxLLC = {
  GI_visMoniker = "Breadbox Computer Company LLC";
}
@object GenGlyphClass Rights = {
  GI_visMoniker = "All Rights Reserved";
}
@object GenGlyphClass AboutSpacer2 = {
  GI_visMoniker = "   ";
}

	 /*---------------------------------------------------------------------*/
	 @object GenTriggerClass BreadBoxLogoTrig = {
		  GI_visMoniker = list { @BBreg24Logo};
		  GTI_destination = @AboutDBox ;
		  GTI_actionMsg = MSG_GEN_INTERACTION_INITIATE ;
	 }

/*	 @object GenGlyphClass BreadBoxGlyph = {
		  GI_visMoniker = list { @BreadboxLogoMoniker
		  /*@BreadBoxMonikerBW, @BreadBoxMonikerColor*/ /*} ;
/*
        HINT_MINIMUM_SIZE = { SST_PIXELS | 164,
                              SST_PIXELS | 40,
                              0 } ;
*/
/*    }
    /*---------------------------------------------------------------------*/
@end Interface3

/*
 ***************************************************************************
 *		Global Variables
 ***************************************************************************
 */
word station = 10430 ;
word presetStations[10] = { 10000, 10000, 10000, 10000, 10000,
                            10000, 10000, 10000, 10000, 10000} ;
optr lastPreset = @Preset1 ;

RadioHandle radioHandle = NullHandle ;
word mute = 0 ;
word power = 0 ;
word tuned = 0 ;

optr presets[10] = {
    @Preset1,
    @Preset2,
    @Preset3,
    @Preset4,
    @Preset5,
    @Preset6,
    @Preset7,
    @Preset8,
    @Preset9,
    @Preset10
} ;

TimerHandle timeTimer = NullHandle ;
word timeId ;
word alarmHour = 0 ;
word alarmMinute = 0 ;
Boolean alarmOnOff = FALSE ;
TimerHandle slumberTimer = NullHandle ;
word slumberId ;
Boolean slumberOnOff = FALSE ;
word slumberHour = 12;
word slumberMinute = 0 ;
word slumberCount = 0 ;
word slumberLeftOver = 0 ;
word scanId ;
TimerHandle scanTimer ;
word lastScan = 1;

/*
 ***************************************************************************
 *		Code for FMRadioProcessClass
 ***************************************************************************
 */

/***************************************************************************/
/*                                                                         */
/* FMTunerClass Methods                                                    */
/*                                                                         */
/***************************************************************************/
/*-------------------------------------------------------------------------*/
@method FMTunerContentClass, MSG_META_EXPOSED
{
    char buffer[8] ;
    GStateHandle gstate;
    SizeAsDWord size ;
    word width1, width2 ;
    word place ;
    word placev ;
    word sizex, sizey ;

    size = @call StereoStation::MSG_VIS_GET_SIZE() ;
    sizex = DWORD_WIDTH(size) ;
    sizey = DWORD_HEIGHT(size) ;

    placev = sizey>>1 ;
    gstate = GrCreateState(win);
    GrBeginUpdate(gstate);

    ConvertToString(station, buffer) ;
    GrSetTextColorMap(gstate, CMM_ON_BLACK | CMT_CLOSEST) ;
    GrSetFont(gstate, FID_DTC_URW_ROMAN, MakeWWFixed(54.0)) ;
    GrSetTextColor(gstate, CF_INDEX, /*(tuned!=0)?*/C_LIGHT_GREEN/*:C_GREEN*/, 0, 0) ;
    width1 = GrTextWidth(gstate, buffer, 8)>>1 ;

    GrSetFont(gstate, FID_DTC_URW_ROMAN, MakeWWFixed(18.0)) ;
    width2 = GrTextWidth(gstate, "STEREO", 6)>>1 ;

    GrSetFont(gstate, FID_DTC_URW_ROMAN, MakeWWFixed(54.0)) ;
    place = (sizex>>1) - 5 - width1 - width2 ;
    GrDrawText(gstate, place, placev-27, buffer, 6) ;
    GrSetFont(gstate, FID_DTC_URW_ROMAN, MakeWWFixed(18.0)) ;
/*
    GrSetTextColor(gstate, CF_INDEX, C_LIGHT_CYAN, 0, 0) ;
*/
    place += width1 + width1 + 10 ;
    GrDrawText(gstate, place, placev, "STEREO", 0) ;

    width1 = GrTextWidth(gstate, "FM", 2)>>1 ;
    place += (width2 - width1) ;
    GrDrawText(gstate, place, placev-18, "FM", 0) ;

    GrSetLineColorMap(gstate, /*CMM_ON_BLACK | */CMT_DITHER) ;
    GrSetLineColor(gstate, CF_INDEX, C_DARK_GRAY, 0, 0) ;
    GrDrawVLine(gstate, 1, 1, sizey-2) ;
    GrDrawVLine(gstate, 2, 2, sizey-3) ;
    GrDrawVLine(gstate, 3, 3, sizey-4) ;
    GrDrawHLine(gstate, 1, 1, sizex-2) ;
    GrDrawHLine(gstate, 1, 2, sizex-2) ;
    GrDrawHLine(gstate, 1, 3, sizex-2) ;

    GrSetLineColor(gstate, CF_INDEX, C_WHITE, 0, 0) ;
    GrDrawVLine(gstate, sizex-2, 1, sizey-2) ;
    GrDrawVLine(gstate, sizex-3, 2, sizey-3) ;
    GrDrawVLine(gstate, sizex-4, 3, sizey-4) ;
    GrDrawHLine(gstate, 3, sizey-4, sizex-4) ;
    GrDrawHLine(gstate, 2, sizey-3, sizex-3) ;
    GrDrawHLine(gstate, 1, sizey-2, sizex-2) ;

    GrEndUpdate(gstate);
    GrDestroyState(gstate);
}
/*-------------------------------------------------------------------------*/
@method FMClockContentClass, MSG_META_EXPOSED
{
    char buffer[10] ;
    GStateHandle gstate;
    TimerDateAndTime date ;
    word value ;
    Boolean pm = FALSE ;
    word width ;
    SizeAsDWord size ;
    word sizex, sizey ;

    size = @call FMRadioTime::MSG_VIS_GET_SIZE() ;
    sizex = DWORD_WIDTH(size) ;
    sizey = DWORD_HEIGHT(size) ;

    gstate = GrCreateState(win);
    GrBeginUpdate(gstate);

    GrSetTextColorMap(gstate, CMM_ON_BLACK | CMT_CLOSEST) ;
    TimerGetDateAndTime(&date) ;
    value = date.TDAT_hours ;
    if (value > 12)  {
        value -= 12 ;
        pm = TRUE ;
    }
    if (value == 0)
        value = 12 ;
    Quick2String(value, buffer, TRUE) ;
    buffer[2] = ':' ;
    Quick2String(date.TDAT_minutes, buffer+3, FALSE) ;
    buffer[5] = ' ' ;
    buffer[6] = pm?'P':'A' ;
    buffer[7] = 'M' ;
    buffer[8] = '\0' ;

    GrSetFont(gstate, FID_DTC_URW_ROMAN, MakeWWFixed(24.0)) ;
    GrSetTextColor(gstate, CF_INDEX, C_LIGHT_VIOLET, 0, 0) ;
    if (buffer[0] != ' ')  {
        width = GrTextWidth(gstate, buffer, 8)>>1 ;
        GrDrawText(gstate,
                   (sizex>>1)-width,
                   (sizey>>1)-12,
                   buffer, 8) ;
    } else  {
        width = GrTextWidth(gstate, buffer+1, 8)>>1 ;
        GrDrawText(gstate,
                   (sizex>>1)-width,
                   (sizey>>1)-12,
                   buffer+1, 7) ;
    }

    GrSetLineColorMap(gstate, CMM_ON_BLACK | CMT_DITHER) ;
    GrSetLineColor(gstate, CF_INDEX, C_DARK_GREY, 0, 0) ;
    GrDrawVLine(gstate, 1, 1, sizey-2) ;
    GrDrawVLine(gstate, 2, 2, sizey-3) ;
    GrDrawVLine(gstate, 3, 3, sizey-4) ;
    GrDrawHLine(gstate, 1, 1, sizex-2) ;
    GrDrawHLine(gstate, 1, 2, sizex-2) ;
    GrDrawHLine(gstate, 1, 3, sizex-2) ;

    GrSetLineColor(gstate, CF_INDEX, C_WHITE, 0, 0) ;
    GrDrawVLine(gstate, sizex-2, 1, sizey-2) ;
    GrDrawVLine(gstate, sizex-3, 2, sizey-3) ;
    GrDrawVLine(gstate, sizex-4, 3, sizey-4) ;
    GrDrawHLine(gstate, 3, sizey-4, sizex-4) ;
    GrDrawHLine(gstate, 2, sizey-3, sizex-3) ;
    GrDrawHLine(gstate, 1, sizey-2, sizex-2) ;

    GrEndUpdate(gstate);
    GrDestroyState(gstate);
}
/*-------------------------------------------------------------------------*/
void ConvertToString(word value, char *str)
{
    word power = 10000;

    while (power >= 1)  {
        *str = '0' + (value / power) ;
        if ((power == 10000) && (value < 10000))
            *str = ' ' ;
        str++ ;
        if (power == 100)
            *(str++) = '.' ;
        value %= power ;
        power /= 10 ;
    }

    *str = '\0' ;
}
/*-------------------------------------------------------------------------*/
void Quick2String(word value, char *str, Boolean front_is_blank)
{
    str[0] = ((value >= 10) || (!front_is_blank)) ? ('0'+(value / 10)) : ' ';
    str[1] = '0'+(value % 10) ;
    str[2] = '\0' ;
}
/*-------------------------------------------------------------------------*/
@method FMRadioProcessClass, MSG_FM_RADIO_INC_TUNER
{
    @call oself::MSG_FM_RADIO_STOP_SCAN() ;
    station += 10 ;
    @call oself::MSG_FM_RADIO_SHOW_STATION() ;
}
/*-------------------------------------------------------------------------*/
@method FMRadioProcessClass, MSG_FM_RADIO_DEC_TUNER
{
    @call oself::MSG_FM_RADIO_STOP_SCAN() ;
    station -= 10 ;
    @call oself::MSG_FM_RADIO_SHOW_STATION() ;
}
/*-------------------------------------------------------------------------*/
@method FMRadioProcessClass, MSG_FM_RADIO_INC_TUNER_FINE
{
    @call oself::MSG_FM_RADIO_STOP_SCAN() ;
    station += 1 ;
    @call oself::MSG_FM_RADIO_SHOW_STATION() ;
}
/*-------------------------------------------------------------------------*/
@method FMRadioProcessClass, MSG_FM_RADIO_DEC_TUNER_FINE
{
    @call oself::MSG_FM_RADIO_STOP_SCAN() ;
    station -= 1 ;
    @call oself::MSG_FM_RADIO_SHOW_STATION() ;
}
/*-------------------------------------------------------------------------*/
@method FMRadioProcessClass, MSG_FM_RADIO_INC_SCAN
{
    station += 2 ;
    if (station > 10800)
        station = 8800 ;

    @call oself::MSG_FM_RADIO_STOP_SCAN() ;
    lastScan = tuned ;
    tuned = FMRadioTuneStation(radioHandle, station, mute || (!power), TRUE) ;

    @send StereoStationContent::MSG_VIS_INVALIDATE() ;
    if ((tuned == 0) || (lastScan == 1))
        scanTimer = TimerStart(
            TIMER_EVENT_ONE_SHOT,
            oself,
            5,
            MSG_FM_RADIO_INC_SCAN,
            0,
            &scanId) ;
/*
        @send oself::MSG_FM_RADIO_INC_SCAN(oself) ;
*/
}
/*-------------------------------------------------------------------------*/
@method FMRadioProcessClass, MSG_FM_RADIO_DEC_SCAN
{
    word id ;

    station -= 2 ;
    if (station < 8800)
        station = 10800 ;

    @call oself::MSG_FM_RADIO_STOP_SCAN() ;
    lastScan = tuned ;
    tuned = FMRadioTuneStation(radioHandle, station, mute || (!power), TRUE) ;

    @send StereoStationContent::MSG_VIS_INVALIDATE() ;
    if ((tuned == 0) || (lastScan == 1))
        scanTimer = TimerStart(
            TIMER_EVENT_ONE_SHOT,
            oself,
            5,
            MSG_FM_RADIO_DEC_SCAN,
            0,
            &scanId) ;
/*
        @send oself::MSG_FM_RADIO_DEC_SCAN(oself) ;
*/
}
/*-------------------------------------------------------------------------*/
@method FMRadioProcessClass, MSG_FM_RADIO_STOP_SCAN
{
    if (scanTimer != NullHandle)
        TimerStop(scanTimer, scanId) ;
}
/*-------------------------------------------------------------------------*/
@method FMRadioProcessClass, MSG_FM_RADIO_INC_VOLUME
{
    FMRadioVolumeControl(radioHandle, 1) ;
}
/*-------------------------------------------------------------------------*/
@method FMRadioProcessClass, MSG_FM_RADIO_DEC_VOLUME
{
    FMRadioVolumeControl(radioHandle, 0) ;
}
/*-------------------------------------------------------------------------*/
@method FMRadioProcessClass, MSG_FM_RADIO_MUTE
{
/*
    char buffer[10] = "Mute   " ;
    if (mute == 1)
        buffer[5] = '\\A5' ;
    @call MuteTrigger::MSG_GEN_REPLACE_VIS_MONIKER_TEXT(buffer, VUM_NOW) ;

*/
    mute ^= 1 ;
    @call MuteTrigger::MSG_ON_OFF_SET(mute==1) ;

    FMRadioMuteAudio(radioHandle, mute || (!power)) ;
}
/*-------------------------------------------------------------------------*/
@method FMRadioProcessClass, MSG_FM_RADIO_POWER
{
    power ^= 1 ;
    @call PowerTrigger::MSG_ON_OFF_SET(power==1) ;

    FMRadioMuteAudio(radioHandle, mute || (!power)) ;
}
/*-------------------------------------------------------------------------*/
@method FMRadioProcessClass, MSG_FM_RADIO_SHOW_STATION
{
    if (station < 8800)
        station = 8800 ;
    if (station > 10800)
        station = 10800 ;

    tuned = FMRadioTuneStation(radioHandle, station, mute || (!power), FALSE) ;
    @call StereoStationContent::MSG_VIS_INVALIDATE() ;
}
/*-------------------------------------------------------------------------*/
@method FMRadioProcessClass, MSG_FM_RADIO_PRESET_SET
{
    word oldId ;

    @call oself::MSG_FM_RADIO_STOP_SCAN() ;
    oldId = @call lastPreset::MSG_FM_PRESET_GET_ID() ;
    presetStations[oldId] = station ;
}
/*-------------------------------------------------------------------------*/
@method FMRadioProcessClass, MSG_FM_RADIO_PRESET
{
    word oldId ;
    word newId ;
    char buffer[10] ;
    word i ;

    @call oself::MSG_FM_RADIO_STOP_SCAN() ;
    oldId = @call lastPreset::MSG_FM_PRESET_GET_ID() ;
    newId = @call trigger::MSG_FM_PRESET_GET_ID() ;

    if (oldId != newId)  {
/*
        Quick2String(oldId+1, buffer, TRUE) ;
        if (buffer[0] == ' ')  {
            buffer[0] = buffer[1] ;
            buffer[1] = '\0' ;
        }
        @call lastPreset::MSG_GEN_REPLACE_VIS_MONIKER_TEXT(buffer, VUM_NOW) ;
*/
        @call lastPreset::MSG_ON_OFF_SET(FALSE) ;

/*
        Quick2String(newId+1, buffer, TRUE) ;
        i = 2 ;
        if (buffer[0] == ' ')  {
            buffer[0] = buffer[1] ;
            buffer[1] = '\0' ;
            i-- ;
        }
        buffer[i++] = ' ' ;
        buffer[i++] = '\\A5' ;
        buffer[i++] = '\0' ;
        @call trigger::MSG_GEN_REPLACE_VIS_MONIKER_TEXT(buffer, VUM_NOW) ;
*/
        @call trigger::MSG_ON_OFF_SET(TRUE) ;

        lastPreset = trigger ;
    }

    station = presetStations[newId] ;
    @send oself::MSG_FM_RADIO_SHOW_STATION() ;
}
/*-------------------------------------------------------------------------*/
@method FMRadioProcessClass, MSG_FM_RADIO_SET_TIME
{
    word id ;
    TimerDateAndTime date ;

    TimerGetDateAndTime(&date) ;
    date.TDAT_hours = @call SetTimeHours::MSG_GEN_VALUE_GET_INTEGER_VALUE() ;
    date.TDAT_minutes = @call SetTimeMinutes::MSG_GEN_VALUE_GET_INTEGER_VALUE() ;
    date.TDAT_seconds = @call SetTimeSeconds::MSG_GEN_VALUE_GET_INTEGER_VALUE() ;

    id = @call SetTimeAMorPM::MSG_GEN_ITEM_GROUP_GET_SELECTION() ;
    if (id != 0)
        date.TDAT_hours += 12 ;

    date.TDAT_dayOfWeek = (DayOfTheWeek)TIME_SET_TIME ;

    TimerSetDateAndTime(0xFFFF/*TIME_SET_TIME*/, &date) ;

    @call FMRadioTimeContent::MSG_VIS_INVALIDATE() ;
}
/*-------------------------------------------------------------------------*/
@method FMRadioProcessClass, MSG_FM_RADIO_SET_SLUMBER
{
    TimerDateAndTime date ;

    TimerGetDateAndTime(&date) ;
/*
    word ticks ;
*/
    slumberHour = @call SetSlumberHours::MSG_GEN_VALUE_GET_INTEGER_VALUE() ;
    slumberMinute = @call SetSlumberMinutes::MSG_GEN_VALUE_GET_INTEGER_VALUE() ;

    slumberCount = slumberHour*60 + slumberMinute ;
    slumberLeftOver = date.TDAT_seconds ;
/*
    ticks = ((slumberHour * 60) + slumberMinute) * 60 ;
    slumberTimer = TimerStart(
                       TIMER_EVENT_ONE_SHOT,
                       oself,
                       ticks,
                       MSG_FM_RADIO_SLUMBER_TIME,
                       0,
                       &slumberId) ;
*/
}
/*-------------------------------------------------------------------------*/
@method FMRadioProcessClass, MSG_FM_RADIO_SLUMBER_TIME
{
    if (slumberOnOff)  {
        power = 1 ;
        @call oself::MSG_FM_RADIO_POWER(oself) ;
        @call oself::MSG_FM_RADIO_SLUMBER_ON_OFF(oself) ;
    }
}
/*-------------------------------------------------------------------------*/
@method FMRadioProcessClass, MSG_FM_RADIO_TIME_CLICK
{
    TimerDateAndTime date ;

    TimerGetDateAndTime(&date) ;

    timeTimer = TimerStart(
                    TIMER_EVENT_ONE_SHOT,
                    oself,
                    (60-date.TDAT_seconds)*60,
                    MSG_FM_RADIO_TIME_CLICK,
                    0,
                    &timeId) ;

    @send FMRadioTimeContent::MSG_VIS_INVALIDATE() ;

    if (slumberOnOff)  {
        slumberCount-- ;
        if (slumberCount == 0)  {
            slumberTimer = TimerStart(
                               TIMER_EVENT_ONE_SHOT,
                               oself,
                               slumberLeftOver*60,
                               MSG_FM_RADIO_SLUMBER_TIME,
                               0,
                               &slumberId) ;
/*
            @send oself::MSG_FM_RADIO_SLUMBER_TIME() ;
*/
        }
    }

    if (alarmOnOff)  {
        if (date.TDAT_hours == 0)
            date.TDAT_hours = 12 ;
        if ((date.TDAT_hours == alarmHour) &&
            (date.TDAT_minutes == alarmMinute))  {
            mute = 1 ;
            @call oself::MSG_FM_RADIO_MUTE(oself) ;
            power = 0 ;
            @call oself::MSG_FM_RADIO_POWER(oself) ;
        }
    }
}
/*-------------------------------------------------------------------------*/
@method FMRadioProcessClass, MSG_FM_RADIO_ALARM_ON_OFF
{
    alarmOnOff = (!alarmOnOff) ;

    if (alarmOnOff)  {
        @call AlarmToggle::MSG_GEN_REPLACE_VIS_MONIKER_TEXT("Alarm On", VUM_NOW) ;
    } else {
        @call AlarmToggle::MSG_GEN_REPLACE_VIS_MONIKER_TEXT("Alarm Off", VUM_NOW) ;
    }
}
/*-------------------------------------------------------------------------*/
@method FMRadioProcessClass, MSG_FM_RADIO_SLUMBER_ON_OFF
{
    slumberOnOff = (!slumberOnOff) ;

    if (slumberOnOff)  {
        @call SlumberToggle::MSG_GEN_REPLACE_VIS_MONIKER_TEXT("Slumber On", VUM_NOW) ;
        @send oself::MSG_FM_RADIO_SET_SLUMBER(oself) ;
    } else {
        if (slumberTimer != NullHandle)  {
            TimerStop(slumberTimer, slumberId) ;
            slumberTimer = NullHandle ;
        }
        @call SlumberToggle::MSG_GEN_REPLACE_VIS_MONIKER_TEXT("Slumber Off", VUM_NOW) ;
    }
}
/*-------------------------------------------------------------------------*/
@method FMRadioProcessClass, MSG_FM_RADIO_SET_TIME_START
{
    @send TimeSetDialog::MSG_GEN_INTERACTION_INITIATE() ;
}
/*-------------------------------------------------------------------------*/
@method FMRadioProcessClass, MSG_FM_RADIO_SET_ALARM_START
{
    @send AlarmSetDialog::MSG_GEN_INTERACTION_INITIATE() ;
}
/*-------------------------------------------------------------------------*/
@method FMRadioProcessClass, MSG_FM_RADIO_SET_SLUMBER_START
{
    @send SlumberSetDialog::MSG_GEN_INTERACTION_INITIATE() ;
}
/*-------------------------------------------------------------------------*/
@method FMRadioProcessClass, MSG_FM_RADIO_SET_ALARM
{
    word id ;

    alarmHour = @call SetAlarmHours::MSG_GEN_VALUE_GET_INTEGER_VALUE() ;
    alarmMinute = @call SetAlarmMinutes::MSG_GEN_VALUE_GET_INTEGER_VALUE() ;

    id = @call SetAlarmAMorPM::MSG_GEN_ITEM_GROUP_GET_SELECTION() ;
    if (id != 0)
        alarmHour += 12 ;
}
/*-------------------------------------------------------------------------*/
@method FMRadioProcessClass, MSG_GEN_PROCESS_OPEN_APPLICATION
{
    word *ptr ;
    char buffer[10] = "station0" ;
    word i = 0 ;
    optr newPreset = NullHandle ;

    @callsuper() ;

    radioHandle = FMRadioInit() ;

    if (radioHandle == NullHandle)
        @send FMRadioApp::MSG_META_QUIT() ;

    for (i=0; i<10; i++)  {
        buffer[7] = '0'+i ;
        InitFileReadInteger("fmradio", buffer, &presetStations[i]) ;
    }
    InitFileReadInteger("fmradio", "preset", &i) ;
    mute = 0 ;
    InitFileReadInteger("fmradio", "mute", &mute) ;
    InitFileReadInteger("fmradio", "power", &power) ;
    InitFileReadInteger("fmradio", "alarmHour", &alarmHour) ;
    InitFileReadInteger("fmradio", "alarmMin", &alarmMinute) ;
    @call SetAlarmHours::MSG_GEN_VALUE_SET_INTEGER_VALUE(alarmHour%12, FALSE) ;
    @call SetAlarmMinutes::MSG_GEN_VALUE_SET_INTEGER_VALUE(alarmMinute, FALSE) ;
    if (alarmHour > 12)
        @call SetAlarmAMorPM::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(1, FALSE) ;
    InitFileReadBoolean("fmradio", "alarmOn", &alarmOnOff) ;
    InitFileReadInteger("fmradio", "slumHour", &slumberHour) ;
    InitFileReadInteger("fmradio", "slumMin", &slumberMinute) ;
    @call SetSlumberHours::MSG_GEN_VALUE_SET_INTEGER_VALUE(slumberHour, FALSE) ;
    @call SetSlumberMinutes::MSG_GEN_VALUE_SET_INTEGER_VALUE(slumberMinute, FALSE) ;
    mute ^= 1 ;
    @call oself::MSG_FM_RADIO_MUTE(oself) ;
    power ^= 1 ;
    @call oself::MSG_FM_RADIO_POWER(oself) ;
    alarmOnOff = (!alarmOnOff) ;
    @call oself::MSG_FM_RADIO_ALARM_ON_OFF(oself) ;

    if (i>=10)
        i = 0 ;

    newPreset = presets[i] ;
    @call oself::MSG_FM_RADIO_PRESET(newPreset) ;
    InitFileReadInteger("fmradio", "current", &station) ;
    @send oself::MSG_FM_RADIO_SHOW_STATION() ;
	 @send oself::MSG_FM_RADIO_TIME_CLICK() ;

	 /* needed to install app tiny token */
    @call FMRadioApp::MSG_GEN_APPLICATION_INSTALL_TOKEN();

}
/*-------------------------------------------------------------------------*/
@method FMRadioProcessClass, MSG_GEN_PROCESS_CLOSE_APPLICATION
{
    char buffer[10] = "station0" ;
    word i ;

    @call oself::MSG_FM_RADIO_STOP_SCAN() ;

    if (timeTimer != NullHandle)
        TimerStop(timeTimer, timeId) ;

    if (slumberTimer != NullHandle)
        TimerStop(slumberTimer, slumberId) ;

    for (i=0; i<10; i++)  {
        buffer[7] = '0'+(i%10) ;
        InitFileWriteInteger("fmradio", buffer, presetStations[i]) ;
    }

    InitFileWriteInteger("fmradio", "current", station) ;

    for (i=0; i<10; i++)
        if (presets[i] == lastPreset)
            break ;

    InitFileWriteInteger("fmradio", "preset", i) ;
    InitFileWriteInteger("fmradio", "mute", mute) ;
    InitFileWriteInteger("fmradio", "power", power) ;
    InitFileWriteInteger("fmradio", "alarmHour", alarmHour) ;
    InitFileWriteInteger("fmradio", "alarmMin", alarmMinute) ;
    InitFileWriteBoolean("fmradio", "alarmOn", alarmOnOff) ;
    InitFileWriteInteger("fmradio", "slumHour", slumberHour) ;
    InitFileWriteInteger("fmradio", "slumMin", slumberMinute) ;

    InitFileSave() ;

    if (radioHandle)
        FMRadioDeinit(radioHandle) ;

    return @callsuper() ;
}
/*-------------------------------------------------------------------------*/
@method FMTriggerClass, MSG_META_START_SELECT
{
    pself->FMTI_wait = 20 ;
    pself->FMTI_held = TRUE ;
    @send oself::MSG_FM_TRIGGER_CLICK() ;
    @callsuper() ;
}
/*-------------------------------------------------------------------------*/
@method FMTriggerClass, MSG_FM_TRIGGER_CLICK
{
    EventHandle event ;

    if (pself->FMTI_held == TRUE)  {
        if (pself->FMTI_wait != 20)
            @send oself::MSG_GEN_TRIGGER_SEND_ACTION(FALSE) ;
        if (pself->FMTI_wait != 1)
            pself->FMTI_wait-- ;
        pself->FMTI_timer = TimerStart(
                                TIMER_EVENT_ONE_SHOT,
                                oself,
                                pself->FMTI_wait,
                                MSG_FM_TRIGGER_CLICK,
                                pself->FMTI_wait,
                                &pself->FMTI_timerId) ;
    }
}
/*-------------------------------------------------------------------------*/
@method FMTriggerClass, MSG_META_LOST_MOUSE_EXCL
{
    pself->FMTI_held = FALSE ;
    @callsuper() ;
}
/*-------------------------------------------------------------------------*/
@method FMPresetClass, MSG_FM_PRESET_GET_ID
{
    return pself->FMPI_id ;
}
/*-------------------------------------------------------------------------*/
@method OnOffTriggerClass, MSG_VIS_DRAW
{
    Bitmap *ptr ;
    Rectangle rect ;
    sword x, y ;

    @callsuper() ;

    MemLock(OptrToHandle(@LightOnBitmap)) ;
    @call oself::MSG_VIS_GET_BOUNDS(&rect) ;

/*
    x = (rect.R_left + rect.R_right)/2 ;
*/
    x = rect.R_right - 15 ;
    y = (rect.R_top + rect.R_bottom)/2 - 5 ;

    if (pself->OOTI_onOff)
        ptr = (Bitmap *)LMemDeref(@LightOnBitmap) ;
    else
        ptr = (Bitmap *)LMemDeref(@LightOffBitmap) ;


    GrDrawBitmap(gstate, x, y, ptr, NullHandle) ;

    MemUnlock(OptrToHandle(@LightOnBitmap)) ;
}
/*-------------------------------------------------------------------------*/
@method OnOffTriggerClass, MSG_ON_OFF_SET
{
    pself->OOTI_onOff = onOff ;
    @call oself::MSG_VIS_INVALIDATE() ;
}
/*-------------------------------------------------------------------------*/
@method FMInterClass, MSG_VIS_DRAW
{
    Rectangle rect;
    byte color ;

    @call oself::MSG_VIS_GET_BOUNDS(&rect) ;
    GrSaveState(gstate) ;
    GrSetLineWidth(gstate, MakeWWFixed(1.0)) ;
    GrSetLineColorMap(gstate, /*CMM_ON_BLACK | */CMT_DITHER) ;
    GrSetLineColor(
        gstate,
        CF_INDEX,
/*        ((drawFlags & DF_DISPLAY_TYPE)<=DC_GRAY_1) ? C_BLACK : */ C_WHITE,
        0, 0) ;
    GrDrawVLine(gstate, rect.R_left-2, rect.R_top-2, rect.R_bottom+1) ;
    GrDrawHLine(gstate, rect.R_left-2, rect.R_top-2, rect.R_right+1) ;
    GrSetLineColor(
        gstate,
        CF_INDEX,
/*        ((drawFlags & DF_DISPLAY_TYPE)<=DC_GRAY_1) ? C_BLACK : */ C_DARK_GRAY,
        0, 0) ;
    GrDrawVLine(gstate, rect.R_right+1, rect.R_top-2, rect.R_bottom+1) ;
    GrDrawHLine(gstate, rect.R_left-2, rect.R_bottom+1, rect.R_right+1) ;
/*
    GrDrawRect(gstate,
        rect.R_left-1,
        rect.R_top-1,
        rect.R_right,
        rect.R_bottom) ;
    GrRestoreState(gstate) ;
*/

    @callsuper() ;
}
/*-------------------------------------------------------------------------*/
