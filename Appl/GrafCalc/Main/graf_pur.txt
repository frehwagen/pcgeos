void GeografiFDraw(GStateHandle gstate)
{ 
   double wert1,wert2,wert3,yf,xl,xr;
   sword ii,i,j,y,y1,ym,begin,end;
   double anfang[3],ende[3],k;
   sword fnr;
   byte uebergelaufen;
   char *hs,xstring[10],leerstring[6];
   Boolean linienanfang=FALSE;
   Boolean linienende=TRUE;
   double kruemmung_links,kruemmung_rechts,steigung_links,steigung_rechts;
   ColorQuad color, farbe;
   char zahl[LOCAL_DISTANCE_BUFFER_SIZE];
   byte zahl_laenge;

  // Funktionsgraf
    fnr=0;   
    if (strlen(term[fnr])!=0)
    {                    
      if (berechnet[fnr]==FALSE)  funktionswert_berechnen(begin,fnr);	//erster Funktionswert

      if (fehlernr[fnr][begin]!=3 && fehlernr[fnr][begin]!=4 && fehlernr[fnr][begin]>0)
         switch (fehlernr[fnr][begin])
         {
              case 1: GrDrawText(gstate,50,80,"Function unknown",0);break;
              case 2: GrDrawText(gstate,50,80,"Error in parentheses",0);break;
              // 3 Division durch Null
              // 4 negativer Radikant
              case 5: GrDrawText(gstate,50,70,"Base negative",0);break;
              case 6: GrDrawText(gstate,50,80,"Operator unknown",0);
              case 7: GrDrawText(gstate,50,80,"Error 7",0);
              case 8: GrDrawText(gstate,50,80,"Error 8",0);
        }
        else
        {
              GrSetLineColor(gstate,CF_INDEX,lineColor[fnr],0,0);
              if (zeichenmodus[fnr])
              {
	  GrSetLineWidth(gstate,MakeWWFixed(linie[fnr]));
	  GrSetLineStyle(gstate,muster[fnr],0,0,0);
              }
              else
              {
	 GrSetLineWidth(gstate,MakeWWFixed(1));
	 GrSetLineStyle(gstate,0,0,0,0);
              }
              //erster Funktionswert im Def.-Bereich
              yf=mul(mul(-yfaktor,50),funktionswert[fnr][begin]);
              yf=yf+(double)(URSPRUNG_Y-deltay);

              //Liegt er im Fenster?
              //if yf+1>2*URSPRUNG_Y || yf<0
              if ((sub(add(yf,1),mul(2,URSPRUNG_Y))>0 || yf<0) && fehlernr[fnr][begin]<3)
              {
                   //Nein
                   //if yf+1>2*URSPRUNG_Y unten raus
                   if (sub(add(yf,1),mul(2,URSPRUNG_Y))>0)
                        {y1=mul(2,URSPRUNG_Y);fehlernr[fnr][begin]=-2;}
                   //oben raus
                   if (yf<0)
	    {y1=-1;fehlernr[fnr][begin]=-1;}
                   uebergelaufen=1;
               }
               //Ja
               else 
               {
                    y1=(sword)yf;
                    if (fehlernr[fnr][begin]<3)	
	{ 
	     fehlernr[fnr][begin]=0;
                         uebergelaufen=0;
	     punkte[0].P_x=begin;
	     punkte[0].P_y=y1;
	     j=0;
	     //anfangspunkt=begin;
	     linienanfang=FALSE;
	     linienende=FALSE;
                         if (zeichenmodus[fnr]==FALSE)
                              GrDrawLine(gstate,begin,y1,begin,y1);
	}
                }
                if (zeichengenauigkeit<genauigkeit) berechnet[fnr]=FALSE;
                for (i=begin+1;i<end+1-zeichengenauigkeit;i+=zeichengenauigkeit)
                {
	 if (berechnet[fnr]==FALSE) funktionswert_berechnen(i,fnr);
                     yf=mul(mul(-yfaktor,50),funktionswert[fnr][i]);
                     yf=yf+(double)(URSPRUNG_Y-deltay);
                     if ((sub(add(yf,1),mul(2,URSPRUNG_Y))>0 || yf<0) && fehlernr[fnr][i]<3)
	 {
                           if (sub(add(yf,1),mul(2,URSPRUNG_Y))>0) {y=mul(2,URSPRUNG_Y);fehlernr[fnr][i]=-2;}
	       if (yf<0) {y=-1;fehlernr[fnr][i]=-1;}
	       uebergelaufen++;
	  }
	  else 
                       {
                            y=(sword)yf;
                            if (fehlernr[fnr][i]<3)
	            { uebergelaufen=0;fehlernr[fnr][i]=0;}
	   }
	   if (fehlernr[fnr][i]<=0 && uebergelaufen<2)            //kein Fehler
	   {
	        if (uebergelaufen==0)                   //im Fenster
	        {
	             if (linienende==TRUE) linienanfang=TRUE;
	             if (linienanfang==TRUE)
	             {
		if (y1==-1 || y1==2*URSPRUNG_Y)
		{
		     j=0;
		     punkte[0].P_x=i-1;
		     punkte[0].P_y=y1;
		}
		else j=-1;
		linienanfang=FALSE;linienende=FALSE;
	             }
	             j++;
	             punkte[j].P_x=i;
	             punkte[j].P_y=y;
	             if (zeichenmodus[fnr]==FALSE)
		 GrDrawLine(gstate,i,y,i,y);
	            y1=y;
	        } 
                            else
	        {
	             if (uebergelaufen==1 && i>1)   // der 1. Punkt auáerhalb
	             {                      // des Fensters wird mit dem letzten
		     j++;
		     punkte[j].P_x=i;
		     punkte[j].P_y=y;
		     while (mod(j,3)!=1)
		     {
		          j++;
		          punkte[j].P_x=i;
		          punkte[j].P_y=y;
		     }
		      if (zeichenmodus[fnr])
		      {
                                                  GrDrawSpline(gstate,punkte,j);
		          linienende=TRUE;
		      }
						// innerhalb verbunden
		     y1=y;
		   }
		   else i--;
		}
	  }
	  else  // Fehlernummer<>0 oder uebergelaufen>1
	   {
	     ii=i;
	     if (fehlernr[fnr][ii]<0)   //šberlauf ohne Fehler
	      {
	           while (fehlernr[fnr][ii]<0 && ii<2*URSPRUNG_X-1)
	           {
                                   if (fehlernr[fnr][ii]*fehlernr[fnr][ii-1]==2)  //Vorzeichenwechsel
	               {
                      	x=div((ii-1+deltax-URSPRUNG_X)*0.02,xfaktor);
                      	hs=term[fnr];wert1=getterm(&hs,x,1,&fehler);
                     	x=div((ii+deltax-URSPRUNG_X)*0.02,xfaktor);
                      	hs=term[fnr];wert2=getterm(&hs,x,1,&fehler);
                      	x=div((ii-0.5+deltax-URSPRUNG_X)*0.02,xfaktor);
                      	hs=term[fnr];wert3=getterm(&hs,x,1,&fehler);
		if (wert3-wert1<0 && wert3-wert2>0 || wert3-wert1>0 && wert3-wert2<0)
		{
			 if (zeichenmodus[fnr]==FALSE)
			    GrDrawLine(gstate,ii-1,y1,ii,y);     // Korrektur des Linienzeichenfehlers
			  else GrDrawLine(gstate,ii,y,ii,y);
		}
		else
		     if (polstellen==1) pol_zeichnen(gstate,ii,fnr);
	              }
	              ii++;y1=y;
	              if (berechnet[fnr]==FALSE) funktionswert_berechnen(ii,fnr);
                   	              yf=mul(mul(-yfaktor,50),funktionswert[fnr][ii]);
                                  yf=yf+(double)(URSPRUNG_Y-deltay);
	               if ((yf-2*URSPRUNG_Y+1>0 || yf<0) && fehlernr[fnr][ii]<3)
	               {
		      if (yf<0) {y=-1;fehlernr[fnr][ii]=-1;}
		      if (yf-2*URSPRUNG_Y+1>0) {y=2*URSPRUNG_Y;fehlernr[fnr][ii]=-2;}
	                }
	                 else { y=(sword)yf;
	                 if (fehlernr[fnr][ii]<3) fehlernr[fnr][ii]=0;
                              }
	     }
	     if (fehlernr[fnr][ii]==0)
	     {
	          uebergelaufen=0;ii--;
	          linienanfang=TRUE;
	      }
	     if (fehlernr[fnr][ii]>0) ii--;
                    }
	else
		   if (fehlernr[fnr][ii]==3)
		    {
		         if (berechnet[fnr]==FALSE) funktionswert_berechnen(ii+1,fnr);
                      	         yf=mul(mul(-yfaktor,50),funktionswert[fnr][ii+1]);
                      	         yf=yf+(double)(URSPRUNG_Y-deltay);
		         if ((yf-2*URSPRUNG_Y>0 || yf<0) && fehlernr[fnr][ii]<3)
		         {
			 if (yf-2*URSPRUNG_Y>0) {y=2*URSPRUNG_Y;fehlernr[fnr][ii]=-2;}
			 if (yf<0) {y=-1;fehlernr[fnr][ii]=-1;}
		          }
		          else {y=(sword)yf;if (fehlernr[fnr][ii]<3) fehlernr[fnr][ii]=0;}
                     	          ym=(sword)(div(y1+y,2));
		          if (yf-2*URSPRUNG_Y+2<0 && yf+1>0)
		          {
			 y=(int)yf;
			 GrSetLineStyle(gstate,0,0,0,0);
			 GrSetLineColor(gstate,CF_INDEX,C_BLACK,0,0);
			 GrSetLineWidth(gstate,MakeWWFixed(1));
			 GrDrawEllipse(gstate,ii-4,ym-4,ii+4,ym+4);
			 GrSetLineStyle(gstate,muster[fnr],0,0,0);
			 GrSetLineWidth(gstate,MakeWWFixed(linie[fnr]));
			 GrSetLineColor(gstate,CF_INDEX,lineColor[fnr],0,0);
			 while (mod(j,3)!=1)
			 {
			     j++;
			     punkte[j].P_x=ii-1;
			     punkte[j].P_y=y1;
			 }
			 GrDrawSpline(gstate,punkte,j);
			 linienende=TRUE;
		           }
		           else if (polstellen==1) pol_zeichnen(gstate,ii,fnr);
		           if (yf-2*URSPRUNG_Y+1>0 && yf+1<0)
		           {
			  uebergelaufen++;ii--;
		            }
		            else linienanfang=TRUE;
		            y1=y;
		    }
		    else
		    if (fehlernr[fnr][ii]==4 && linienende==FALSE)
		    {
		      while (mod(j,3)!=1)
		      {
		       j++;
		       punkte[j-1].P_x=ii-1;
		       punkte[j-1].P_y=y1;
		      }
		      GrDrawSpline(gstate,punkte,j);
		      linienende=TRUE;
		    }
	      i=ii;
	     }
	   }
	}
	berechnet[fnr]=TRUE;genauigkeit=zeichengenauigkeit;
	if (linienende==FALSE && zeichenmodus[fnr])
	{
	 while (mod(j,3)!=1)
	 {
	  j++;
	  punkte[j].P_x=i;
	  punkte[j].P_y=y;
	 }
	 GrDrawSpline(gstate,punkte,j);
	 linienende=TRUE;
	}
  }