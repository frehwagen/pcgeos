//@optimize


FloatNum exp(FloatNum);
FloatNum xpow(FloatNum,FloatNum);
FloatNum ln(FloatNum);
FloatNum lg(FloatNum);
FloatNum sqr(FloatNum);
FloatNum round(FloatNum,sword);
FloatNum abs(FloatNum);
FloatNum mod(FloatNum,FloatNum);
FloatNum dividiere(FloatNum,FloatNum);
FloatNum mul(FloatNum,FloatNum);
FloatNum subtrahiere(FloatNum,FloatNum);
FloatNum random(FloatNum);
FloatNum random1(void);
FloatNum arctan(FloatNum);
FloatNum div(FloatNum, FloatNum);
 


double FixedToFloatingpointnumber(WWFixedAsDWord);
double WWFixedToFloatingpointnumber(WWFixed);
double sign(double);


double sign(double zahl)
{
 if (zahl<=0)
  if (zahl==0) return (0);
  else return (-1);
 else return (1);
}

FloatNum abs(FloatNum zahl1)
{ 
  FloatNum zahl3;
  FloatPushNumber(&zahl1);
  FloatAbs();
  FloatPopNumber(&zahl3);
  return(zahl3);
} 
FloatNum div(FloatNum zahl1, FloatNum zahl2)
{
  FloatNum zahl3;
  FloatPushNumber(&zahl1);
  FloatPushNumber(&zahl2);
  FloatDIV();
  FloatPopNumber(&zahl3);
  return(zahl3);
}

FloatNum exp(FloatNum zahl1)
{ 
  FloatNum zahl3;
  
  FloatPushNumber(&zahl1);
  FloatExp();
  FloatPopNumber(&zahl3);
  return(zahl3);
} 
FloatNum ln(FloatNum zahl1)
{
  FloatNum zahl3;
  FloatPushNumber(&zahl1);
  FloatLn();
  FloatPopNumber(&zahl3);
  return(zahl3);
} 
FloatNum lg(FloatNum zahl1)
{
  FloatNum zahl3;
  FloatPushNumber(&zahl1);
  FloatLog();
  FloatPopNumber(&zahl3);
  return(zahl3);
} 
FloatNum sqr(FloatNum zahl1)
{
  FloatNum zahl3;
  FloatPushNumber(&zahl1);
  FloatSqr();
  FloatPopNumber(&zahl3);
  return(zahl3);
} 
FloatNum round(FloatNum zahl1,sword zahl2)
{
  FloatNum zahl3;
  FloatPushNumber(&zahl1);
  FloatRound(zahl2);
  FloatPopNumber(&zahl3);
  return(zahl3);
} 
FloatNum xpow(FloatNum zahl1,FloatNum zahl2)
{
  FloatNum zahl3;
  FloatPushNumber(&zahl1);
  FloatPushNumber(&zahl2);
  FloatExponential();
  FloatPopNumber(&zahl3);
  return(zahl3);
} 
FloatNum mod(FloatNum zahl1,FloatNum zahl2)
{
  FloatNum zahl3;
  FloatPushNumber(&zahl1);
  FloatPushNumber(&zahl2);
  FloatMod();
  FloatPopNumber(&zahl3);
  return(zahl3);
}
FloatNum subtrahiere(FloatNum minuend,FloatNum subtrahend)
{
  FloatNum differenz;

  FloatPushNumber(&minuend);
  FloatPushNumber(&subtrahend);
  FloatSub();
  FloatPopNumber(&differenz);
  return(differenz);
}
FloatNum dividiere(FloatNum dividend,FloatNum divisor)
{
  FloatNum quotient;
  FloatPushNumber(&dividend);
  FloatPushNumber(&divisor);
  FloatDivide();
  FloatPopNumber(&quotient);
  return(quotient);
}
FloatNum mul(FloatNum faktor1,FloatNum faktor2)
{
  FloatNum produkt;
  FloatPushNumber(&faktor1);
  FloatPushNumber(&faktor2);
  FloatMultiply();
  FloatPopNumber(&produkt);
  return(produkt);
}
/*FloatNum random(FloatNum bereich)
{
 FloatNum zufallszahl;
 FloatPushNumber(&bereich);
 FloatRandomN();
 FloatPopNumber(&zufallszahl);
 return(zufallszahl);
} */
FloatNum random1()
{
 FloatNum zufallszahl;
 FloatRandom();
 FloatPopNumber(&zufallszahl);
 return(zufallszahl);
}
FloatNum arctan(FloatNum zahl1)
{
  FloatNum zahl2;
  FloatPushNumber(&zahl1);
  FloatArcTan();
  FloatPopNumber(&zahl2);
  return(zahl2);
} 
double FixedToFloatingpointnumber(WWFixedAsDWord fpn)
{
  double f;
  f=(double)FractionOf(fpn);
  f=f/65536;
  f=f+(sword)IntegerOf(fpn);
  return(f);
}
double WWFixedToFloatingpointnumber(WWFixed fpn)
{
  double f;
  f=(double)WWFixedToFrac(fpn);
  f=f/65536;
  f=f+(sword)WWFixedToInt(fpn);
  return(f);
}

